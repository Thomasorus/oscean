====
NAME: Home
HOST: Home
BREF: The personal wiki of Thomasorus
PRIV: false
BODY:

# Thomasorus' garden

This is my little space where I store things.

- {about.html, "About me"}
- {now.html, "Now"}

## Self Tracking

- {time.html, "Time tracker"}
- {tracking.html, "About tracking myself"}

## Shared Knowledge

- {html-tips.html, "HTML Tips and tricks, everything I know about it"}
- {css-methodologies.html, "CSS methodologies through history"}
- {writing-tips.html, "Writing tips and tricks"}
- {raspberry-pi-distros.html, "Raspberry Pi distributions"}
- {whiteboard.html, "The whiteboard, where I store temporary things"}

## My Tools

- {tools.html, "Philosophy"}
- {kaku.html, "Kaku 書く", Kaku is a markup language}
- {ronbun.html, "Ronbun 論文", Ronbun is a static site generator}
- {kantan.html, "Kantan 簡単", Kantan is a bash script for web development}
- {moyo.html, "Moyō 模様", Moyō is a collection of patterns in CSS I use for my websites}
- {keyboards.html, "Keyboards", The keyboards I use}
- {raspberry-pi.html, "Raspberry Pi"}


## Journal

- {lost-in-the-dev-world.html, "Lost in the dev world"}
- {2020.html, "2020"}
- {renovation-journal.html, "Renovation journal"}
- {i-removed-the-computer.html, "I removed the computer"}

====

NAME: Time
HOST: Tracking
BREF: Thomasorus' time tracker
PRIV: false
BODY:

# Time

====
NAME: Now
HOST: Home
BREF: What am I doing now?
PRIV: false
BODY:

# Now

Writing:
- An article about how to achieve 2D look in 3D
- The lore of a story I had in mind for a long time

Others:
- Renovating my apartment


====

NAME: Keyboards
HOST: Tools
BREF: I use custom keyboards to write and work
PRIV: false
BODY:

# Keyboards

I use two keyboards: the *Happy Hacking Keyboard* (HHKB) by PFU and a *Happy Hacking Keyboard plate replica* made in China.

## Happy Hacking Keyboard

[media/hhkb.jpg, The happy hacking keyboard]

Bought in 2016 at Akihabara in Japan, this HHKB had been my daily driver since. It took several weeks to get used to it as I learned both to write in QWERTY and the very special layout of this keyboard. It's currently customized with a {https://kbdfans.com/products/pre-orderelectrostatic-capacity-keyboard-japanese-keycaps?_pos=16&_sid=098521c43&_ss=r, "japanese keyset"}. As for all HHKBs, the switches are Topre.

## HHKB plate replica

[media/hhkb-plate.jpg, My plate replica of HHKB]

Bought in 2018 to have a second keyboard with the HHKB layout to drop at work. This keyboard initially had a rough CNC cut plate with Outemu Purple switches. I unsoldered the switches and replaced them with Cherry MX Silent Red. A friend also lubed them to avoid making noise. A vinyl like sticker was then applied to the plate to hide the rough metal. 

====

NAME: Kaku
HOST: Tools
BREF: Kaku is a markup language made to fit my needs.
PRIV: false
BODY:

# Kaku 書く

Kaku (write) is my own markup language. It's inspired by Markdown with a few modification for quotes, links, images and lists handling. It was created to fit my needs and is currently used on this website.

This {https://github.com/Thomasorus/Kaku, "repository"} contains the detailed specs and a JavaScript parser for Kaku.

====

NAME: Tracking
HOST: Home
BREF: An explanation about why I track some stuff in my life
PRIV: false
BODY:

# Tracking

I track time spent on my hobbies. First I hated the idea. I saw it as self-surveillance, as an intrusion of accounting and management in my personal space where precisely, you don't count your time.

After two months I realized I had the wrong feeling. Tracking hours has become a tool for self-discovery. It allows me to take a huge step back and to be more careful about my well-being. It also helps making connections between what I do and what I feel every day.

For example, for the first two months of 2020 I spent around 70 hours on personal projects. It's 7.8 hours a week, which means I overall worked a day more each week on personal stuff. It made me realize I was on the wrong path to accomplish one of my goals, which is to be less productive and more creative.

For people like me who wonders where their free time disappears, tracking time helps. My advice however, is to find a personal way of tracking time instead of using apps, bullet journals or stuff related to productivity. Finding your own way of tracking your own time is also part of the self-discovery thing.

To me tracking time doesn't mean trying to be more productive, but the opposite.

## Tracking...

- {time.html, "My time on a week basis"}

====

NAME: Tools
HOST: Home
BREF: A collection of hardware and software tools I use or made
PRIV: false
BODY:

# Tools

A collection of tools I use or made. 

## Why I make my own tools

As software developers we are all the time required to follow the next big thing and use new frameworks or libraries. It comes with a lot of code bloat, it requires to relearn everything from scratch and does not favors building strong fundamentals. It's exhausting and maintains people into imposter syndrome.

Creating my own instead of using other people's tools is a very appreciable exercise of self-discovery. It allows to ask, ala Marie Kondo, if these tools I use all the time as a software developer brings me happiness. And if not, why do I keep using them?

Coding my tools removes the notion of efficiency and productivity associated with software development. I don't know when the tool I build will be done and it doesn't matter, that's why it's relaxing. Instead of complying with other people way of doing, I discover my own and my software evolves with me.

It's a reappropriation of the means of production towards self-discovery.

## Software

- {kaku.html, "Kaku 書く", Kaku is a markup language} is my markup language
- {ronbun.html, "Ronbun 論文", Ronbun is a static site generator} is my static site generator
- {kantan.html, "Kantan 簡単", Kantan is a bash script for web development}
- {moyo.html, "Moyō 模様", Moyō is a collection of patterns in CSS I use for my websites}

## Hardware

- {keyboards.html, "Keyboards", The keyboards I use I use and customize}
- {raspberry-pi.html, "Raspberry Pi"}


====

NAME: Ronbun
HOST: Tools
BREF: Ronbun is my static site generator and time tracking system
PRIV: false
BODY:

# Ronbun 論文

Ronbun (_paper_) is my *static site generator*. It's built with nodejs and uses {/kaku.html, "Kaku"} as a markup language and imagemagick on the server to process images. It also process time tracking and presents it {time.html, "as graphics"}.

Ronbun uses a single file as a source of content and a text file for time recordings. It parses files and generates HTML using a template. Ronbun and the {kaku.html, "Kaku"} parser try as much as possible to provide light and accessible pages by using {html-tips.html, "standard HTML techniques"}.

Ronbun was created as a self discovery project following my {tools.html, "philosophy"} about personal projects.

Ronbun's repo is on {https://github.com/Thomasorus/Ronbun, "github"}.

Next features:

+ Add sitemap

Global goals:

+ Provide more stats on the tracker
+ Full rewrite in a more generally available language (C, Python...)


====

NAME: Kantan
HOST: Tools
BREF: Kantan 簡単 (simple, easy) is a bash script that launches a web server, watch files and launch build commands on file change. 
PRIV: false
BODY:

Kantan 簡単

Kantan 簡単 (simple, easy) is a bash script that launches a web server, watch files and launch build commands on file change.  The goal is to be able to install and configure a web development environment in a few minutes without relying on external package managers or heavy builders.

Kantan's repo is on {https://github.com/Thomasorus/Kantan, "Github"}

====

NAME: About
HOST: Home
BREF: About me
PRIV: false
BODY:

# About me

I'm a front-end developer specialized in interfaces, user experience and accessibility. I'm a technical generalist with experience on web projects of all sizes and all types of stacks. I have worked alone, as well as in teams of dozens of people, sometimes as a technical advisor for non-technical coworkers.

I have a strong interest in indie web, low tech and sustainable stacks. I've been producing podcasts and writing about fighting games, my main hobby, for more than ten years and have worked for professional publications and brands; as well as organized tournaments and events in non-profit organizations. I also was a French comics specialized bookseller.

I have a degree in fine arts and web development.


====

NAME: curriculum vitae
HOST: Home
BREF: My curriculum vitae
PRIV: false
BODY:

# Curriculum Vitae

====

NAME: Knowledge
HOST: Home
BREF: Where I put things I don't want to forget
PRIV: false
BODY:

# Knowledge

This page references knowledge of all sorts I want to keep written. It can be technical writing, ideas, notes to self. 

- {html-tips.html, "HTML Tips and tricks, everything I know about it"}
- {css-methodologies.html, "CSS methodologies through history"}
- {writing-tips.html, "Writing tips and tricks"}
- {raspberry-pi-distros.html, "Raspberry Pi distributions"}
- {whiteboard.html, "The whiteboard, where I store temporary things"}

====

NAME: Html tips
HOST: knowledge
BREF: A collection of HTML and CSS tips to build simple yet optimized websites
PRIV: false
BODY:

# HTML and CSS simple tips and tricks for your website

The goal of this page is to help you with easy tricks to make the HTML of your website accessible, readable by everyone and optimized for low bandwidth.

This tips and tricks are from personal experience working as a front-end web developer specialized in UI and accessibility for the last 5 years. It might not be perfect or 100% accurate. If you find any problem, please {/now.html, "contact me", Go to my contact page}.

## About accessibility

Accessibility is making your website inclusive for people with disabilities. If respecting accessibility can seem like a chore, it's actually a good way of learning good HTML practices and everything in these pages is therefore influenced by it.

- {what-is-accessibility.html, "So, what is accessibility?"}
- {accessibility-rules-and-tools.html, "Basic rules about accessibility and tools to enforce them"}

## The basics of HTML

This section will give your some basic knowledge and code to get started. It will also explain the basics of semantic HTML and why it's important. As everything in these pages, it's a toolbox of things I use, not a full specification rewriting, and it's heavily influenced by my own practices.

- {the-basics-of-html.html, "The basics: the head, the div and the span"}
- {what-is-semantic-html.html, "What is semantic HTML and why should I care?"}


## Layouts in HTML

Once you have the basics sets it's probably time to do some layouts. There are parts that you can do just in HTML, and others that need CSS. Layouts are the ones who need CSS. *You can save dozens of lines of HTML by using 3 lines of CSS when you are doing layout*. So don't try doing all your layout only in HTML. You'll just have a hard time doing what you want and your markup will be ugly.

Layout examples will be given through these pages, try to inspect them with your browser, reuse and tweak them to your needs.

- {never-use-tables-for-layout.html, "Don't you dare use tables for layout!"}
- {the-display-property.html, "The basics of layout with the display property"}
- {flexbox-the-goat.html, "Flexbox, the goat"}
- {css-grid-the-almighty.html, "CSS Grid the almighty"}

## Common elements inside your layouts

So we have our page layouts structured by semantic HTML elements. Now is the time to put some content. Text! Images! Videos! Titles! We want them all!

- {order-your-titles-correctly.html, "Order your titles correctly"}
- {organize-your-text-content.html, "Organize your text content"}
- {all-about-images.html, "All about images"}
- {all-about-video-and-audio.html, "All about video and audio"}
- {doing-forms-correctly.html, "Doing forms correctly"}
- {tables-are-not-that-complicated.html, "Tables are not that complicated"}

## The inline semantic elements

What's the difference between the text semantic elements and the inline semantic elements? Well the first ones are still used to structure your content, but the second ones are used to indicate more precisely what the text inside is about.

- {make-your-links-clear-and-accessible.html, "Make your links clear and accessible"}
- {when-to-use-a-button-and-a-link.html, "When to use a button and a link"}
- {strong-b-em-and-i.html, "The mess of strong b em and i"}
- {other-kinda-useful-semantic-elements.html, "Other kinda useful semantic elements"}

## The not very used interactive elements

Interactive elements are fully functional tools in HTML. Unfortunately they are difficult to style and most often not used that much for this reason. Still some of them are really cool.

- {html-interactive-elements.html, "Some interactive elements that can be useful"}

## About CSS 

Performance is a hot topic as the website obesity crisis keeps going. In these pages I already explained a few things to improve performance, especially in the video and image pages. Still there are a few broader topics related to performance that we should talk about.

- {css-good-practices.html, "CSS Good practices to optimize file size and specificity"}
- {css-methodologies.html, "CSS methodologies through history"}

## About JavaScript

JavaScript and its most famous frameworks React, Vue and Angular are everywhere in web development. Their use created an increasing complexity and normalized technical stacks, often for no good reason. Understanding what it implies to developers, as well as making informed choices about JavaScript is now primordial.

- {the-soft-power-of-javascript.html, "The soft power of JavaScript"}
- {list-of-javascript-frameworks.html, "List of JavaScript frameworks"}

## Page updates

? `03/11/2020` : Added a SVG subsection in the image page
? `24/08/2020` : Added a section about reader modes in the accessibility section.
? `22/08/2020` : In the interactive elements page I wrote that `<details>` and `<summary>` could not be animated. I was wrong.

====

NAME: What is accessibility
HOST: HTML tips
BREF: A primer on accessibility for the web
PRIV: false
BODY:

# What is accessibility ?

I will often refer to _accessibility_ in these pages, which globally means having a website that people with disabilities can use. Disabilities come in a lot of ways. The most obvious one is blindness, who requires the use of a screen reader. But there's a lot of handicaps that can give your a hard time on the internet.

You might be deaf, which means you need a transcribed version of an audio or video file. You might have dyslexia, which means you have a hard time reading text and need special fonts (and surprisingly _Comic Sans MS_ is one of them). You might have anxiety and panic disorders, which means you can't go to some websites who are too cluttered or trigger too many animations. You might have a cognitive impairment, which means you have a hard time understanding some websites. There are a lot of others handicaps that might make the web hard to use.

Coding properly for accessibility (basically, respecting standards) doesn't mean your website is accessible by magic. It means other tools can take over by using the code you wrote. Screen readers are the obvious ones, but others like reader mode in your browser of choice is also one of them as it allows to change colors, fonts, etc...

## Is accessibility all about code?

No, not at all.

All accessibility problems cannot be solved only by code. Some are only fixable by enforcing an inclusive interface and user experience design. You might have heard that enforcing accessibility leads to design constraints, which is true. But from experience it's entirely possible to have a nice design and user experience while being accessible. People saying it's not possible are lazy liars. Also you might have heard that enforcing accessibility is bad for SEO. It's also a lie as both can work together, you just have to want it.

Respecting accessibility in UI and UX design often leads to better designs and user experiences for all users. So when I say that something _is good for accessibility_ it often means it's _good for all your users_, and following these advises will result in a better website of everyone.

## Accessibility is hard

To enforce accessibility you need to get yourself into the shoes of your disabled users. Is this usable by screen readers? Is it understandable by people with cognitive impairments? Questioning everything you do is a good way of doing it, but on the long run it leads to the realization that basically nothing is perfect despite your efforts.

And that's the hard pill to swallow: you probably can't make accessibility perfect by yourself (especially on big projects) without funding, manpower and a lot of testing. It's a huge task and you should aim for _usable_ instead of _perfection_ or you'll never see it end. Try to detect what is important for your user in each page or situation and make sure it works.

Ask yourself, what is the goal of the website you make? For a bank it's numbers, are the numbers accessible? For a journal it's text, are the texts accessible? For a government taxes website, it's being as clear as possible about legal stuff. 

What is the main think you can't mess around with? Make it your top accessibility priority, everywhere, and fix it. Once it's done, then you'll come back to fix those small problems, like typos or unimportant texts not being clear enough. 

Choose the right battle and fight it until the end!

Next: {accessibility-rules-and-tools.html, "Basic rules about accessibility and tools to enforce them"}


====

NAME: Accessibility rules and tools
HOST: HTML tips
BREF: A collection of accessibility tips to build simple yet inclusive websites
PRIV: false
BODY:

# Accessibility basic rules and tools

Accessibility is a vast, very hard to navigate maze that even people like me who worked on it almost two years can't properly handle correctly. So I don't expect myself to be able to explain everything, and I don't expect you to think about everything. 

In this page I will simply list the essential rules I had to enforce myself and that will help you get started. Later, you can dig a bit more by yourself to fix your own specific problems.

## How screen readers users use them?

Most people don't know it, but *screen readers users don't only use the tab key to navigate in pages*!

What does that means? That means don't panic when you start tabbing everywhere and see the focus not stopping where you want! When I first started I thought accessibility was all about adding the `tab-index="0"` HTML attribute to almost every element because otherwise, the tab key would not stop on it. But that's not how that works!

Screen readers users will use a combination of arrows to read phrases or letters, shortcuts to access titles and other parts of the website, as well as the tab key, but only to get out of input element in forms or access links and buttons! Like any other users with experience using a tool, they probably use it in a way that is totally foreign to you!

That's why it's important to have your website tested by actually disabled people. Don't assume how disabled people use the web, ask them to guide you if you can. You will probably be surprised at how fast screen readers users can navigate a page.

## The basic rules

Here are some basic but essential rules to help you get started:

- Don't block the ability to zoom in or zoom out on your website.
- Don't go below 13 pixels in font size. Yes users can zoom, but that would be way more comfortable if they didn't have to do it in the first place!
- The basic 16px font size that all browsers have is often a good thing to follow.
- Don't use super thin fonts. They are pretty but very hard to read!
- Don't overdo it with animations, flashes and stuff that can trigger stress.
- If your website is not compatible with reader mode, try providing an accessibility menu allowing the change of colors and fonts.
- Take care about color contrasts, you need a ratio of 4.5:1 to be sure most people can read your texts.
- Don't indicate states on your website or application by only using colors (like green and red) as colorblind people can't distinguish them (that's the reason traffic lights don't do it!)
- Try not using icons alone, especially when for ultra specific things that don't make sense on their own. Add text to indicate what it is.
- Don't put crucial information inside images, even if you add an `alt` attribute!
- Ensure keyboard focus is visible and clear. Most of the time, it means not disabling the `focus` styles in CSS.
- Provide a _Skip to Content_ link at the top of your website.
- If you have audio content, provide a transcript.
- If you have video content, provide subtitles.

## How to hide text destined to screen readers users

You can use this CSS class:

```
.visually-hidden {
  clip: rect(0 0 0 0);
  clip-path: inset(50%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}
```

But don't overdo it, it must be the exception, not the rule. Some screen readers users can actually see but prefer a combination of voice and text. If you start hiding walls of text the user can't see, you're gonna create a very unpleasant experience.

## How to hide things from screen readers

Use the `aria-hidden="true"` attribute on the HTML element of your choice. Again, the exception, not the rule. Use it if something can't be vocalize, but provide a textual explanation of it right after.

## What is a skip content link?

Screen readers users have shortcuts to access the different parts of your website, but that doesn't mean you can't give them your own shortcuts. Escape or skip links are an invisible menu of anchor links to different parts of your page, that you can add right after the `<body>`.

It's not technically complicated to implement and can save your screen readers users tons of time, especially if you have big and complex header or navigation before the main content.

## What tools can I use?

One of the most used combinations of screen readers and browser are {https://www.nvaccess.org/download/, "NVDA"} and {https://firefox.com, "Firefox"}. But you can also use the {https://chrome.google.com/webstore/detail/chromevox-classic-extensi/kgejglhpjiefppelpmljglcjbhoiplfn, "Chromevox"} extension for Chrome to get an in-browser screen reader. Most operating systems also provide voice over and from what I heard, the one on iOS is particularly good.

In Firefox Dev Tools, the "Accessibility" tab will show you a textual representation of your website nodes that can help you detect what will be vocalized and won't. There is a lot of browser extensions for accessibility that will scan the current page and tell you what is violation the rules. 

I've used the {https://www.deque.com/axe/, "Axe extension"} in the past and enjoyed it, but there's a lot more.

## How does the reader mode works?

All modern browsers provide a reader mode that strips most of the design to keep only text and images. They also allow changing fonts, background colors, text to speech and other features.

The problem is... it's not clear how and why some pages allow the reader mode to exist and others don't. According to this {http://zumguy.com/enabling-reading-mode-on-your-website/, "article"} analyzing a {https://github.com/mozilla/readability/, "standalone version"} of Firefox reader mode, an algorithm analyzes the content inside `<p>` elements, checks how _content-y_ they are and assigns them a score. Commas, length of phrases and other parameters are taken into account to score the page and decide if yes or no, it deserves reader mode.

It means that small pages are not going to offer reader mode, which is a shame. But you probably can't do anything about it outside reorganizing content.

Next: {the-basics-of-html.html, "The basics: head, div and span"}

====

NAME: The basics of HTML
HOST: HTML tips
BREF: The basics of what is needed when starting a website in HTML
PRIV: false
BODY:

# The basics of HTML

This section will give your some basic knowledge and tips about HTML, mostly what semantic tag to use in what situation. 

## What you need to get started

You need this:

```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    
</body>
</html>
```

You need to indicate that the document is HTML, the language of the document and of course its encoding. You also need a title as it will be visible in the tab and spoken by screen readers when the page is loaded.

The `<meta name="viewport>"` is especially important. It can be used to block the zoom or zoom out of the page. But don't do it, please *never block the user from zooming in or zooming out on a website*. This is the basic accessibility thing, don't deactivate it!

Of course there's a lot more that can go into the `<head>` of a website. Styles, scripts, meta-descriptions, open graph tags... The head has its own life in itself that you can explore, but it's not the purpose of this guide to give you an extended lesson about it so we'll skip it and start adding things inside the `<body>`.

## Divs and spans

HTML is all about putting...things! Inside... other things? So your first reflex is probably to grab a `<div>` or a `<span>`, the good old ones! But what's the difference between them?

If you put several `<div>` one after the other, you'll see they stack one above the other. That's because a `<div>` has the `display:block;` CSS property by default. `display:block` makes the element start on a new line and take 100% of its container width.

If you do the same with `<span>`, they will stack one after the other. That's because a `<span>` has the `display:inline;` CSS property by default, which tells the element to start on the same line as the previous element and that its width and heigh are decided by content.

So just by knowing that, you already know how to stack things vertically and horizontally. Great right?

## Wait wait wait... There's CSS in my HTML?

Yes! And for a good reason! Imagine your CSS file disappears and your are left only with your HTML page. Without some pre-made styling, everything would have the same font size, would be inline... That would be unreadable!

That's the reason why browsers implement their own styling when encountering an HTML element. It's a great feature but unfortunately, some people really hate it. When you want to style the HTML elements with your own design, you sometimes have to undo some of the basic styling of the browser.

And yes, some of them are verbose to undo, like buttons. That's the reason some people use what is called "resets" CSS files, to undo the default styling and ease the CSS work. 

But please be careful when resetting styles. When you undo the browser styling, you also undo accessibility styles. If you ever used the tab key to navigate inside a website, you saw that the focused element is distinguished from the rest with borders or outlines. Going too hard on un-style can break those things and left you with... nothing. You are lost.

Speaking of being lost, `<div>` and `<span>` can sometimes get your users in trouble, unlike the amazing _semantic HTML_ elements.

Next: {what-is-semantic-html.html, "What is semantic HTML?"}

====

NAME: What is semantic HTML
HOST: HTML tips
BREF: An explanation of semantic HTML and why it's important
PRIV: false
BODY:


# What is semantic HTML?

When you use `int` or `string` in a programming language, you know exactly what each of them is doing and it helps in code readability right? Well HTML is the same, it has things with names that help knowing what they do. The problem  is, unlike a typed language, HTML is cool with you doing mistakes and won't throw an error if you don't use the right tool for the job. So in the end you can do mistakes and still have a visually working website who is awful under the hood.

But visually impaired users use a lot of shortcuts with their screen readers to simply jump to different parts of the page, and those shortcuts only work if HTML is semantically valid! So having good HTML and following a solid structure helps them, but also other users. For example, to use the reader mode in several browsers, your HTML has to be semantically valid, or the reader mode won't be available.

There is a lot, _a LOT_ of semantic HTML elements and even I who loves HTML doesn't know them all, so I will only cover the most useful. 

## Content sectioning

These semantic elements have the same style properties as a `<div>` (they stack on top of each others) and won't change anything related to your design, so feel free to use them without stressing. You can even add them to an existing design without trouble!

You at least need those:

? `<header>` : Put the content from the top portion of your website that your user will read the first time they visit but will skip afterwards, inside this.
? `<nav>` : Put your navigation elements inside this. You can have several `<nav>` but you then need to use the `aria-label` attribute to name them for screen readers users.
? `<main>`: Put the main parts of your website inside this one. Very useful as it indicates to screen readers users they reached the main part of the page.
? `<article>` : Put the main content of your website inside this one. It must be content that is self-sustainable. Imagine if you had to remove everything but one thing, and put it inside this tag.
? `<aside>` : put the content indirectly related to the article content inside this one. It can be a sidebar or a side note for example.
? `<footer>` : Put the content from the bottom portion of your website that your user will read the first time they visit but will skip afterwards, inside this.

A basic page might look like this for example:

```
<body>
    <header></header>
    <nav></nav>
    <main>
        <article></article>
        <aside></aside>
    </main>
    <footer></footer>
</body>
```

I did not mention the `section` element but it can be quite useful if you need to split your content in different sections that are directly related to your content and that are of equal importance. For example a blog post should have its main content and comments inside `<article>`, but comments should be inside a `section` to make it clearer for screen readers users that the blog post has ended.

```
<main>
    <article>
        Text
        <section aria-label="Comments"></section>
    </article>
</main>
```

You can find the other content semantic element on this {https://developer.mozilla.org/en-US/docs/Web/HTML/Element, "page"}.


## Stop right there, what is this `aria` thing in the previous example?

You'll often see `aria` attributes inside the HTML code presented in this page. As stated by the MDN docs on this {https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA, "page"}, _Accessible Rich Internet Applications (ARIA) is a set of attributes that define ways to make web content and web applications (especially those developed with JavaScript) more accessible to people with disabilities._

Aria is a massive spec to learn and apply so I will just give you some basic ones in this page. Try to follow them as much as you can to give a better readability to your website layouts.

Next: {never-use-tables-for-layout.html, "Don't use tables for layout"}

====

NAME: Never use tables for layout
HOST: HTML tips
BREF: An explanation about why using tables for layout is a bad practice
PRIV: false
BODY:

# Never use tables for layout

I'm gonna say it again. *Never use tables for layout*. I'm dead serious. Never do it.

If you come from the pre-HTML 5 era, you probably used to organize the elements of your page with tables because it was the norm. But using tables for something else that presenting data is a catastrophic thing for accessibility. When a screen reader meets a table, the screen readers tells him he's entering a table, so the user thinks he's going to hear about data organized in row and columns.

Also using tables makes your HTML super verbose, hard to read and hard to debug. They are way simpler solutions to do what most people try to do with tables.

Next: {the-display-property.html, "The display property"}

====

NAME: The display property
HOST: HTML tips
BREF: What is the display property in CSS and how it affects HTML
PRIV: false
BODY:

# The `display` property

Here's a primer to help you get started width `display: ???`, the basic tool for doing layouts in HTML and CSS. As always there's a ton of values that can be used, but we'll just focus on the most common/useful ones.

## The good old ones

First the good old ones that you apply directly on each element.

? `inline` : Elements are stacked one after the other on the same line until there's no space so a new line is created.
? `block` : Elements are stacks on top of each other.
? `inline-block` : The best of both worlds as it acts like an inline element but its height and width can be changed!

Those values are still in use today but are way less common in modern layout than they used to. Before `flexbox` and `grid`, developers used a lot of `inline-block` layouts to make responsive design work and content flow nicely. It was sometimes very complicated and the reason why things like grid frameworks were very popular.

Today there is absolutely no reason to not use `flexbox` and `grid`. They can even be used on Internet Explorer 11 if written correctly and compiled with a tool like {https://github.com/postcss/autoprefixer, "Autoprefixer", Go to Autoprefixer github page}. 

Next: {flexbox-the-goat.html, "Flexbox, the goat"}

====

NAME: Flexbox the goat
HOST: HTML tips
BREF: A primer on flexbox and why it's awesome and simple for HTML layout
PRIV: false
BODY:

# Flexbox, the GOAT

A few years ago the massive adoption of flexbox was like a wet dream coming true. Imagine: you take the inline-block property where things stack right after each other, but you can decide the direction of this stacking both on the `x` and `y` axis ; and also how the elements behave between themselves!

The main difference comes from the declaration. Instead of declaring `display:flex;` on each element, you only declare it on the parent and it acts on the children.

```
<div style="display:flex;">
    <div>1</div>
    <div>2</div>
</div>
```

So how does that work? 

## Decide the direction

First, you decide if the flow goes horizontally or vertically, and in which direction. For this, you can use the great `flex-flow: ???;` shortcut property. Its most common options are:

? `row` : the children will be displayed from left to right
? `row-reverse` : the children will be displayed from right to left
? `column` : the children will be displayed from top to bottom
? `column-reverse` : the children will be displayed from bottom to top

You can also decide if the child elements should wrap aka create a new line when they lack to be on a single line, by adding `wrap` or `nowrap`.

Real code examples:

<span class="visually-hidden">Hello screen reader users! Several code examples of layouts are demonstrated in this page. There is no real content inside these examples that would help you understand them. So instead, for each code example, I decided tell you the code example is hidden, but you can inspect it with developer tools if you are a one. Sorry for the lack of a better solution.</span>

`flex-flow: row wrap;`
<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:row wrap;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>

`flex-flow: row-reverse wrap;`
<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:row-reverse wrap;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>


`flex-flow: column wrap;`
<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:column wrap;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>

`column-reverse wrap`
<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:column-reverse wrap;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>

Neat right?

## Align your children on the X axis!

Alignment is cool but what if you could decided the distance between those aligned children or even better, let the browser handle it for you? 

Let's reuse this example of a row going from left to right:

```
<div style="display:flex; flex-flow:row wrap;">
    <div>1</div>
    <div>2</div>
</div>
```

We're going to use `justify-content: ???;` to fine tune the way child elements behave between each others on the horizontal axis:

? `flex-start` : The default value, stack everything at the start of te flow.
? `flex-end` : Stack everything at the end of the flow.
? `center` : Stack all elements at the center with equal white space on the left and right.
? `space-between` : Space elements as far as possible from each others.
? `space-around` : Automatically gives each child element the same left and right margins.
? `space-evenly` : Creates equal white space between all elements.

Real code examples:

`justify-content: flex-start;`
<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:row wrap; justify-content: flex-start;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>

`justify-content: flex-end;`
<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:row wrap; justify-content: flex-end;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>

`justify-content: center;`
<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:row wrap; justify-content: center;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>

`justify-content: space-between;`
<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:row wrap; justify-content: space-between;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>

`justify-content: space-around;`
<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:row wrap; justify-content: space-around;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>

`justify-content: space-evenly;`
<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:row wrap; justify-content: space-evenly;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>


## Align your children on the Y axis!

Now the cool thing is... The `align-items: ???;` CSS property takes the same values as `justify-content`, but for the vertical axis! Which means we have a way to align on the `x` and `y` axis in two lines of code!

It allows us to create the holy grail of alignment: center both vertically and horizontally in two lines of CSS! 

`justify-content: center; align-items: center;`
<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example" aria-hidden="true" style="display:flex; flex-flow:row wrap; justify-content: center; align-items: center;">
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children pattern-dots">
        <div class="code-example-value">2</div>
    </div>
</div>

Praise flexbox! <span aria-label="Happy smiley praising with hands up!">(/≧▽≦)/</span>

There's a lot more you can do with Flexbox. You can align items individually, reorder items, decide if they are allowed to shrink or grow in size. If you want to learn more about Flex, try the in-game browser {https://flexboxfroggy.com, "Flexbox Froggy"}. If you are not into games try this free course on {https://www.youtube.com/watch?v=Vj7NZ6FiQvo&list=PLu8EoSxDXHP7xj_y6NIAhy0wuCd4uVdid&index=1, "youtube"}.

You might be thinking _Yeah this is cool, but not as cool as my good old tables_. Well rejoice dear reader as I'm going to make you happy.

Next: {css-grid-the-almighty.html, "CSS Grid the almighty"}

====

NAME: CSS Grid the almighty
HOST: HTML tips
BREF: a primer on grid and how it can replace CSS grid frameworks
PRIV: false
BODY:


# CSS Grid the almighty

CSS Grid is a relatively new spec that saw massive adoption from browser around the start of 2018 and is now used almost everywhere. So what it is about?

Basically, it's about making virtual grids with columns and rows. You might have met 12 column grids in CSS frameworks like Bootstrap before? That's what Grid allows you to replicate in a few lines of code, except it's way more powerful and easy to use.

Even more than Flexbox, it's a _massive_ spec with tons of use cases and syntax tricks. It's extremely powerful but it's also easy to get lost in it, so we'll just try a few layouts and use cases to get you started with columns and rows.

## So you like columns?

For this example we'll go with just 6 vertical columns. How would that work?

First we have to use `display: grid;` on the parent element, just like we did with flexbox. Then we can declare our grid with the `grid-template-columns: ???;` property.

<span class="visually-hidden">Hello screen reader users! Several code examples of layouts are demonstrated in this page. There is no real content inside these examples that would help you understand them. So instead, for each code example, I decided tell you the code example is hidden, but you can inspect it with developer tools if you are a one. Sorry for the lack of a better solution.</span>

`grid-template-columns: repeat(6, 1fr);`
<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example" aria-hidden="true" style="display:grid; grid-template-columns: repeat(6, 1fr)">
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">2</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">3</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">4</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">5</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">6</div>
    </div>
</div>

So let's break it down, what's going on here? The `repeat()` shortcut is a function we use to declare the number of columns we wanted instead of writing `1fr 1fr 1fr 1fr 1fr 1fr`. 

The `fr` is a CSS unit, like pixels or percentages, that means `fractional unit`. In this example, `1fr` repeated six times means _split the space in six and give each children the same space_.

So what happens if we decide that the first column should take 2 times the space of other columns? The grid readjust itself nicely:

`grid-template-columns: 2fr repeat(5, 1fr);`
<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example" aria-hidden="true" style="display:grid; grid-template-columns: 2fr repeat(5, 1fr)">
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">2</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">3</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">4</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">5</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">6</div>
    </div>
</div>

But wait, what happens if there is not enough children? The grid keeps it's 6 column layouts and populate the 5 elements inside the 5 first columns:

`grid-template-columns: repeat(6, 1fr);`
<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example" aria-hidden="true" style="display:grid; grid-template-columns: repeat(6, 1fr)">
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">2</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">3</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">4</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">5</div>
    </div>
</div>


If too many children, the grid will create a new row:

`grid-template-columns: repeat(6, 1fr);`
<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example" aria-hidden="true" style="display:grid; grid-template-columns: repeat(6, 1fr)">
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">2</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">3</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">4</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">5</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">6</div>
    </div>
      <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">7</div>
    </div>
</div>

In Grid tutorials you will often hear about the "explicit" and "implicit" columns and rows. The explicit is the one you declared with your code. The implicit is the one created by the browser when there's no written rules to handle specific use cases or bugs. You can declare rules for both implicit and explicit grids even if I won't go into details on this.

Of course we could have a grid where columns have a fixed size in pixels. Doing so would ensure the columns keep a reasonable size even on mobile, but it would make the whole thing un-responsive!

`grid-template-columns: repeat(6, 140px);`
<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example" aria-hidden="true" style="overflow:scroll-x;display:grid; grid-template-columns: repeat(6, 140px)">
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">2</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">3</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">4</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">5</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">6</div>
    </div>
</div>

At this point, you're probably thinking that a media query is needed to make the grid go from `fr` units to `px` units when the viewport is smaller. What a chore right ?...

Well dear reader I have something incredible for you...

<div style="display:flex; align-items:center; justify-content:space-evenly; margin:50px; text-align:center;"><span aria-label="Smiley throwing sparkles" style="white-space:nowrap;">(ﾉ◕ヮ◕)ﾉ*:･ﾟ✧</span><strong>THE INCREDIBLE <br> MEGA AWESOME <br> NO MEDIA QUERIES <br> RESPONSIVE GRID</strong><span aria-label="Smiley being super chill" style="white-space:nowrap;">〜(￣▽￣〜)</span></div>

`grid-template-columns: repeat(auto-fit, minmax(70px, 1fr));`
<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example" aria-hidden="true" style="display:grid; grid-template-columns:repeat(auto-fit, minmax(70px, 1fr)">
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">2</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">3</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">4</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">5</div>
    </div>
    <div class="code-example-children-grid pattern-dots">
        <div class="code-example-value">6</div>
    </div>
</div>

Try resizing it! Great right?! So what's happening here? 

- First, we removed the fixed number of columns in the `repeat` to let the child elements decide how much columns the grid should have. Frightening? Don't worry.
- Then, we added the `auto-fit` property to let child elements grow in size (it can be replaced with `auto-fill` if you don't want your columns to grow).
- Finally, we added the `minmax` function that let us define what the minimum and maximum size the column should have. We set a pixel width at the minimum to forbid the columns to shrink too much, and a fractional unit as the maximum to allow them to take as much space as they want.

What it means is this: the grid will try to stack as many children as possible inside the available width until the minimum size is met. In this case, a new row will be created.

## Ok but how do I position stuff?

In CSS frameworks like Bootstrap, you have utility classes to say _start here and span this much columns_ and you can do exactly the same with CSS Grid, using the `grid-column: ? / ?;` shortcut property on the column of your choice. 

There's actually two syntax you can use:

? `? / ?` : Where the first `?` is the starting column and the second `?` is the ending column.
? `? / span ?` : Where the first `?` is the starting column and the `span ?` is the width of the column in `fr` unit.


Let's try different things with our grid:

```
grid-column: 1 / 3;
grid-column: 5 / span 2;
grid-column: 2 / span 4;
grid-column: 2 / span 1;
grid-column: 5 / span 1;
grid-column: 1 / 7;
```

Results in:

<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example" aria-hidden="true" style="display:grid; grid-template-columns:repeat(auto-fit, minmax(70px, 1fr)">
    <div class="code-example-children-grid pattern-dots" style="grid-column: 1 /3">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-column: 5 /span 2">
        <div class="code-example-value">2</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-column: 2 /span 4">
        <div class="code-example-value">3</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-column: 2 /span 1">
        <div class="code-example-value">4</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-column: 5 /span 1">
        <div class="code-example-value">5</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-column: 1 /7">
        <div class="code-example-value">6</div>
    </div>
</div>

## Ok, what about the rows?

It's basically the same as the columns, except it's for the rows. Use the `grid-template-rows` to declare the number of rows you need. And of course, you can decide where to place each children using `grid-row`, the equivalent for rows of `grid-columns`. It's super useful for art directed pages as you can place everything where you want.

<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example" aria-hidden="true" style="display:grid; grid-template-rows: repeat(4, 1fr); grid-template-columns: repeat(6, 1fr);">
    <div class="code-example-children-grid pattern-dots" style="grid-row: 2 / span 1;">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-row: 4 / span 1;">
        <div class="code-example-value">2</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-row: 3 / span 1; grid-column: 6 / span 1;">
        <div class="code-example-value">3</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-row: 2 / span 2; grid-column: 3 / span 2;">
        <div class="code-example-value">4</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-row: 1 / span 4; grid-column: 5 / span 1;">
        <div class="code-example-value">5</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-row: 1 / span 1; grid-column: 2 / span 1;">
        <div class="code-example-value">6</div>
    </div>
</div>

## All this is quite complicated, is there a simpler way?

It can become messy to work this way, so one final tip for you: the best way to make complex layouts from row and grids is to use `grid-template-area: ??;` and `grid-area: ??;`, a very funky yet super useful combination of CSS grid.

With this syntax, you _draw_ your layout inside a string in CSS, declaring names for each of your child elements. Let's say we have 5 elements that we want to shape like a star. The result would look like this:

```
grid-template-areas: 
"lefttop . righttop"
". center . "
"leftbottom . rightbottom";
```

By doing this, we created a 3 by 3 grid. The `.` character inside the declaration means an element exists but has no name and thus, should be given empty space. Now all we have to do is report those names to our children and _ voila_:

<span class="visually-hidden">Hidden code demo below.</span>
<div class="code-example code-example-grid-star" aria-hidden="true">
    <div class="code-example-children-grid pattern-dots" style="grid-area: lefttop;">
        <div class="code-example-value">1</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-area: righttop;">
        <div class="code-example-value">2</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-area: center;">
        <div class="code-example-value">3</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-area: leftbottom;">
        <div class="code-example-value">4</div>
    </div>
    <div class="code-example-children-grid pattern-dots" style="grid-area: rightbottom;">
        <div class="code-example-value">5</div>
    </div>
</div>

This syntax is very useful for more visual minded people and can lead to great art directed pages. The Smashing Magazine website has a very nice article on the subject on this {https://www.smashingmagazine.com/2018/04/art-directing-web-css-grid/, "page"}.

## I want MOAR!

If you want to train your CSS grid skills, try playing the amazing Grid Garden game on this {http://cssgridgarden.com/, "page"}. If you want more examples but in a sort of short video format, visit this {https://www.youtube.com/watch?v=DCZdCKjnBCs, "page"}. For a complete free video course on CSS Grid, I recommend {https://www.youtube.com/playlist?list=PLu8EoSxDXHP5CIFvt9-ze3IngcdAc2xKG, "this one"}.

*And that's it for modern layout in HTML and CSS!* 

Congratulations for reading thus far, that was a lot to take! Now let's talk about the content of your pages and about the elements you're going to use to format it!

Next: {order-your-titles-correctly.html, "Order your titles correctly"}

====

NAME: Order your titles correctly
HOST: HTML tips
BREF: How to handle titles in HTML so they are logically ordered and accessible
PRIV: false
BODY:


# Order your titles correctly

This one is simple, use `<h1>`, `<h2>`, `h3`, etc... Your page should at least have an `<h1>` and should not jump from `<h1>` to `<h3>` without an `<h2>`. If you want a smaller title, use CSS but don't ruin the semantic for styling purposes! The same applies when, for example, you have a smaller title before the main title. If this happens, change the smaller title to a simple text.

The reason why it is important is because screen readers users have shortcuts that allows them to jump directly to your titles and count on you to organize them logically. In long pages it can rapidly become hard to link to certain parts of your page.  Adding an id and a hidden link to your titles can help your users share specific parts of your page. With this technique, the user can click the title to add the id to the url.

This website actually uses this system. You can find the JavaScript function for this {https://github.com/Thomasorus/Kaku/blob/master/src/module.js, "in the github repo of my parser"} {/kaku.html, "Kaku", Go to Kaku page}.

Next: {organize-your-text-content.html, "Organize your text content"}

====

NAME: Make your links clear and accessible
HOST: HTML tips
BREF: A collection of HTML basic tips to build simple yet modern websites
PRIV: false
BODY:

# Make your links clear and accessible

Links are pretty straightforward, you put an `<a>` with an `href` attribute and you're good right? Yes, but often links lack readability due to poor phrasing. Try not using texts like _more_ or _click here_ outside of clear phrases, as they do not convey what's going to happen when you click. Try to have a different texts for each link. 

If you can't use a more contextualized text, then add the `title` attribute in the link with more context inside, and it will provide a tool-tip when the user hover on the link. You will also have to add an `aria-label` attribute with the same contextualized text for screen readers. 

Inside those attributes, don't use the work "link". It's not explicit, it doesn't convey meaning. Also because screen readers already say _link_, your screen readers visitors will hear _Link, Link_.

Last but not least: if you use `target="blank"` to open to a new tab, you have to vocalize it using the same `aria-label` attribute. Just add `(open in a new tab)` at the end of your text so screen readers users know that the previous page is still open.

So the end result might look like this:

```
<a href="/home.html" title="Go to the home page" aria-label="Go to the home page (open in a new tab)" target="blank">here</a>
```

Knowing all this, it's often less work and trouble to just rephrase the link!

Next: {when-to-use-a-button-and-a-link.html, "When to use a button and a link"}


====

NAME: Organize your text content
HOST: HTML tips
BREF: The useful HTML elements when dealing with text
PRIV: false
BODY:


# Organize your text content

Remember when I talked about the box-content semantic elements, the `<nav>`, `<main>` and others? Well there's a _lot_ more of them for the text. If you care enough, you can probably find a semantic HTML element for anything. Here's a few that you should use:

## Text blocks with `<p>`

If you don't know what to use for your block of text, your probably need a paragraph. Paragraphs come with a natural margin that makes them readable even without adding style. Paragraphs are good, use them!

## Quotes with `<blockhouse>`

The good old quote we often see in articles! It can actually comes with the `<cite>` element and attribute to help you sources your quotes, as well as a `<footer>` to indicate the end of the quote and its author. Take a look at the specifications on {https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote/, "this page"} to make better quotes.

## Lists with `<ul>`, `<ol>`, `<dl>`

If you enumerate something (text, links, etc...) you probably should add them in a list. Lists are useful for screen readers users as they are announced as a list with the total number of elements inside. Then when reading each entry, the screen reader voices its position.

`<ul>` with `<li>` inside creates an unordered list with bullets:

- Element A
- Element C
- Element Z

`<ol>` with `<li>` will create an ordered list with numbers for each element:

+ Element 1
+ Element 2
+ Element 3

`<dl>` is not very popular but is super useful as it's a definition list. Most people still use two columns tables for definitions, but this is way better for screen readers users. 

? Term 1 : Definition 1
? Term 2 : Definition 2
? Term 3 : definition 3

Of course all those lists come with their basic design, but please note that you can change them very easily. You can make your lists go in a single line, change their separation, or even use a custom image instead of dots! Just be careful to not put informative content as a decoration, as it will not be vocalized. Also when reading the source code of a page, HTML lists are very easy to understand.

## Pre-formatted text with `<pre>`

If you have to present some code, it's probably good to wrap it inside a `<pre>` tag to preserve its formatting. Please note that you should also use the inline semantic `<code>` element (we'll talk about it later in these pages).

## Make breaks with `<hr>`

The `<hr>` element is to indicate a break inside your content: a kind of pause, a change of subject. You could think that the old `<hr>` element is useless when we can style these breaks with CSS, but they indicate to screen readers users that they can take a break too! 

Next: {all-about-images.html, "All about images"}

====

NAME: All about images
HOST: HTML tips
BREF: How to make images optimized, responsive and easy on bandwidth
PRIV: false
BODY:

# All about images

Just as links, images can feel pretty straightforward. Put an `<img>` tag, an `src` and an `alt` attributes and you're good right?!

Well yeah but... what if we could do much more, like loading the right image size depending on viewport, let the browser decide between image formats or even only load images when they are in the viewport?

## Load the right image size and density

The `<img>` element has an `srcset` attribute that allows you to add several links to several versions of your image. You can do two things with `srcset`:

+ Ask the browser to change the image depending of the width of the viewport.
+ Ask the browser to change the image depending of the pixel density of the display.

In the example below, I have 4 versions of the same image that I want the browser to use when the viewport is less than 300, 600, 900 and 1200 pixels in width:

```
<img 
src="img-1200.jpg" 
srcset="img-300.jpg 300w, img-600.jpg 600w, img-900.jpg 900w, img-1200.jpg 1200w" 
/>
```

And for pixel density for 1k, 2k or 4k screens:

```
<img 
src="img-1k.jpg" 
srcset="img-1k.jpg 1x, img-2k.jpg 2x, img-4k.jpg x4" 
alt="this is an image"
/>
```

But you can also combine them, for example for a favicon:

```
<img 
src="icon32px.png"
"icon32px.png 32w, icon64px.png 64w, icon-retina.png 2x icon-ultra.png 3x icon.svg"
alt="this is an image"
/>
```

This way you are sure you only load the right size or density for your readers.

## Load the right image format

You maybe saw it before and wondered what was the `<picture>` element good for? Well it's quite simple, it's used to contain several `<source>` elements and an `<img>` element. 

The `<source>` elements are used to give alternate versions of the same image. The most obvious use-case is to load several formats to allow to browser to pick the lighter if it supports it.

Let's take an example with a `jpg` and a `webp`. 

```
<picture>
    <source srcset="img1.webp" type="image/webp">
    <img src="img1.jpg" alt="this is an image" />
</picture>
```

If the browser supports the webp format, it will automatically use the webp file instead of the jpg. Please note that if the browser does not support the `<picture>` element the `<img>` one will still work, so there is no good reason to not use them.

## Lazy loading images

Lazy loading has become native in most browsers and is quite simple to use: `loading:"lazy"` on your `<img>` element and you are good to go. They are several ways of doing lazy loading for older browsers who don't support this feature. All of them require to use JavaScript. If you want to support old browsers, take a look at this {https://css-tricks.com/the-complete-guide-to-lazy-loading-images/, "article"}.


## Combine all this together!

But you don't have to choose between all these features, you can combine them to have images at the right size, of the best type, only loaded when in the viewport, and all this only in HTML.

```
<picture>
    <source 
    type="image/webp" 
    srcset="img-300.webp 300w, img-600.webp 600w, img-900.webp 900w, img-1200.webp 1200w">

    <img 
    loading="lazy" 
    src="img.jpg" 
    srcset="img-300.jpg 300w, img-600.jpg 600w, img-900.jpg 900w, img-1200.jpg 1200w" alt="The happy hacking keyboard">
</picture>
            ```

Knowing that images are the most heavy thing loaded by websites, it's incredible that this syntax isn't more known and used!

## About svg files

The SVG format (for _Scalable Vector Graphics_) is using vector graphics with an XML markup language. It can therefore used in a browser as inline code to display images, which is a good thing as it reduces the number of requests made by the browser.

Here's a few tips:

- During export from programs like Illustrator, Affinity Designer or Inkscape, take care of not exporting an SVG with an image inside.
- SVG exports often come with a lot of useless information stored inside, which makes them verbose and heavy. Compress them by using an SVG compressor like {https://jakearchibald.github.io/svgomg/, "SVGO"}.
- The width and height of the SVG doesn't matter much from a file weight perspective but their design can be ugly on unreadable if too small or too big.
- Most of the time you will put the inline SVG inside a `<div>` or a `<span>` that has a fixed width and height and the SVG file will overflow. To make it fit, use a simple CSS rule like `width:100%; height:100%;`.

SVG can be informative or decorative and its purpose can change the way you handle accessibility. If you are using an SVG for informative purposes (like a graph), you should add a `<title>` to add a tooltip and/pr an `aria-label` attribute to just vocalize it.

```
<svg role="img" aria-label="Accessible Name">
  <title>Accessible Name</title>
  <!-- child elements of the inline SVG -->
</svg>
```

If the SVG is used for decorative purposes (like an icon) you can simply hide it using `aria-hidden="true"`.

```
<svg role="img" aria-hidden="true">
  <!-- child elements of the inline SVG -->
</svg>
```

Next: {all-about-video-and-audio.html, "All about video and audio"}


====

NAME: All about video and audio
HOST: HTML tips
BREF: Tips and tricks about video and audio codecs for the web and how to use the audio and video elements
PRIV: false
BODY:

# All about video and audio

The `<video>` and `<audio>` elements are super easy and convenient ways to embed multimedia content on the web without relying on a third party. But if the tags are very straightforward, the video and audio formats can be a headache.

You have a lot of formats available but most of them are not supported on every browser. To make it quick you have containers and you have codecs. Containers are the format of the file, the `.mp4` for example. Codecs are the compression algorithm used.

So which video codec should you use?


## The video codecs and containers supported on the web

If you are in a hurry and can only produce one export, go with the h264 video codec and MP3 audio codec in a `.mp4` container. It will run everywhere. If you think your Firefox users have the AAC codec installed on their machine, you can replace the MP3 codec by AAC as it has better sound quality.

If you want high quality and compression you will have to export your videos two times and do this combination:

? Apple machines : A `.mp4` container with h265 video encoding and AAC audio encoding.
? Others : A `.webm` container with AV1 video codec and probably Opus for audio encoding.

If you only want open source and cover a maximum of machines, the best combination is probably a `.webm` container with a vp8 for video encoding and mp3 for the audio (mp3 is open source since 2017). Be careful as this won't work in Safari until Safari 14.

## The audio codecs and containers supported on the web

Basically if you want to archive some audio or put in on the web so people can remix it, you'd better use a lossless audio codec and in this case, FLAC is the king, being compatible with almost everything.

If you are putting audio for streaming and want a good quality, the AAC codec in a `.mp4` container is probably a good pick, but be careful of Firefox users without the codec on their systems. For them you can use the Vorbis codec with a `.ogg` container.

If you don't care about quality and just want everything to work, go with `.mp3`.


## Wait, I can pick two?

That's the beauty of it, just like with the `<picture>` element, you can add multiple sources to your `<video>` and `<audio>` elements and let the browser choose. 

```
<audio controls>
 <source src="foo.opus" type="audio/ogg; codecs=opus"/>
 <source src="foo.ogg" type="audio/ogg; codecs=vorbis"/>
 <source src="foo.mp3" type="audio/mpeg"/>
</audio>
```


## Save bandwidth with these simple tricks!

The `preload="metadata"` attribute only loads the metadata of your files like the first frame or its length until the user plays the file. And if you want to save even more data, use `preload="none"`. In the case of a video, the preview will be totally dark but that can be mitigated by using the `poster` attribute with a link to an image.

Finally, you should know that converting animated gif to videos often result in radically smaller files, and you can trick the user in believing a gif is being played!

## The multiple configurations of the video player

The `<video>` and `<audio>` elements comes with a set of attributes that allows you to tweak how they act. The `<audio>` element is often left untouched but the `<video>` one has several attributes that allows it to act as a video player or as a fake gif!

Make a traditional video with the `control` attribute:

```
<video controls" src="path to video" type="video/mp4"></video>
```

Make a fake gif from a video using those attributes. `loop` will restart the video, `mute` will remove sound and `autoplay` will start it automatically. Be careful as `autoplay` will not respect the `preload` attribute, making the video downloaded instantly.

```
<video autoplay loop mute src="link to fake gif video" type="video/mp4"></video>
```

Finally, please note that the `playsinline` attribute prevents videos from playing full screen on mobile when launched. If that's not the behavior your want, don't forget to add it.

Next: {doing-forms-correctly.html, "Doing forms correctly"}

====

NAME: Doing forms correctly
HOST: HTML tips
BREF: A deep explanation about accessible forms and error handling in HTML
PRIV: false
BODY:

# Doing forms correctly

Forms are incredibly complicated to get right from an accessibility standpoint. I don't know all the good practices but I've seen some bad ones that I can warn you about. Please contact me if you find a mistake in this section as I really am not 100% sure about everything.

## Forms require strict HTML

With more people validating forms with JavaScript, we've seen a drop in code quality of forms. But the reality is quite simple: if you forget about some parts of the form, screen readers users will not know they are in a form to begin with!

+ A form starts and ends with the `<form>` element even if you validate it with JavaScript. Also add an `id` to it.
+ Each `<input>`, no matter its type, needs and `id` and a `<label>` with the `for` attribute pointing to it. 
+ If you have a multi-section form, regroup them with the `<fieldset>` element and add the `<legend>` element as the "title" of this fieldset.
+ End your form with a `<button>` when you can, use the `for` attribute to point on the form's id, and use an `aria-label` to give more context.

For accessibility reasons:

- Use contextualized text for your labels, be precise about what each input is about! If you can't have a clear label, same as links: add a `title` attribute to the input as well as a `aria-label`.
- Don't rely on the `placeholder` attribute for examples of what is expected! The placeholder text is often hard to read and disappears once the input becomes active, making it difficult for users with cognitive impairment.
- If you want to add an example of what is expected from the user, you can either add it directly in the label (often not very accepted by designers) or add it below the input and then refer to it with the `aria-describedby` attribute (see example below). Using this, screen readers will first read the label, then the `aria-describedby` text in one go.

Wrapping it up, here's an example that you can inspect with your browser's developer tools:

<span class="visually-hidden">This is a form demo below, not a real one, don't activate it!</span>
<form id="monsters">
  <fieldset>
    <legend>Choose your favorite monster</legend>
    <small id="error" style="color:red; display:none;">Error: you need to choose a monster.</small><br/>

    <input type="radio" id="kraken" name="monster" aria-describedby="kraken-desc">
    <label for="kraken">Kraken</label><br/>
    <small id="kraken-desc">The kraken is a kind of giant squid.</small><br/>

    <input type="radio" id="sasquatch" name="monster" aria-describedby="sasquatch-desc">
    <label for="sasquatch">Sasquatch</label><br/>
    <small id="sasquatch-desc">The Sasquatch is a kind of giant ape.</small><br/>

    <input type="radio" id="mothman" name="monster" aria-describedby="mothman-desc">
    <label for="mothman">Mothman</label><br/>
    <small id="mothman-desc">The Mothman is a kind of giant moth.</small><br/>
  </fieldset>
</form>
<button type="submit" form="monsters" value="Submit" aria-label="Validate the monsters form">Validate</button> 

That's it for the code, but more often than you think, bad forms are the result of non inclusive design practices, some of which we will see below.

## Information below forms

Ever filled a form and right under the validate button, seen a wall of text written in 10 pixels size that is actually the terms and conditions? Well that can be a problem!

Most forms end with words like _Continue_ or _Validate_ and by doing so, suggest that the page is finished. A screen reader user can't know there's something else below. 

This problem can be super tedious to explain to designers as most of them don't want a wall of text before the form, and don't ever suggest this to a marketing team! So an accessible solution is to simply use an invisible anchor link pointing to the wall of text right before the form starts.

Screen readers users are humans too, they dislike walls of text about legal stuff like anyone else! This solution allows them to either read it or even better, skip it, like we all do _right?_

## Don't put text sections inside a form!

You probably already tried to tab between inputs in a form. That's because inputs are capturing elements that *you can only escape by using the tab key*. And when you do, *the tab key will lead you to the next native focus-able element* like another input, a button or a link. 

It's important because too many designers put big explanation texts about the form between inputs. Since screen readers users can only use the tab key to get out of an input and will land on the next focus-able element, they will not have the explanation texts vocalized and have no way of access them. We saw that `aria-describedby` can be used to link to a descriptive text, but that's applying a bandage on a broken leg.

Removing texts sections inside forms might seem like a chore and, when talking about it with designers, they will probably tell you it's a going to make the whole experience bland or suffocating in the case of massive forms. 

But the reality is that *a form that needs explanation texts between inputs is a bad design right from the start*. You should give all necessary information before filling the form, otherwise users might start filling it and realize in the middle they didn't have to, or are not concerned about it. 

Your labels with the descriptions attached should be enough to make it a pleasant and understandable experience. Yes forms are not fun but we can't sacrifice usability to some _funnel_ concept marketers enjoy to create.

## Handling errors in forms is a pain

Handling errors in forms is super complicated and nobody seems to agree about how to do it correctly. It's especially hard with accessibility in mind, and not only because of screen readers. So take my advises with a grain of salt as I may be wrong on some cases and am still learning about this.

The first rule to respect is that triggering error messages should only happen either when the user tabs out of the input or when the user validates the form. Don't trigger error messages while the user is typing. Wait for him to go out of the input or it will be a vocalized nightmare or a panic inducing behavior. You might think that's counter-intuitive as screen readers users may not know that they wrote it wrong but that's actually OK if you do the following right.

When the user validates the form using the button, if an input is required and not filled or wrongly filled, move the user focus to this problematic input using the `.focus()` function in JavaScript. This way the user can promptly fill or fix it, then go back below super fast to validate the form again.

The error message should be added the same way as the instructions, with an `aria-describedby`. You can actually have two `id` as a value for `aria-describedby`, so screen readers will read the label, then the description, then the error message. Finally, a `aria-invalid="true"` needs to be added to each invalid input.

For the sake of the example, imagine we did not choose a monster below and tried validating the form. In JavaScript, we should add the `error` id to each input's `aria-describedby` so screen readers can vocalize the error message, and remove the `display:none` from the error message itself so non-screen readers users can see it too.

<span class="visually-hidden">There is a form demo below, you can inspect it using the development tools.</span>
<form id="monsters">
  <fieldset>
    <legend>Choose your favorite monster</legend>
    <small id="error" style="color:red;">Error: you need to choose a monster.</small><br/>

    <input type="radio" id="kraken" name="monster" aria-describedby="kraken-desc error" aria-invalid="true">
    <label for="kraken">Kraken</label><br/>
    <small id="kraken-desc">The kraken is a kind of giant squid.</small><br/>

    <input type="radio" id="sasquatch" name="monster" aria-describedby="sasquatch-desc error" aria-invalid="true">
    <label for="sasquatch">Sasquatch</label><br/>
    <small id="sasquatch-desc">The Sasquatch is a kind of giant ape.</small><br/>

    <input type="radio" id="mothman" name="monster" aria-describedby="mothman-desc error" aria-invalid="true">
    <label for="mothman">Mothman</label><br/>
    <small id="mothman-desc">The Mothman is a kind of giant moth.</small><br/>
  </fieldset>
</form>
<button type="submit" form="monsters" value="Submit" aria-label="Validate the monsters form">Validate</button> 


Because of all this and contrary to popular practices, *it's forbidden to disable a form button*, even if the user made errors or did not finish filling the form. If the validation button is disabled it disappears from vocalization and the user has to travel through the whole form to find which input is not good. This is less practical than sending him directly to the input when the button is clicked.

Applying this can be tricky on legacy applications that handle errors in a monolithic way. Even if you do front-end surface level error checking, the user might make a typo that can only be identified when the form is sent and the back-end discovers it by using information stored in a database. If this happens, the error handling in the back-end needs to be written in a way that returns which information is wrong, to allow the front-end to `.focus()` on the wrong input. 

If the back-end returns a vague message then the front-end can't do anything outside using `.focus()` to move the user to a standard error message, and the user has to redo the entire form and find by himself what he did wrongly. This is a super bad user experience even for non-disabled users.

The best solution is of course to do error checking on the back-end on each input with an ajax call right after the user exits it. But for various reasons going from time to cost of requests, it's not always possible.

Good luck with your forms and more than anything, *test your forms with real users, disabled or not, to find out if everything is ok*. On this particular subject, you can't trust yourself, your client, product owner, designer or common tester. You need real, fresh experience.

Next: {tables-are-not-that-complicated.html, "Tables are not that complicated"}

====

NAME: Strong b em and i
HOST: HTML tips
BREF: What's the deal with strong, b, em and i in html? Which one I pick?
PRIV: false
BODY:


# `<strong>` versus `<b>` versus `<em>` versus `<i>`

Here we are, at the doors of the great war of semantic inline elements. So who's right between `<strong>` and `<b>`? Who wins between `<em>` and `<i>`?

Well, they all win.

Everyone is a winner excepts us the developers who have to implement this. Let's try to explain this strange situation. 

Imagine a website for a touristic area with a cliff:

- The `<b>` tag is used to draw the reader's attention. So it should draw attention to the cliff: "This wonderful area has a forest but also a <b>wonderful cliff</b>".
- The `<strong>` tag is to indicate the importance and seriousness of something. So it should warn people about the cliff: "Please be careful near the cliff as *there are no ramps to prevent you from falling and the winds are strong*".
- The `<i>` tag is used to indicate that something is set off from the normal prose. For example it should be used for the foreign name of the cliff: "This cliff name is <i>mh'irr'la</i>" or the thoughts of someone thinking about the cliff: "<i>Is the cliff really in love with me or is it just a farce?</i> thought Jonathan".
- The `<em>` tag is used to stress something on the subject, almost as if you speak it aloud. So it should help denote something about the cliff: "Ah yes, the _cliff_, the one that is actually 2 meters tall".

I hope it makes sense. The sad reality is that no one writes prose in HTML, so you'll probably be stuck with whatever the <abbr title="What you see is what you get">wysiwyg</abbr> editor or markup language parser of your choice decided to use. For example this page is written using {/kaku.html, "Kaku", Go to Kaku page} who compiles to `<strong>` and `<em>` by default. 

Next: {other-kinda-useful-semantic-elements.html, "Other kinda useful semantic elements"}

====

NAME: When to use a button and a link
HOST: HTML tips
BREF: Buttons and links are used for different things, here's an explanation
PRIV: false
BODY:


# When to use a button and a link

For most document type websites the question between links and buttons doesn't really exist. But in application type websites, it's often that developers don't pick the right one or that designers make links look like buttons. 

So to make it clear:

- An `<a>` is for a page change or a new tab. When changing page, a screen reader user will be automatically moved to the top of the page and will start reading it from there.
- A `<button>` is for activating something like a modal or a form. Once pressed, even if things change in the page, it doesn't move a screen reader user somewhere else and it doesn't vocalize anything.

This difference of behavior is super important, especially in single page JavaScript web applications where urls are changed dynamically, but no page change is triggered in the browser! When such a thing happens, the developer has to manually move the focus of the screen reader user to the next point of interest inside the app and vocalize what happened and where the user is.

To do this, the developer has to use the `.focus()` function in JavaScript. I'm not 100% sure about how to vocalize the page change so I'm not gonna give any advice on this. If you know good practices please {about.html, "contact me"} so I can update this part.

One last thing: I don't care about your reasons, don't replace a `<button>` by a `<div>`.

Next: {strong-b-em-and-i.html, "The mess of strong b em and i"}

====

NAME: HTML interactive elements
HOST: HTML tips
BREF: Interactive HTML elements are like small native components that can help in some situations
PRIV: false
BODY:


# Some cool HTML interactive elements

You might not know these but they can be super useful. Their main default is that they are sometimes hard to style properly.

? `<details>` and `<summary>` : Allows you to make a kind of accordion box in pure HTML. By default closed but the `open` attribute on `<details>` can make it open.
? `<datalist>` : Can be used as an input with a list of options auto-suggested by what the user is typing.
? `<progress>` : A progress with several attributes for showing progress. It's very hard to style correctly but you can have the same accessibility by using the `role="progressbar` on a div.

<details>
  <summary>Click me for a code demo</summary>
  [media/dio.jpg, You though it was code but it was me Dio!"]
</details>

A datalist can be useful but requires a full form, which is quite a lot of code:

<label for="jojolist">Choose a Jojo character from this list:</label><br>
<input list="jojo" id="jojolist" name="muchJojo" />
<datalist id="jojo">
  <option value="Jonathan">
  <option value="Joseph">
  <option value="Jotaro">
  <option value="Josuke">
  <option value="DIO">
</datalist>


A progress bar using `<progress>` has this look:

<progress aria-valuenow="20" aria-valuemin="0" aria-valuetext="Step 2: Copying files... " aria-valuemax="100" style="display:block; width:100%;">20 %</progress>


Use the `role="progressbar" to style it more easily:

<div style="border:1px solid black">
<div role="progressbar" aria-valuenow="20" aria-valuemin="0" aria-valuemax="100" class="pattern-dots" style="width:20%; text-align:center;">20 %</div>
</div>


====

NAME: Other kinda useful semantic elements
HOST: HTML tips
BREF: The HTML elements you probably don't know but that could be useful in some situations
PRIV: false
BODY:


# Other kinda useful semantic elements

Below are elements often complicated to add if you use a CMS or a markup language like Markdown as they don't give syntactic shortcuts for most of them, so you have to write them by hand. 

Favor these semantic elements when working for very specific projects where text cannot always convey all the meaning by itself. If you have a design system, incorporating them to specific components could probably increase their usage.

? `<abbr>` : Stands for abbreviation. Can be used for currencies for example.
? `<code>` : For code, obviously, often best used with `<pre>`.
? `<time>` : For time values of course.
? `<mark>` : To highlight some parts of your text.
? `<s>` : Strikes the text to indicate it's no longer relevant. Don't confuse it with `strike` who just strikes the text for... design?
? `<del>` & `<ins>` : If you have an edit to make to a text and want to keep trace of the change `<del>` and `<ins>` are a good pick!

Next: {html-interactive-elements.html, "Some interactive elements that can be useful"}


====

NAME: Tables are not that complicated
HOST: HTML tips
BREF: How to do accessible tables (it's not that complicated)
PRIV: false
BODY:

# Tables are not that complicated

There isn't a lot about tables that is not already well known. For accessibility you might want to be careful of a few things.

The `<caption>` element should be added to all your tables as sort of title for this table. It will inform all users what the table is about: `<caption>I'm a table title!</caption>`. Use the `scope="col"` on your `<th>` columns to explain to screen readers that the element is a the start of the column and `scope="row"` for the same `<th>` elements that start rows. 

If you need to make more complicated tables accessible, try take examples in the MDN documentation on this {https://developer.mozilla.org/en-US/docs/Learn/HTML/Tables/Advanced, "page"}.

Next: {make-your-links-clear-and-accessible.html, "Make your links clear and accessible"}


====
NAME: CSS good practices
HOST: Html tips
BREF: CSS Good practices to optimize file size and specificity and not hate CSS
PRIV: false
BODY:

# CSS Good practices

In the past CSS had such limitations and was so badly understood by most developers that using frameworks or libraries was seen as the only way to get things working. {https://getbootstrap.com/, "Bootstrap"} was the king of CSS frameworks and with it came a ton of code that was most often not used at all. The only usable alternative was probably {https://get.foundation/, "Foundation"} or SASS libraries like {https://www.oddbird.net/susy/, "Susy"}.

Fortunately today we have a lot of choice! We still have Bootstrap, but also lighter alternatives like {https://bulma.io/, "Bulma"} or totally different propositions like the utility first {https://tailwindcss.com/, "Tailwind"}. Also tools like {https://purgecss.com/, "Purge CSS"} can help reduce the size of CSS bundles by removing the unused parts of CSS frameworks.

In reaction to fully equipped frameworks we've also seen class-less CSS frameworks rising in popularity for a few years and they come with the promise of a small file size that correctly styles a website with only the HTML elements. That indeed sounds like a smart idea as it forces the developer to use {what-is-semantic-html.html, "semantic HTML"}.

But if you have to extend this kind of framework with your own design and don't want to use classes, you're going to create more troublesome code that you think.

## Enters specificity

> "Specificity is the means by which browsers decide which CSS property values are the most relevant to an element and, therefore, will be applied. Specificity is based on the matching rules which are composed of different sorts of CSS selectors.", MDN, About specificity, https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity

So what are the more specific and less specific things you can meet in CSS? Here's a list from more to less specific:

+ IDs
+ Classes, attributes and pseudo classes
+ Elements and pseudo elements

Knowing this, some practices can create a lot more specificity than others. Among them, these are the worst:

- Using IDs as they are single use.
- Nesting selectors, for example `.navigation .navigation-list` doubles the specificity of the later and prevents it from working outside the former.
- Qualifying selectors, the action of sticking a class to a specific HTML element like `ul.navigation`

Specificity is why a lot of people hate CSS:

- It makes it hard to extend an existing code base if everything is super specific
- It can trigger repaints of existing elements, thus creating flashes when loading the website
- It makes the code super verbose and hard to maintain
- It creates code segments that can't be reused in another situation

So as you can see, it's not just a technical thing but a good practice methodology to take specificity seriously.

## Chain elements or use a class?

To come back to our no-class CSS topic, we find ourselves in front of a dilemma.

Let's say you want to add red to your links located in a list in the navigation of your website, using only HTML elements and no classes. It would look like this:

```
nav ul li a {
    color:red;
}
```

Since browsers read CSS from right to left, each time they meet a new element in this declaration, they have to re-compute the design. This is how the browser interprets this chain:

+ _I style links to red_
+ _Wait it's only links in lists that need red_
+ _Crap, it was only links in lists in the navigation that need red_

Unless you have a terribly big CSS file that takes a lot of time to be parsed and triggers a lot of refresh, of course you will not see this happening. But this is still happening under the hood.

Now let's compare this to a simple utility class:

```
.redcolor {
    color:red;
}

<a class="redcolor">
```

With this code, the browser only thinks _if I see a redcolor class, I add red_. And that's it, no repaint, no problem. But here's the thing: *chaining HTML elements is calculated as less specific than using a class*.

So who is right and who is wrong? The browser is right, but ultimately, the no-class CSS is worse:

- It's more verbose
- It's harder to extend the existing code and will get even more verbose when doing so
- It can't be reused in another context since it's tied to specific parents

So in the end, using class is a better idea. The no-class CSS methodology is good, but only works as a starter point for global elements.

## Tips and tricks for your CSS

So in the end what should you do if you want to maintain small CSS file size and low specificity? Here are some rules that you can apply to almost every project:

- Style HTML elements for broader usage. The moment you start chaining them means you need a class
- Never nest or qualify classes and instead, use a simple yet effective naming methodology like {http://getbem.com/introduction/, "BEM, Block Element Modifier"}
- Try to organize your CSS file with less specific elements at the top and ery specific elements at the bottom, which is often referred to the {https://www.xfive.co/blog/itcss-scalable-maintainable-css-architecture/, "Inverted Triangle"} methodology
- Using a methodology like BEM might help you think about your CSS classes as objects than can be reused and extended, a good practice called {https://www.smashingmagazine.com/2011/12/an-introduction-to-object-oriented-css-oocss/, "Object Oriented CSS"}

You can check your specificity using this {https://specificity.keegan.st/, "specificity calculator"} and check if your file has his specific code in order (from less to more) using this specificity {https://jonassebastianohlsson.com/specificity-graph/, "graph generator"}.

By doing this your code will be lighter, easier to maintain, reusable and extendable like objects, and won't trigger repaints.

====

NAME: 2019
HOST: tracking
BREF: All things I read, watched in 2019
PRIV: false
BODY:

# 2019 Overview

## Readings of 2019

All the things I read in 2019.

`...` Means the series is still ongoing but that I started it in 2019

### Novels

- The Remembrance of Earth's Past trilogy - Liu Cixin
- The unfathomable depth of loneliness - Hao Jinfang
- The Book of the New Sun Vol.1 - Gene Wolf 
- Viking Mythology - Neil Gamain

### Mangas

- Beastars...
- Vinland Saga...
- Kingdom...
- Yagate Kimi ni Naru (Bloom into You)
- Shamo
- Sun Ken Rock
- Kusuriya no Hitorigoto...
- Goblin Slayer...
- Blame! (reprint)
- Aposimz...
- No gun's life...
- At the Mountains of Madness (Lovecraft by Gou Tanabe)
- In the abyss of time (Lovecraft by Gou Tanabe)
- Shishunki Renaissance! David-kun
- Gunnm (reprint)
- Gunnm Last Order
- Gunnm: Mars Chronicles...
- Blue Giant
- Saltiness

### Comics

- Shangri La
- Mécanique Céleste

### Art books

- Gustave Doré (Catalogue d'exposition Gustave Doré - Musée d'Orsay)
- Katsuya Terrada Real Size

### Magazines

- L'étiquette 1 & 2
- Atom Magazine

### Notable articles

- {https://www.newyorker.com/magazine/2019/12/16/how-william-gibson-keeps-his-science-fiction-real, "How William Gibson Keeps His Science Fiction Real"}
- {http://paulgraham.com/genius.html, "The Bus Ticket Theory of Genius"}
- {http://www.slate.fr/story/184164/boulangeries-guerre-culturelle-pain-adieu-baguette-disparition-petit-commerce, "La France du pain est coupée en deux"}
- {https://www.nytimes.com/interactive/2019/11/16/world/asia/china-xinjiang-documents.html, "Absolutely No Mercy: Leaked Files Expose How China Organized Mass Detentions of Muslims"}
- {https://www.forbes.com/sites/johnkoetsier/2019/09/02/hong-kong-protestors-using-mesh-messaging-app-china-cant-block-usage-up-3685/, "Hong Kong Protestors Using Mesh Messaging App China Can't Block"}
- {https://matthiasott.com/articles/into-the-personal-website-verse, "Into the Personal-Website-Verse"}
- {https://www.gamekult.com/actualite/une-petite-histoire-du-jeu-de-baston-en-dix-morceaux-3050819125.html, "Une petite histoire du jeu de baston en dix morceaux"}
- {https://www.newyorker.com/magazine/2019/04/08/the-day-the-dinosaurs-died, "The Day the Dinosaurs Died"}
- {https://kotaku.com/how-biowares-anthem-went-wrong-1833731964, "How BioWare's Anthem Went Wrong"}

## Writings of 2019

All the things I wrote in 2019.

### Wrote

- {https://www.redbull.com/fr-fr/evo-2019-tournois-esport-infos, "L’EVO 2019, le plus gros tournoi esport du monde"}
- {https://www.redbull.com/fr-fr/lethal-league-blaze-esport, "Lethal League Blaze, l’autre jeu de combat qui ne dit pas son nom"}
- {https://www.redbull.com/fr-fr/samurai-shodown-esport-jeu-combat, "Samurai Showdown, l’original outsider de l’esport baston"}
- {https://twitter.com/Thomasorus/status/1144623832587821056, "Embrasser, étendre, étouffer le podcast"}
- {https://basgrospoing.fr/fr/articles/la-schizophrenie-street-fighter-iii-third-strike, "La schizophrénie Street Fighter III: Third Strike"}
- {https://www.redbull.com/fr-fr/mortal-kombat-pro-kompetition, "Premières fatalities sur Mortal Kombat XI"}
- {https://www.redbull.com/fr-fr/rza-mortal-kombat?linkId=65552039, "RZA : une main de velours dans un gant de ninja"}

### interviewed

- {https://twitter.com/Vincent_Jule/status/1144341580771409921, "Samurai Showdown: Le retour d'une franchise culte... et un nouvel âge d'or du jeu de combat?"}

### Published

- {https://basgrospoing.fr/fr/articles/theorie-ruissellement-jeu-de-combat-esport, "Trickle-Down Economics in the FGC and E-Sports"}

### Played

- Flappy Fighter
- Untitled Goose Game
- Mortal Kombat XI
- Samurai Showdown 2019
- Apex Legends
- Furi
- Thumper
- Céleste
- Hollow Knight
- The Red Strings Club
- Tekken 7
- Disco Elysium
- A Plague Tale: Innocence

### Coded

- {https://podcastouvert.fr/, "Podcast Ouvert"}
- {https://claviers-mecaniques.fr/, "Claviers mécaniques") - Frontend
- {https://happy-tereshkova-b21ae0.netlify.com/, "Art Eater"}
- {https://github.com/Thomasorus/Podcast-player, "A podcast player"}
- {https://github.com/Thomasorus/UI-concept-tests,"Some concepts for UIs"}
- {https://github.com/Thomasorus/wiki-engine, "My wiki engine"}
- A ton of interfaces at work with accessibility
- Web components with accessibility

## Watched in 2019

All the things I watched in 2019.

... Means the series is still ongoing but that I started it in 2019

### Anime

- Carole & Tuesday
- Sailor Moon S1 (original show)

### Movies

- Promare

### Documentaries

- 10 years with Hayao Miyazaki

### Series

- Mindhunter

### Tv shows

- Terrace House

### Notable videos

- How Mind Control Saved Oddworld: Abe's Odyssey
- The Real Fake Cameras Of Toy Story 4


====

NAME: Empty and Full
HOST: Stories
BREF: A story about flowers and brambles
PRIV: true
BODY:

# Empty and Full

The story of *Empty and Full* narrates how {the-first-one.html, "The First One"}, an immortal being tries to restore balance in an universe he subverted. The whole saga is divided into three major stories: Eat The World, Boxes Filling Space and a third unknown story.

Globally, *Empty and Full* is used a playground to experiment storytelling and painting, but also to question personal philosophical interrogations.

====

NAME: The First One
HOST: empty and full
BREF: The first one is the main character of Empty and Full
PRIV: true
BODY:

# The First One

The *First One* is the main protagonist of {empty-and-full.html, "Empty and Full"}.

## Eat The World

He was born onto one of the {flower-houses.html, "Flower Houses"} and as the only descendant of his family, the direct heir to inherit a Flower House. His mother died giving him birth, making his father resent him. He grew in solitude and was given a strict education that left him without space to breathe.

At the {age-of-trial.html, "Age of Trial"}, he was sent to war, like all others of his kind. As the only heir of his family, he should been given a secure position during his two cycle service. Unfortunately, his father opponents maneuvered to place him in the battlefield, hoping for its death and the possibility to inherit his family's Flower House.

During his two cycles service, The First One managed to survive all the battles he was sent to. He made a lot of companions among the Brambles Folks, broadened his horizons and developed a profound anti-war and anarchist attitude. Unfortunately, he was injured during his last battle at the end of his two cycles service. He lost his two arms and was heavily disfigured. Not capable of fighting, he was sent home where he discovered died not long ago.

Not willing to have children and incapable of handling most political and administrative tasks he inherited with the Flower House, he called his ancient war companions for help. As law forbids to inherit a Flower House when its owner is still alive, The First One organized its own as an anarchist organization and drafted a testament where he gave away everything he had to its group.

After a few years later, once all the talks about his political choices diminished, he announced to his closest companions his will to free all the slaves living on his Flower House. By doing so, he hoped it would encourage a more global slave revolution on the other Flower Houses. He also said his Flower House should be open to anyone and that it's wealth should be shared with the Brambles Folk.


====

NAME: Age of Trial
HOST: Empty and full
BREF: The explanation about the age of trial
PRIV: true
BODY:

# Age of Trial

The Age of Trial is the age kids are sent to participate into the War on Brambles. They have to serve for two cycles before going home. Depending on their social standing they are given different roles. The most fortunate are given strategist and secure positions to ensure their families won't lose them. The common people are trained to battle and a lot of them never goes back home.


====

NAME: It Eats The World
HOST: Empty and full
BREF: The first part of the empty and full series
PRIV: true
BODY:

# It Eats The World

It Eats the World is the first arc of {empty-and-full.html, "Empty and Full"}. It tells the story of several beings led by The First One, a creature betrayed by its kind seeking revenge. As he refused to be taken to eternal rest by its own God so he could take revenge, he concluded a pact with The Brambles and became an enslaved immortal.

As both the vessel and slave of The Brambles, he then proceeded to recruit other outcasts and shared his powers with them. Together they started a general war with the goal of destroying void itself by filling it with The Brambles.


====

NAME: Flower Houses
HOST: Empty and full
BREF: Flower houses are giant flower capable of containing entire populations
PRIV: true
BODY:

# Flower Houses

Flower Houses are gigantic habitable flowers. They mostly belong to wealthy families, who use the light and warmth to grow food and medicinal plants. As it's almost impossible to grow anything into the Brambles, Flower Houses provide a massive amount of the global food consumed.

Products from the flowers themselves or their leaves are also used to create luxurious goods, rare medicine and elaborate clothing. Most Flower Houses rely on enslaved Bramble Folks for their workforce, promising them a better life, sunlight, absence of war.

====

NAME: Flower harvesters
HOST: Empty and full
BREF: Flower harvesters are a cast specialized in finding flower houses
PRIV: true
BODY:

# Flower harvesters

Flower harvesters are a cast of specialized biologists trained to art of survival in the brambles. Most of the time, they are hired by privileged individuals looking for new {flower-houses.html, "flower houses"}. When they find a potential flower house, they note its location by going at the top of the brambles and looking at the stars. Then they rate the flower chance of survival and if it can't survive or grow big enough to form a new house, they harvest it or leave it alone.

The harvesters are easily identified by their full black clothing used to camouflage, their strange mask for those wearing them, or their darkened skin color. Harvesters are also a rarity. They require several years of education before being able to explore the brambles and a lot of them die in their first years. Despite what most people think, they are not a cult and don't worship any specific god. They also don't obey any flower government, as there's no governing entity in the brambles.

The rate of flower discovery has been increasing as harvesters became more efficient in their survival craft. But the rate of new habitable flowers remain low. The last discovered habitable flower house happened 317 units ago.


## Equipment

Flower harvesters all share the basic same equipment:

- Shears, saws and blades to cut brambles
- Fully reenforced black clothes to avoid injury and being detected
- Localisation and mapping tools, compass, paper maps and sextans
- Hunting tools: bow and arrows, traps
- A portable greenhouse where they re-pot small flower they harvested (to be resold later)
- Suspended tents and hamacs as well as all the equipment needed to establish camp

## Lifestyle

Flower harvesters live a solitary and autonomous life. They hunt the rare walking animals and gather the rare edible herbs available on the ground, a rarity as most people are living in the upper branches, hunting birds and harvesting white berries. The lack of sun and the food they consume gives them a black and dark purple tinted skin.

Flower harvesters organize their journey according to the brambles' caprices. They can walk for days or sleep in their suspended tents for weeks. When the later happens they often map the areas they went through or do technical drawing of plants and animals.

====

NAME: The Brambles
HOST: Empty and full
BREF: The brambles are a mythological plant enslaving the world of Empty and Full
PRIV: true
BODY:

# The Brambles

The brambles are a mythological plant enslaving the world of Empty and Full


==== 

NAME: My ideal phone
HOST: Knowledge
BREF: What I wish from a phone
PRIV: true
BODY:

# My ideal phone

The advancement in do it yourself and open source electronics for phone parts made me think about what would be my ideal phone. What I'd love is a productivity phone with a touch of audio capabilities for leisure.

Ideally the hardware would have:

- A physical keyboard like the Blackberry phones
- An energy efficient and readable small screen
- A 4G antenna to allow sharing connections
- An USB-C port for charging and data transfer
- A headphone jack for music and microphone
- A big storage capacity

On the software side:

- Phone calls and texts of course
- The ability to use contacts, calendars and notes from a third party provider instead of storing it locally
- A podcast app with search on the Apple directory, download and play
- A music application that can play local files but also download them from a private library
- A few utility and productivity apps like calendar, calculator, notes, etc...
- A few discussion apps for open source services like signal and connections

And that's it. Not having a browser would be a huge change as I am addicted to distractions coming from it. No camera is not a huge deal as I would probably buy a dedicated camera instead. The lack of GPS could be bothersome but I don't often travel that much.

====

NAME: The soft power of JavaScript
HOST: Html tips
BREF: A reflection on how JavaScript self-sustains itself through never-ending novelty
PRIV: false
BODY:


# The soft power of JavaScript

I've been thinking a lot about JavaScript lately. Not about the language itself but about the ecosystem, the economics and politics of it and how, like the United States movie industry or the K-pop music industry, it became a soft power tool that we're forced to consume and use. 

I feel it works this way:

+ Big Tech releases *thing.js* and people who worked on it promote it in conferences
+ Tech influencers see *thing.js* as a new revenue opportunity that may stick on the long run and start investing in it
+ They publish books, record courses, write blog posts and create a lot of noise around *thing.js*
+ Tech leads around the world are tasked to make technical stacks decisions, they look on the internet and see there's a lot of noise surrounding *thing.js* and that it's a big tech product
+ *thing.js* is now chosen as the corner stone of the stack and developers have to learn it to find jobs: they buy courses, go to boot-camps, watch videos, read blog posts, giving money to influencers
+ Rince and repeat

To me this spiral of events narrows our ability to think outside this ecosystem. It gives us the illusion of choice (_React, Vue, Angular, Svelte?_) and simplicity (_just npm install!_) and automatically makes us mold projects to the ecosystem (_it's an app not a website_) and increases the overall complexity.

For this very reason and for the same project scope than a previous classic front-end tech stack, small teams then need to grow in size. Suddenly you need a dev ops for builds, a design system lead, more people to slice everything in components, you deport parts of what was usually a backend work to front-end work. But is the output and the durability of the project proportional to the number of people added to the team? I don't think it is.

> "_But jquery was all spaghetti code and manual dom updates! MVC had ugly templates and massive, messy controllers! All this was hard to maintain and hard to evolve!_"

I know about this, having worked on a few projects of this kind. And obviously when you are big tech and have thousands of developers you need to slice everything into bits so people can work. But for us, the normal day developers in small to medium technical departments in small to big companies, what's the benefit? It's hard to compare if the _old way_ of doing things made it harder to maintain and evolve the front-end of a project. But what I'm seeing right now is dozens of job offers in digital services companies for migrations of hundreds of AngularJS components into another framework to basically do the same thing. 

Personally this whole soft power thing increases my imposter syndrome and makes me numb. Always catching up with the next big thing, I didn't asked myself for years if I actually like what I'm using or if it's justified to use it in the first place. The question is not if we should use *thing.js* but if *other-thing.js* is better.

I'm happy I met alternative coding scenes where people ask themselves if what they are doing is sustainable and necessary. I'm happy about what I do at least for personal projects. I know better how, why and where I want to do development in the future. 

Of course I may be wrong about all this. But what I am sure is that this soft power ecosystem is exhausting my love for front-end work, one project at a time.

_21/10/2020_


====

NAME: List of JavaScript frameworks
HOST: Html tips
BREF: A list of JavaScript frameworks that can be used in different situations
PRIV: false
BODY:

# A list of JavaScript frameworks

This list was created by {https://twitter.com/bastianallgeier, "Bastian", Link to Bastian twitter account} from the Kirby Team on the Kirby {https://discord.gg/r5AjvspYmY, "Discord"}. For conservation purposes, I reproduced it here. It was then consolidated using Tom Mac Wright article about {https://macwright.com/2020/10/28/if-not-spas.html, "Single Page Apps"} replacements.

## JS-based page transitions 

Using the history API and Ajax requests to fetch HTML of the next page and replace the current body with it.

- {https://github.com/turbolinks/turbolinks, "Turbolinks"}
- {https://github.com/MoOx/pjax, "PJAX"}
- {https://barba.js.org/, "Barba"}
- {https://swup.js.org/, "Swup"}
- {https://highway.js.org/, "Highway"}

## JS-enhanced HTML 

Event handling/reactivity/dom manipulation via HTML attributes

- {https://github.com/alpinejs/alpine/, "Alpine"}
- {https://stimulusjs.org/, "Stimulus JS"}
- {https://htmx.org/, "HTMLX"}

## Inline replacement of components

Static HTML gets updated via websockets or Ajax calls on the fly with small snippets rendered on the server.

- {https://laravel-livewire.com/, "Livewire"} (PHP)
- {https://docs.stimulusreflex.com/, "Stimulus Reflex"} (Ruby)
- {https://www.phoenixframework.org/blog/build-a-real-time-twitter-clone-in-15-minutes-with-live-view-and-phoenix-1-5, "Phoenix Liveview"} (Elixir)

## Server-injected SPA

A client-side, component based application (Vue, React, etc) gets its state from pre-rendered JSON 

- {https://inertiajs.com/, "Inertia"}

## Traditional SPA

A client-side, component-based application (Vue, React, etc) but data is being fetched via API (REST or GraphQL).

- Vue app
- React app
- Angular app

## Opinionated full-stack JavaScript frameworks

Using existing frontend and backend stacks in an opinionated way to offer a fullstack solution in full JavaScript

- {https://redwoodjs.com/, "Redwood JS"}
- {https://blitzjs.com/, "Blitz JS"}
- {https://remix.run/, "Remix"}


====

NAME: Freelancing notes
HOST: Knowledge
BREF: Personal notes on freelancing
PRIV: true
BODY:

# Freelancing notes

This page is about freelance work related to web projects (design, user experience, development, counseling). 

## The types of freelancers

There are two types of freelancers that I know about in this field:

? Mercenaries : They execute the work, do it fast and for various clients. Since they are just implementing and not leading the project, their rates is lower than experts.
? Experts : They lead a project and sometimes implement it at the same time. They have less clients, for a longer period and a higher rate.

Both types are legitimate and needed in the field. Both have pros and cons:

- Mercenaries can't catch a break and need to operate on a tight schedule, but their rate, diversified skills and type of work make it more unlikely for them to be out of missions.
- Experts are less pressured into finding work all the time, but their expertise might not be needed all the time. They have a higher rate to compensate when they don't have any client.

What is sure is that both types need to build a network of clients.

## Build a network

It's always better to search for clients when you are not in need right away. One of the best ways of doing it is sending spontaneous applications to agencies you would want to work with. If they refuse your candidacy or don't answer it's not a problem, they may remember you when they have a specific need.

Freelancing platforms can also be a good way of finding clients but there is a lot of competition that may pull rates down. Sometimes it may be better to have no deal than a bad one. 

It's important to have a commercial relationships with clients. Sending emails to contacts to let them know you are available and trigger word of mouth is key. Making people remember you by sending them some news (for example a happy new year card) or thanking them when they refer you to another person is probably a good idea.


## Cash management

It's extremely important to have six months to one year of cash flow. And to build it, it's important to get paid in time and at a correct price. Most clients pay in the following sixty days after receiving the bill. But some can take months (agencies) to years (government or public missions) before paying. There are even cases where companies don't pay in the hope that the freelancer go bankrupt so the debt is cancelled.

Depending on the country, clients may want to negotiate the price (it's always the case in France where I live, way less common in the United States for example). It can be hard to maintain you value and increase it afterward so try to not lower your prices to get a deal.

When deciding of your daily rate, it's important to take these arguments into consideration:

- If you take 5 weeks of vacation each year it's 17 days of non-payed work.
- If you have an accident and can't work for a long time, you need an insurance for both medical fees and a substitue wage.
- A part of the rate needs to go to the cash flow that will help you live when there are no clients (6 months to 1 year of cash flow is necessary).
- As a freelancer you probably don't contribute to public retirement, so you need to finance it yourself through complementary systems (life insurance, real estate)
- Depending on the country where you are located, taxes can take a substantial amount of your rate.
- Depending of the type of company you have, you may need to pay an accountant each year.

Taking all these factors into consideration substantially lowers the money you earn as a freelancer. *Overall, only around 50% of the price payed by the client is the real salary*.

As a freelancer you can only count on yourself and thus you need to create your own insurances. They are some period in the year (like summer, Christmas) where freelancers are not needed and even if it frees time to find new clients, it means you have to pay your bills with your cash flow. 

## Pricing

About pricing:

- Hour rate pricing is rare.
- Daily rates are more common.
- Package pricing is common in the web.

If you are a developer *never do a package pricing* and favor daily or monthly rates, except if you are super sure about the scope of the project and protected by the quote. In other type of works (design, user experience) package pricing is often the norm and requires to be very careful when writing quotes.

## Quotes

Good quotes are the ultimate protection for freelancers and can help building a more professional relationship with the client. Quotes should always list what is in the scope of the project and what is not in. This way you can refuse a sudden change or propose a new quote for a project change.

Here's a list of basic things to think about when making a quote.

### Design

- Indicate a fixed number of initial design concepts that will be given to the client to help him decide the direction of the design.
- List the number of pages, templates, or components that will be created once the direction is chosen.

### Text 

- Be clear that you are not creating the text content for the client, nor inputting text or creating his pages into his content management system.
- If the client wants you to do all this, add into the quote a maximum length and price for each text, the time required to input the text, and the list of pages required, and get payed.

### Graphics and photographs

- Be clear that the client has to provide graphic files (logos, icons for example) and the file format you are expecting. If the client doesn't want to do it by himself, list what is needed and add it to the quote as extra work.
- Be clear that the client has to provide the photographs for the website. Propose a list of stock photograph websites where he can choose what he wants. If the client doesn't want to do it itself, prepare a separate bill with the images you will buy for the project.

### Development:
- Detail the goal of the project and the specific parts you are working on and what is required by the client for you to do your work.
- If the project has an intricate codebase or list of features, detail what you will work on and what you will not work on.
- List the languages, technologies, libraries, frameworks required.

### Browser testing

- Be clear that browser testing is about allowing a similar experience on all browsers, not a pixel perfect render as it's impossible.
- List the browsers used for the tests, and which one won't be tested.
- If the client needs to support an old browser (ex: IE11) then the development rate should be higher and it should be clear on the quote (some clients abandon this idea once they see it's more expensive).

### Tech support

- If you don't provide website hosting be clear about it. If the client want you to open an account for hosting their project and put it online, add it to the quote. Be clear that outside installing the website, you are not the tech support for upcoming updates or problems.
- If you do provide hosting, list what is required by the client (domain name, type of hosting, mails) and what is not.

### SEO

- Be clear that even you can't guarantee increases in search engine rankings, even if you work in the SEO business.

## Contract

When the quote is accepted, provide a contract to the client. It's the last moment you can set rules with him about how things are going to work out.

Be sure the client knows that:

- The project can only progress if he is involved and that any lack of feedback required for the continuation of the project may halt it.
- The freelancer can't be responsible for any delay due to the lack of feedback from the client.
- He can change its mind but that an additional quote will be made.
- If he is not satisfied he can terminate the contract but will have to pay the time already spent working on the project.
- Any legal stuff that you think is important (liability, payment schedule, intellectual property rights, work display)

## Working with clients

When clients hire a freelancer they basically want a facilitator, so everything should be done to keep the client reassured.

To avoid problems and facilitate the work:

- Get as much scope as you can.
- Communicate to get all the steps of the projects.
- Find at which step of the project you have to intervene.
- Provide a ready-made benefit.
- If you have to work with a team, choose the people you want to work with.
- Never put yourself in a position where you can be faulted.

Transparency and communication are keys to a good working relationship. 

- Give daily feedback and/or deliveries.
- No need to write a novel each day, just a short notice is enough.
- Ask the client if everything is OK on his side.
- If you need feedback and mails are not working, make a voice call.
- Never apologize of being communicative.
- If you are working remotely, never apologize for working remotely.

When something is going bad, for example budget is exploding or demands are increasing, impose your way of working by saying _no_ but provide _options_. Never come with empty hands as the goal is to simplify the process and save time.

## Type of company

Each country has its own rules about freelancing. However european freelancers can have a company in Estonia with an e-residency certificate. It costs around 100 euros a month and provides services for everything like invoices and payment. You may still have to pay your residency country charges.

====

NAME: Raspberry Pi Distros
HOST: Knowledge
BREF: Distros I tested with for a Raspberry Pi
PRIV: false
BODY:

# Raspberry Pi distributions

Despite the hype around the fourth version of the Pi, most desktop distributions run very slowly on it and provide poor user experience. I've tried all the distros listed below and gave them ratings on these topics:

- User Experience
- Responsiveness
- Software support
- Easy to install

The ratings are:

- Perfect
- Average
- Poor
- Terrible

## Raspbian (Raspberry Pi OS)

? User Experience : *Average* It's ugly but coherent and easy to use
? Responsiveness : *Average* Most things are fast but some programs (mostly Electron apps) struggle
? Software support : *Perfect* It's an Ubuntu base and the official OS
? Easy to install : *Perfect* Plug and play and follow the guide

Raspbian excels in nothing but is not terrible in anything. It's too bad it struggles with Electron apps. Supports hardware acceleration.

## Dietpi

? User Experience : *Poor* Dietpi proposes ready-made basic desktops (Mate, XFCE, LXQTm, LXDE) that are ugly and sometimes does not work (sound cursor in XFCE).
? Responsiveness : *Perfect* Everything is fast or fast enough, even Electron Apps are usable
? Software support : *Perfect* It's based on Raspbian and comes with it's own list of ready-made software
? Easy to install : *Poor* Small iso but very long install with terminal based menus, takes a lot of time and not everything is clear

Dietpi is probably the best in performance, but only for people with some skills at setting up their own environnement. Supports hardware acceleration.

## Manjaro

? User Experience : *Perfect* It's beautiful, coherent and easy to use
? Responsiveness : *Poor* It's still usable but worse than Raspbian, no hardware acceleration support for video
? Software support : *Average* Based on Arch Linux, most things are available but most configuration tweaks are for Raspbian/Ubuntu
? Easy to install : *Average* There's a few terminal screens but it's quick and works fine

If Manjaro was a bit snappier and did not lack some performance tweaks available to Ubuntu based distros (like hardware acceleration) it would be my default distribution.

## Ubuntu

? User Experience : *Average* The classic gnome Ubuntu
? Responsiveness : *Terrible* It's so slow for everything it's almost unusable 
? Software support : *Perfect* It's Ubuntu so everything is there
? Easy to install : *Perfect* The classic Ubuntu install experience, everything is clear

Ubuntu is so slow I could not be bothered to use it for anything. Also it's strange because hardware acceleration is supported but I could not make it work inside chrome for video decoding.

====

NAME: Raspberry Pi
HOST: Knowledge
BREF: My Raspberry Pi configuration
PRIV: false
BODY:

# My Raspberry Pi configuration


I've been trying to use  a Raspberry Pi as small development machine for personal projects. The overall goal is to spend less time on the computer by creating a distraction free machine with limited capabilities.

I use a Raspberry Pi 4 with 8 gigs or ram and an aluminium heatsink.

[/media/pi.jpg, "Pi 4 with a heatsink"]

After a lot of {raspberry-pi-distros.html, "testing"} I ended using *Dietpi*. The install experience is poor but compensated by the large amount of tweaks and software proposed. It's probably better to create your own user experience by installing and tweaking the window manager and file manager that suits you. 

But what is amazing with Dietpi is how responsive it is considering it's running on a Raspberry Pi. I installed i3 window manager and thunar and almost everything launches instantly. Even an Electron app like Visual Studio Code is usable as there's no lag when typing (but startup and syntax color can be a bit slow).

I use the 32bit version as the 64bit has bugs.

[/media/i3.jpg, "A screenshot of my i3 Desktop"]

## Dietpi installation guide

This guide is mostly for my own use but feel free to use it.

### Basic setup

- If you are on Wifi, edit the `dietpi` and `dietpi-wifi` files in the boot folder before inserting the sd card, as dietpi will trigger `apt update` and `apt upgrade` on launch.
- Use `dietpi-config` in the command line and activate the sound in the audio options and bluetooth (if needed) in the advanced options (note that activating bluetooth sometimes returns an error, but it's working).
- Configure the language, keyboard and locale.
- Using `dietpi-software` from the command line launches a menu with ready to use software install. The `Optimized software` contains the window managers, the `additional software` contains things like `git`, `openssh`, `vim` and other tools.
- If you want to use i3, install `i3`, `i3lock`, `i3status` and `suckless-tools`.
- By default dietpi launches in the terminal. To launch to the window manager, use `dietpi-config`, go to `autostart options`. You'll see a list, go `Desktops` and press Enter on `LightDM Login Mask`, then select the user (probably dietpi) and exit. The next time you'll reboot you will boot on LightDM and will be able to choose your window manager.

### Other programs

- `thunar` as a file manager.
- `chromium-browser` for browsing
- Hardware acceleration following this {https://www.dedoimedo.com/computers/rpi4-ubuntu-mate-hw-video-acceleration.html, "tutorial"}
- `blueman` to manager bluetooth devices
- `mps-youtube` and `youtube-dl` to play youtube music in the terminal. The `youtube-dl` package is old, you have to update it using pip3: `pip3 install --upgrade youtube-dl` and use your own Youtube V3 Api Key. Set it inside mps-youtube with `set api_key KEY`.
- By default dietpi has no emoji support or foreign languages like Japanese, you might want to install fonts to support them.
- I use `feh` to randomize wallpapers (it's inside my i3 config file)

### Chrome extensions

- Ublock original
- Noscript
- Ninja cookie
- 1PasswordX
- h264ify

### i3 config file

My config file is available on {https://gist.githubusercontent.com/Thomasorus/89322ec9b0913e680616548265f5346f/raw/ccfd72704a6fced96ab6642477397c2ef6fa2efc/i3-config.txt, "github"}.

====

NAME: I removed the computer
HOST: Home
BREF: I removed my main computer from my desk
PRIV: false
BODY:

# I removed the computer

My family had its first computer 20 years ago. Each day I would come back from school to spend hours on it. When I turned eighteen I bought my first computer. I installed it on my desk where I usually did homeworks, and since that time a computer has always been on my desk. I coded, wrote, recorded podcasts, read, played... It didn't change during my art school years, as I had a dedicated desk to paint at school. Once I graduated, I basically stopped painting because I was fed up with art. I started many projects that were exclusively made on a computer and had a lot of fun. I thought it would be this way forever.

But one day, it changed.

Sitting at as desk never bothered me that much. It was a position where I could watch a movie, play video games or write, and feel comfortable. Five years ago I went from working in a shop, standing all day, to being a web developer, sitting all day. From this moment onward sitting at a desk felt like a _work position_. It wasn't a problem when I was doing _productive_ hobbies like recording, writing or coding, but it became harder to play video games, and impossible to watch a movie or a show. Due to chronicle occipital neuralgia I can't be in a relaxed position while sitting at a desk, I need to sit straight.

The desire to draw and paint also came back and with it, the constant frustration of not having a dedicated space for these activities. Mixing electronics and art furniture (ink, water, giant sheets of paper) is a bad idea when you are as clumsy as I am. Cables from peripherals are on the way. When I lean to draw the screen is in my face. You can't have both in the same space unless you have a giant desk.

And there's this procrastination problem. When I don't feel like doing anything, I sit at my desk, and I _use_ it. I refresh my feeds, I launch programs, I mindlessly seek _something_ that could free me from this anxious state I'm in. Of course it never works and I sometimes leave the desk frustrated. _I had free time and did nothing, I didn't even relax_ is a common feeling.  

So today I removed the computer from my desk. It is now in the living room, under the TV, with a wireless keyboard and trackpad. I plan to use a gamepad to play, in a relaxing position, all these games I accumulated. As I needed a way to write, code and record podcasts, I bought a Raspberry Pi and took several hours to {raspberry-pi.html, "create a setup "} that is both productive and limited. I can code, write and record (even if I still have sound issues). But being a 32bit ARM computer, I can't install Slack, Discord, Steam or anything else. The only source of distraction is the browser and it can barely run a 1080p video and navigate the web without struggling.

I hid the Raspberry Pi behind the screen, who now floats above the desk thanks to an arm support. Most importantly, it can be moved out to the side in a few seconds to regain the full depth of the desk. I installed my pencils, brushes and notebooks and hope that, in the future, if I feel the need to procrastinate, I will do it with paper instead.

Changing a 16 year old habit isn't easy. I don't know if that will work. I fear that the Raspberry Pi might be too limited for some of my projects, but using a more powerful computer brings the risk of more distraction. We'll see how it works.

_15/11/2020_

====

NAME: Renovation journal
HOST: Home
BREF: A journal about the restoration of my apartment
PRIV: false
BODY:

# Renovation journal

This is the journal of my apartment renovation. 

## November 16th 2020

First day of renovations!

This day was one made for discovery. First I went to the do-it-yourself store. I bought gloves, scrappers, glue solvent, ground protection canvas, a bucket, masks and several other little things I needed to start. I spent more time in the store than I wanted and arrived mid-afternoon in the apartment.

I had to remove plates of polystyrene glued to the entrance and the corridor ceiling and remove the wallpaper from the entrance hall.

I started with the ceiling plates, removing them one by one and stuffing them inside a trash bag. The risk with the ceiling was that the glue used to stick the plates would rip off the plaster. Fortunately for me, coating was used as glue and most polystyrene plates came off easily, only leaving coated dots. I did the entrance hall and the whole corridor. Once I was finished my arms hurt.

To recover some strength I decided to continue with the entrance wallpapers. I pierced little holes in it with a special tool. Then I soaked the wall with a glue solvent, using a sponge. Most of the paper came off easily but some parts needed two passes. Under it, the wall is in a correct state but obviously it will need a new plaster before painting. I removed the paper from the first wall, finding my marks as I was doing it.

While doing this, I worried about the ceiling's coated dots. I tried to sand them but it was too hard, nothing came off. Discouraged, I took a metal scraper and a hammer and started going under. It took some trials and errors but I found a good technique: bend the scraper at 45 degrees, hammer once, then go closer to the ceiling little by little, each time hammering. This way the whole coated dots came of in one to three parts. Doing it this way added marks and little holes in the ceiling but it will be faster to re-coat the holes than sand what's there. I removed half of the dots in the entrance all this day.

I think I spent around 3 hours and half between the store and the work this day. I went home happy but a bit worried about the time needed to do the ceiling.

## November 17th 2020

Second day of work! This time I came earlier in the afternoon and continued the work in the entrance hall. I had to remove the interphone, the ring bell, an electricity box, curtains that were hiding the entrance door, as well as the curtains bar. It took a bit of time, as well as removing the paper around the door.

I started feeling dizzy, soaking some wall there, another one there, forgetting about scrapping the first one and having to soak it again. Overall I wasn't happy it took me so much time to do this, I felt it was supposed to go faster. I finished removing the dots from the ceiling in the entrance hall and went home exhausted with arms hurting.

## November 19th 2020

I didn't go to the apartment yesterday as I was sick. I arrived defeated and felt I was not going to be able to do anything. I decided to put some music to help me focus and started listening to _L'école du micro d'argent_ from *IAM*. The {https://www.youtube.com/watch?v=x4uHgwHdXOA, "first song"} starts this way:

```
Assis en tailleur, voilà des heures que je médite
Sur ma montagne et je n'arrive pas à faire le vide
Je focalise sur le diaphragme, j'augmente mon énergie
Réveille la bête qui dans mon âme est tapie
```

This song gave me a burst of motivation and confidence and I decided I wasn't going let a damn ceiling dictate my life! _Eat that frog_ they say, so I was going to eat this damn ceiling. I moved my stepladder in the corridor and started going hard on the coating dots while singing. It took me almost 2 hours with a few breaks to rest my harms but in the end I did it, the ceiling is now free of coating dots!

Feeling confident, I decided I should try removing the corridor wallpaper. I picked a little piece in my hand, pulled it and... Everything came off easily, in a single pull, without any glue solvent! The sound of wallpaper being teared off from the wall is so satisfying. The larger the piece, the deeper the sound, the most satisfaction it procures.

In around 30 minutes the whole corridor was wallpaper free. It felt sooooo good to see it naked! I thought I would spend two days on this, and I was already done.

I managed to talk with the renovation contractor to fix a date for the walls demolition. He said to me _is Saturday ok_ and I answered _wait what this Saturday_ and eventually that's how I learned three men were coming the day after tomorrow to smash the wall in my new apartment. Knowing how noisy it would be, I knocked to the door of all my neighbors to warn them that Saturday wasn't a good day for a morning sleep-in.

## November 20th 2020

This day I wasn't alone! Coralie wasn't working and came to help. We decided she would tear off some wallpaper while I was preparing the place for the contractors. She started peeling the paper in my future bedroom while I was removing electrical outlets, light switches and more wallpaper. Since the contractors are going to remove walls and then fix the walls, ceilings and grounds, I try to remove anything that would slow them down.

I also wrote notes on paper to warn the neighbors I could not meet. The most important one, right below my apartment, wasn't there again and stuck a note in his door basically saying _SORRY IT'S GONNA BE NOISY AS HELL FOR A DAY_. We went home and eat soba.

## November 21th 2020

My alarm wakes me at 7am. I haven't woken up so early in months and I feel like sleeping more. Coralie came to check I was awake, admitting that she was very stressed by the idea of me not waking up. I took a breakfast and prepared a thermos of coffee for the contractors. A friend who renovated his house gave me some advices: be clear in your instructions, stay calm if something goes wrong, stay firm if contractors try to negotiate. And that bringing some coffee was always welcome.

I met them at the apartment, and they were nice folks. One of them is around 30 and the other is older, around 45 if I have to guess. We talked a bit, drank coffee, discussed the remodeling and what I was planning for the apartment. They grab a lot of tools, put blankets on the ground.

Then, one of them picked a hammer and started smashing on a wall. That was both frightening and super cool. Friends asked me why I didn't try it myself but I didn't want to exhaust myself as I had a lot to do today too. The second contractor started smashing the walls too. I was in the kitchen, disassembling furniture and hearing the sound of bricks, stones, plaster raining on the floor. It was quite something!

When they stopped I opened the kitchen door and saw... nothing. There was no wall left, only the door frame. I could see the whole living room from the kitchen. The whole thing was so spacious and luminous, it was amazing! I was relieved seeing it was as good as I hope. The contractors then started the hard work of removing the debris from the ground. They filled around then 100 litters garbage bins and took them down by the stairs. The poor guys were sweating hard. We took another coffee and discussed the result. I apologized for making them suffer like this. They said it was ok and that they were used to it.

Once they were done they smashed another wall. The corridor ends with a big, two meters square closet that is right next the smallest bedroom. I wanted it removed, as well as the door frames. Another door will be added at the end of the corridor.

Lunchtime arrived, they went to eat something and I went home. All morning I was texting photos and videos of the remodeling to Coralie and my family. I added some details in message apps, rested a little, then went back around 2pm. The contractors were, once again, filling garbage bins and taking them down by the stairs. On my side of things I managed to remove all kitchen cabinets from the walls and the ground. The previous owner was the uncle Scrooge type. To avoid buying enough metal feet for the cabinets, he only gave two to each and then fixed all the cabinets together with _dozens_ of screws! It took me hours to remove them all!

In the middle of the afternoon the contractors were done moving debris and went to the bathroom to empty it. They removed the furniture and struggled with the tub. Meanwhile, I went to the now extended room and decided it was time to remove this ugly wood paneling. Wood paneling is often serves two purposes: first it isolates the room by creating a small space between the wood and the wall ; and secondly it hides ugly walls. It was the only unknown in the apartment.

And _oh boy_. As I was removing the wood panels, I discovered an ugly and humid wall, with swelling plaster all around it. The wall is basically unusable and cannot be re-plastered directly. It needs scraping, a lot of it, to go back to reach the concrete wall behind. The fake wooden floor isn't even going to the wall! There're 3 centimeters between the floor and the wall! I became super worried about the time and cost those walls were going to cost me.

I asked the contractors about it, and they said it was probably wiser and cheaper to clean the wall a bit then glue plasterboard. They explained some types came with an insulation layer that prevents humidity from reaching the plaster side and the painting. I phoned the company, explaining them my discovery. They took measures and then updated the invoice, which grew by a substantial margin.

I already knew when I started this project that _things don't go as planned and always cost more than you think_, so I wasn't that angry or stressed. Plus adding an insulation layer will reduce the heating cost so in the long run it's worth it. I asked for advice to friends and family who were in this situation before and all said the same ting: do it.

I went home around 6pm, showered, took the car again to get us Bò Búns. We started watching my _Yamada neighbors_, but I was so tired I went to bed in the middle. I fell asleep instantly.

## November 22 2020

I woke up late after a strange dream where a long-time lost friend and I were kidnapping Trump and evacuating him from a location (a golden maze like mansion, very fitting) using exhaust pipes. I remember he stayed stuck inside, so we had to flush several toilets to make him go down. It was very satisfying.

My body was numb and painful. The day before was hard and I wasn't doing any sport before this so it was kind of logical. Got up and went to the bakery by a fresh charcoal baguette for me, buckwheat bread for Coralie and chocolate viennese for the two of us. Also bought eggs and crêpes. We had breakfast while watching The Mandalorian, then went back to the apartment.

Coralie was frustrated she could not help yesterday because of her handicap. She came determined to be useful and started peeling the kitchen wallpaper (she loves doing it, she says it's like removing dead skins). Meanwhile, I started removing all the electrical gutters. There were so many of them! Some of them were even empty! What happened in this place before?!

But removing them allowed me to make a wonderful discovery! The building is from the sixties and in this period, they didn't have ground connection. When buying an apartment of this period, it's always the lottery. I knew the kitchen and bathroom had the ground connection because that's mandatory, but I wasn't sure about the other rooms. Well turns out all of them have it!


The apartment is on the last floor and the previous owner used the attic to pass a ground cable from the fuse box to all the rooms. It was done poorly and cheaply, with holes in the ceilings and cables hidden in ugly plastic electrical gutters. If I'm not happy about the ugliness, I'm super happy I won't have to do it myself. Now all I have to do to make it pretty is adding hollow plinths to hide the cables. I'll also try to add gigabit Ethernet cables and sockets in each room.

Coralie managed to finish peeling the kitchen walls and targeted a new victim: the last bedroom. This one was frightening to us. A thick wallpaper that was repaint loosely. I managed to catch a little piece, pulled and... _EVERYTHING CAME IN A SINGLE SHEET_. Apparently the wallpaper and glue were the same as in the corridor. We removed everything in 20 minutes then went to toilets and started doing the same. Unfortunately it wasn't as easy but most of it came off nicely.

Finally, we discussed our discoveries of the day. When removing the wallpaper, we realized there was moisture traces on the plaster in the last bedroom. Not on all walls, only the one facing the outside. It was the same traces as the wood paneled wall. Worried, I went to the second bedroom that I thought was in correct shape. I started knocking at the walls and realized that one of them made a hollow sound. Using a flat screw diver, I dig a little in the wall and realized it had the same problem, only minimized by a second plaster coat and paint.

This room is oriented to the north and already had mild moisture traces in a ceiling corner. We knew this room was a bit cold and humid, because the previous owner added a controlled mechanical ventilation to the ceiling. I started asking myself if we shouldn't isolate and plasterboard all the bedroom walls facing outside. Between the first room and this one, it would probably double the initial invoice.

I asked my father about it, and he said I should do it. He was right to say that once we will be installed, if we feel the cold, we're not going to empty the room again to plasterboard it, and we'll end up not liking the apartment. Adding insulation will also reduce the cost of heating the rooms.

Right now I feel like a builder in the _Grand Design_ show. In this show each time people go over budget and feel terrible about it. Fortunately for me, I knew it would happen and planned it, but it's still a shock. We'll see with the contractor tomorrow.

## November 23 2020

Woke up early again and went to the apartment to meet with the main contractor. We made a tour and talked about the need to insulate the walls, he agreed with me it would probably be better. I also explained I needed time to check the electrical installation with a pro before positioning the plasterboard. It annoyed him a little bit, but he accepted that we postpone the rest of the renovation when I told him we could continue either in December or January as I'm not moving in until February.

He called an electrician he works with regularly, who accepted to meet with me tomorrow. I went back home around 10am for a video call. Once it was done I made lunch and suddenly felt super tired. I decided I should rest today and go back tomorrow. I have to make phone calls to get electricity anyway.

## November 24 2020

I have electricity! It was quick and everything is working fine. I went to the apartment at 1pm to meet with the electrician. He was recommended to me by two persons and after seeing ground connection cables in all rooms, I felt it was going to be fine. Turns out I should not have.

The electrician was supposed to stay 30 minutes, he stayed more than one hour. The electricity in my apartment is a freaking mess. First, I have two electrical systems! The old one dating from construction is used for light switches and some electrical outlets. The new one, redid later, is used for the other electrical outlets. But here's the problem: all heaters are connected to the same circuit as the outlets instead of their own. Which means if a heater takes a lot of juice and other electrical items do it too, the circuit breaker will be triggered.

Except it might not! Because apparently the person that did the electrical box choose a too high amperage compared to the electricity consumption (the stuff he used is not even available in public store, where did he get that?!). That means that cables, who are too thin to take such a charge, would melt before the circuit breaker cuts the juice. It's the same for other parts of the apartment: the oven has excessively thin wire, the induction cooker too, and so on...

Considering we don't know which parts of the old system are still in use, that we can't know for sure, and that the most recent one is garbage... everything has to be redone. Of course that means more money. If I'm not running short at the moment, with the electrician and insulation bill, half of my reserves will be gone. I know it's an investment and that it will pay itself the day I sell the apartment. But this will also drastically reduce the freedom of choice for the bathroom and the kitchen, and I wanted to customize them to our needs to feel right at home. Or I can extend the budget in exchange for more freelance work? We'll see. 

On the plus side, doing this electrical upgrade would mean a new and cleaner electrical box, displacing some light bulbs to better places, having more electrical outlets in some rooms. I also plan to work at home as much as I can in the future, so moving the modem to a more secure and accessible place as well as adding Ethernet cables to each room at the same time of electricity might be handy.

But the saddest part is that we probably won't be able to enter the apartment in March like we wanted. Electricity has to be done before the insulation and the electrician is a busy man. He might not be available until the end of January, and we expected to move mid-February. With the time needed to finish renovations, install the bathroom and kitchen, that means moving in April or May.

I brooded all afternoon after the electrician left. I spent the rest of the day cutting the paneling boards in two, so I can transport them into my car. While doing, I realized the apartment was full of light and even a little warm as the sun was passing through the windows. It felt good and reminded me why I was doing all this.

On the way home I went to the post office to send some paperwork, and to the bank to pay the first part of the construction workers' bill. I bought a muffin at the bakery and ate it in the sofa.

## November 25th 2020

Today was probably the shortest time I spent in the apartment but also the most exhausting. I went there with a simple idea: remove all the mess that had accumulated. I brought a big 100 liters sturdy bin to facilitate transportation. Then I prepared Yaya (the affective nickname we give to our ugly 2005 Toyota Yaris Verso) for transportation by folding the seats under the floor. _My body is ready_ I thought while I was climbing to the fourth floor.

Oh jeez my body was so _NOT_ ready! First I charged the bin with the paneling boards. Probably overly optimistic, I put a _little too much_ in and when I lifted it I remember saying "Ooooh shit" out loud. Nevertheless, I went down with this massive amount of wood in my arms, stopping every two floor. I filled Yaya with the planks, then went back up there and started again. Just the wood panels took me 4 round trips! I was so tired but it wasn't over. I also had to get the plastic gullies down, as well as steel frame parts, a gigantic roll of wallpaper and five more bags filled of wallpaper.

The last round trip was super painful with one of my knees making me suffer a lot, something that never happened before. Exhausted I just grabbed my jacket, went down again and unable to do anything, went back home where I showered, eat and went to sleep.

## November 26th 2020

Quite a busy but satisfying day! I took Yaya to the waste disposal in the morning, it took me some time, but I was happy that I had sorted everything right, a skill I sort of acquired while we emptied the family house last summer and I acted as the garbage collector!

With the car empty I went to the DIY store to buy some furniture: a broom, ground protection sheets, a big brush, masking tape and a humidity treatment for my walls. I went home to eat lunch and had a very hard time getting out of the sofa with my body hurting from yesterday.

I finally managed to go to the apartment around 3pm. My original plan was to dismantle the kitchen cabinets and charge them into the car. But once I was there, I felt a bit demotivated by the state of the apartment. It was a mess! There was broken plaster everywhere, white dust is covering the black floor, pieces of wood, electric cables and screws. It was so dirty!

So to regain some motivation I decided I was going to clean this place (and also because it was less exhausting). So I swept the floor for something like two hours, removing everything I could remove. I also took the time to empty the holes in the wood floor created by the absence of the walls we removed. It's in this situation I really appreciated buying working gloves. After doing the bedrooms and the bathroom I stopped to dismantle the kitchen cabinet.

While I was doing it I thought to myself there were in good shape and that they could be useful. I texted a friend that is almost done renovating his apartment. He was interested but had to ask his girlfriend, who is apparently a bit bothered by his habit of bringing furniture from nowhere. While I waited for his answer, I decided it was time to empty the kitchen.

I moved the last cabinets and the oven in the living room. Then I started unscrewing the counter-top to the wall. I was worried I would break the plasterboard it was glued to while trying to move it. As with many things in the apartment, the whole thing was so old that I could remove it easily, with glue breaking instantly.

The sink had been fitted inside the counter-top and the counter-top on a cupboard. My goal was to saw the extremities of the counter-top but I didn't have to: by just pressing a little the chipboard inside the counter-top broke! I was surprised but apparently the wood had rotten and was more brittle than I expected.

When looking inside the cupboard I finally realized how _old_ all this kitchen installation was. The cupboard was customized with a small hole for the gas conduct! But the building abandoned gas more than twenty years ago! How old is this thing?! Since the gas tap was added after putting the conduct in the hole, I had to saw a part of the cupboard to then move it away from the wall.

I cleaned the kitchen and received a text message. It was my friend saying his girlfriend say _NO_. I'll have to move the cabinets down by myself, _sigh_. But looking at them, I thought it was probably stupid to put them into the trash, so I'll see if I can give them to a charity once the lock-down is over. 

I was still motivated to do something, so I looked in the kitchen and thought... that I really didn't like this glass fabric on the ceiling. It's gross with, with traces of fat. The painting is flaking off when I touch it... _Yeah, I should remove it_. 

Now with glass fabric, either you are lucky and everything comes off gently. Or you are doomed and the glue is too strong and you have to peel it. And I was super lucky! But while tearing it, all the paint started to flake off and it was suddenly _snowing dry paint_ in the kitchen I just finished cleaning. 

Once I was done I realized that there was a lot of paint and glue particles left on the ceiling and, just moving inside the room made them fall. Suddenly I was like the purple thing in Alex Norris comics saying _Oh no_ out loud. So I took the broom and undertook the absolutely relaxing, not arm hurting at all task of sweeping my kitchen ceiling. 

It took me around 20 minutes and time for cleaning afterwards. Once I was done I texted Coralie _How about pizza :smirk_emoji:_ and she texted back _I already bought one_. This woman can anticipate my needs like no one.

So I went home, showered, fell into the sofa, ate pizza, drank a local beer made with alga (did I mention I live nearby the sea?), watched _Grand Design_ on Youtube. In this episode a couple overspends while renovating a chapel. _Wow they're crazy_ I thought while gluttonously eating a pizza slice.

## December 2 2020

It's been a few days since I went to the apartment. After the previous week and I felt extremely tired and physically broken. I decided I should rest a little bit. My plan was to go on Monday to clean the last things left as, on Tuesday, I was starting a new exciting mission at work. In my mind it was settled: after this monday, I would only work in the apartment on the weekends.

But I learned that my mission was postponed, which hit me harder than I thought. Then the invoice for the electrical renovation came in and it was way larger than what I expected. I asked a friend about it and he told me it was overpriced and that I should ask someone else. He gave me a number and I called. I also called the first electrician to bargain a little bit but it's not really in my nature to bargain when I don't have the keys to understand the values of things.

On Tuesday I was supposed to go but decided not to. I was demotivated.

And today on Wednesday, I finally found some motivation and went. Well most of it came from the rendez-vous with the new electrician. He seems like a nice guy, he gave good advices. He'll do his own invoice soon. What relieved me is that he can start working much sooner than the first electrician. If the invoice is in my range, I may have electricity done sooner than I envisioned!

After the rendez-vous I went home to eat, then came back one again in the apartment. I felt completely lost to be honest. There's so much to do I didn't know where to start. I still have some bookshelves to remove but screws are stuck. I have furniture leftovers to walk down, the charity to call for the kitchen cabinets. And so many walls in a bad state.

Not knowing exactly what to do, I decided I should start with the humidity traces on the walls. I picked a scraper and a hammer, and started removing plaster that had separated from the walls. I don't want the future plasterboard to be glued to volatile plaster. I brushed the walls in one of the bedroom to clean them a bit, and then sprayed a special product for humidity stains. A few minutes later I cleaned everything but some stains are still there. I'll have to redo it another time.

I also finally took the time to go inside the attic. It's clean and there's a kind of wool insulation everywhere. I could barely distinguish the internet fibre cable and the electrical sheaths. It probably won't be easy to pass electrical cables there.

My original plan was to stay a little bit more but my phone lost the internet connection. With no way to listen to music or podcasts, the cold weather even inside, and my motivation reaching new bottoms, I decided to call it a day and went home.

## December 4, 2020

A few days ago I mailed the co-ownership syndicate to inform them I wanted to use the attic. I received a mail from them and they were a bit shocked to learn there was a ventilation and electrical system there. Looks like the previous owner never bothered to warn the other co-owners that he was using the common parts of the building to install off-standards systems for himself.

They agreed to my demand, so I can use the attic. But the installation has to be done by a professional, I will have to pay if we damage the insulation and if anything should happen due to my installation, it will be my responsibility.

Well at least that's cleared!

## December 9, 2020

I had a hard time finding motivation all weekend and it lasted until Monday, woops. On Tuesday I had to drive Coralie to a rendezvous at the hospital in the middle of the afternoon, so no work. I took this opportunity to buy the next things I needed to continue the renovation: renovation coating, coating knifes and WD40.

Wednesday I went to the apartment and started renovating the entrance walls. A lot of small holes and scratches to fill if I want a flat wall to paint later. It was my first time doing the coating with knifes, so I watched youtube tutorials to understand how to do it. Fortunately, for me, it's a renovation coating, not a smoothing one. Seeing how hard it is already to just fill holes, I hope sanding will be enough to get a flat wall.

I spent around two and a half hours doing the entrance. It was a very enjoyable and meditative task.

Once done I went into the attic again. You can't walk on the floor because of the insulation. I had to go from one beam to another. I discovered a mess with abandoned cables, sheaths and electric boxes. But the biggest mess is the ventilation system, which is suspended to the beams and breathes out inside the attic! All the humidity, grease and dirt was ending there! What was the previous owner thinking?!

The reason I went there was to judge if I was going to pay for a new ventilation system. My initial renovation invoice had doubled with the insulation. Now with the electricity and the ventilation, it quadrupled. I had to really think about it and make a choice.

## December 11, 2020

I was called in a hurry by my father to help him move to his new house. I arrived a bit after the movers were done and helped him setting up furniture, especially the office of my step-mother. She is an independent scenographer and needs her office quick. So we built the shelves, installed the desks, a heater, a whiteboard and several other things. It was cool doing this together and I could feel he needed help and felt a bit overwhelmed so I'm glad I cam.

What I'm not glad I did was badly wounding my back. I forced too much and was unable to walk correctly for one hour. After that it was impossible to bend over, I was stuck. Nevertheless, we kept going and I arrived back home at 10 pm, feeling like my body was a boulder.

So of course, this Friday 9, I could not do any renovation. I stayed in bed most of the day, studying the quotes. In the end I decided we should redo everything. The new electrician is the same price as the first one (whom I haven't heard of again by the way) but had better ideas on how to do all this.

We're going to centralize the whole electrical system inside the kitchen, as well as the internet. A specialized box will contain all the circuit breakers, the Ethernet cables, the optic fibre cable and the modem.

For the ventilation, we're going to remove the old system from the attic. If we were to keep using it, we would have to drill a hole and add a chimney on the roof. Instead, we'll put the ventilation engine inside the toilets, using a fake ceiling to hide it. The toilets are between the bathroom and the kitchen, and next to the building natural ventilation conduct. We're going to move the ventilation from the ceiling to the walls, connecting the three rooms together and exhaust the air through the building conduct.

This way there will be nothing inside the attic anymore except for the low voltage cables. I signed the quote and paid the deposit. Adil, the new electrician, will start early in January. I'm worried about the cost but relieved everything is settled now. I now have a goal, which is finishing the walls at the same time Adil finishes the electricity.

Once that's done, the insulation will come and the last renovations should go fast. Next steps: ordering a kitchen and drawing plans for the bathroom. I have a good feeling about the latter.

## December 14, 2020

Today I went to check the result of my coating in the entrance. And I'm glad, it's not bad! I'll have to check how it looks once it's sanded but I'm happy with the result.

I thought I had filled all the holes and scratches in the entrance but turns out there's more. So I spent quite some time fixing them. I went faster than before now that I have more experience. Once it was done, I went into the corridor to begin a big coating job: an interior corner.

The previous owner had an electric cable going there, then through a wall to power an electric heater located in the next room. I removed the cable as it's going to be replaced, but the sheath was partly inside the plaster. This interior corner being on the opposite of a wall we removed, it was kind of frail and a lot of debris came off. No choice but to fill it with a lot of coating and try to make a ninety degree corner.

I asked myself what I could do next and focused on preparing the kitchen walls. There was a TON of wall plugs (Is that how they are called?) and I think I spent more than half an hour removing them all. Some were so stuck I had to cut them.

## December 15, 2020

Went to see my friend Marc to borrow two important pieces of equipment: a construction site vacuum cleaner and a giraffe sander. He was in the middle of painting a room (he's almost done renovating his own apartment) so I could not stay long. Went to the DIY store and bought glasses and a noise reduction helmet.

I was feeling good, so I thought _come on, why not start with a ceiling_?! I connected everything and started and _omagad this thing is heavy and looking at the ceiling for so long hurts my neck so much and I have less strength in my arms than I thought_. I had to go little by little, resting 5 to 10 minutes between each passage, but I made it! It took me around one hour I think. I'm happy with the result. This ceiling had had glass fabric before I removed it, and it left a lot of glue and paint chips. Everything is gone and outside a plaster rift I don't think I'll have a lot to do.

Then I went into the entrance to sand the walls I carefully coated the previous days. It... didn't go as well as I wanted. The previous owner probably put wallpaper because in some parts, the coating crackled and fell, revealing the plaster. I wanted to remove all traces of coating to have a clean plastered wall, but even the sanding machine could not remove it. The result is not that great: in some places even after sanding I have a thin thickness. I'm not sure if it will be visible once everything is painted or if I have to redo a full wall smooth coat before painting.

The place was a mess after all this sanding so I took some time to vacuum and clean. Overall I'm happy with all this but damn, it's going to be a long journey to sand all the ceilings and walls.

## December 16, 2020

I originally planned to continue sanding today but my muscles were sore. We decided to go kitchen hunting with Coralie. Marc's partner Swenn explained to me they bought their kitchen at Leroy Merlin, so I proposed we went and take a look. We spent some time there checking lights, paintings, showers, and of course kitchens. I found something I really like, Coralie, not that much but she doesn't hate it. It's dark flat panels with a wood worktop and overall wood pieces there and there.

Seeing different styles made us realize a thing we actually don't want: cabinets going from the ground to almost the ceiling. It feels too big, it makes us suffocate. We'll try having the cabinets to go higher than 1,6 to 1,8 meters. We'll be able to put plants and bottles on top of them. We still have to really think about all this as for now, we only choose the style and not the configuration.

Ikea was nearby so we went there too. In the end none of the kitchens pleased me. There's something I felt for the first time: it's so easy to identify their furniture that if I took their kitchen, it would not be _my_ kitchen but _an Ikea kitchen inside my house_. Maybe that's because of how mainstream the brand is now? Maybe because it's the default place everyone (including us) go? Either way, I don't want them even if they are good on the practical side.

We spent little time in Ikea, but it exhausted us. These shops are intentionally designed as mazes and it's incredibly taxing mentally. We got out as quick as possible and went home.

## December 17, 2020

I was still feeling tired today and decided to not sand another ceiling. Instead I moved to the first bedroom, which is fully painted in grey. I was determined to sand the walls as it seemed to me this room was one of the easiest to deal with and I wanted a victory! 

Surprise! I didn't get one! I started sanding and the paint would not come off the all. I know you are not supposed to totally remove it, just scratch so the new paint will stick. But these walls were badly painted and appear to have a big grain. I wanted to sand it off to have a flat surface and even with the girafe and an 60 millimeters grain, I could only scratch the surface. I also removed the plinths and discovered broken plaster everywhere. I managed to sand all the walls, brush and clean them after.

Then I turned my attention to this damn corridor. Again, using a cutter and a brush, I cleaned the holes and cracks. The ceiling has a lot of them, particularly because of the polystyrene plates that were glued with coat. I coated as much as I could for more than hour, then fatigue from having the arms up hit me like a truck. I think I did not more than a fifth of the corridor and it made me mad it was so slow.

I ended up thinking I should maybe just plasterboard the whole ceiling. I have dozens and dozens of holes to fix, plus the cracks. It's going to take me hours. I could just drive to the next DIY shop, buy a plasterboard and some glue and with the help of a friend, have it done in one to two hours. I'll think about it.

## December 19, 2020

My arms and back hurt so much yesterday! It felt like having ants in the hands for the whole day, so I stayed at home. Today Coralie decided to join me to finish her most favorite activity: pealing wallpaper! I'm glad she enjoys this, as I hate it. 

We worked for around 4 hours. She managed to do almost all the kitchen, as well as the last bedroom. On my side, I started fixing the plaster at the wall's bottom in the bedroom and I sanded two days ago. It took quite some time and when I was done, I proceeded to fix the little holes and cracks in the walls. But I soon discovered that... I was NOT going to enjoy these walls if they stayed this way. So I decided to remove the paint grain by coating the entire walls with a very thin layer of plaster. I only managed to do one of the walls but I was happy with the result. Now the surface doesn't show any grain or roughness. I'll sand them with a thin grain to make sure it stays flat.

While Coralie was finishing her job, I went to the kitchen and finally removed the last glass wallpaper, feeing the last wall. Again, it took time as some parts were heavily glued and hard to access.

When we went home Coralie was satisfied but exhausted. Her back and arms hurt. She went to take a shower, I cooked dinner and she went to bed at 9am.

## December 20, 2020

Back again today with Coralie. She was determined to finally remove all the wallpaper in the last corners of walls. She also fought her fear of heights and used the stepladder to get at the top of walls.

As for me, I sanded the walls in the bedroom I plastered yesterday. I used a smaller grain and it worked well, I now have a smooth wall. We went home quite early as we were tired from yesterday and wanted to have some tea.


## December 21, 2020

Today I stayed at home! I was tired and wanted to work on the kitchen plans. I think I spent something like 2 and a half hours just drawing plans and checking furniture? I'm kinda lucky overall: the kitchen is 3 meters by 3 meters and most standard furniture is 60 centimeters wide. So I know I have 5 units to chose for each wall.

But that's not so easy! Should I put the fridge on this side or this side? Is this dishwasher small enough to fit? In the end I'm starting to have an idea of how we'll occupy the space. I don't want a kitchen with furniture going all over the walls. I want them to be around 1,7 meters tall, add some pretty wood on top and finally some plants. But I'm still unsure we'll have enough storage if we don't add cupboards to the walls.

I'll have to take an appointment with a seller. Maybe there are obvious solutions I'm not seeing.

## December 22, 2020

Alone today! I want to finish the bedroom and to do so, I inspected the paint and plaster cracks in the ceiling. First it wasn't so bad. The building is 60 years old, so of course things moved and cracked. But then I found another crack, and this one... was not a crack, it was an entire one square meter of plaster that was not glued to the wall at all. So I had to remove all of it and I'll need to re-plaster it. *I'M SO SICK OF PLASTER*.

This ceiling was full of cracks and is now full of holes. Then I sanded it and it went OK. No other major discovery outside some humidity traces but I'm not surprised, I'll treat them later.


## December 23, 2020

Home alone again today. My friend Philippe agreed to help and will come tomorrow so instead of finishing the bedroom ceiling, I sanded the other bedroom. Ceiling, walls, everything! I also removed screws and plinths and cleaned everything. I inspected the ceiling in our future office. Some placed seemed cracked, but it was in fact paper! Finally a room with something made correctly. The previous owner applied a ready to paint wallpaper on this ceiling before painting.

I decided to not remove it and just fix the small holes there and there, if that's possible of course. 

## December 24, 2020

Went to the DIY store to buy more plaster, masks and cutters. Philippe joined me early in the afternoon and started to fix all the little holes and scratches in the second bedroom. As for me, I geared up again and sanded the ceiling of the bathroom. This one was easy and allowed me to check the humidity problems. Overall everything seems ok except for one corner where the bath was. I treated it with a special product and outside one or two paint cracks, I won't have a lot to do, which is a relief!

I moved to the office and removed screws and plinths. Once again the plaster behind the plinths is very old and breaks easily, so I'll have to fix it. I scratched it as much as I could to avoid falling pieces. Then I cleaned everything and we stopped early to go home and prepare dinner!

I was so happy to have help today. It's not that I mind being alone but being two, one sanding and the other plastering, makes the whole renovation project go super fast. 

## December 26, 2020

Small day! Since it's the holydays, I wanted to avoid mankind noise on a Saturday so I just went to do some plastering. I don't think I've mentioned it before but I've been listening to _Darknet Diaries_ while working, an amazing podcast telling stories about hackers, penetration testing and many other things. 

So, while listening, I plastered the holes in the first bedroom. The small ones, that are mostly paint or cracks, went ok. The big one, almost a square meter large and half a centimeter profound was super hard to work on. The bucket of plaster I bought on the 24 is almost empty and I'm not sure I made it correctly since it's hard to make a flat surface when it's so large.

I also treated again the mold traces there and there. They went easily in the kitchen where the plasterboard is easy to clean. It's more complicated in angles and plaster where some of them went off, but not all. I'll have to redo it again next time.

Went home to learn that a storm named _Bella_ will hit our city tonight. Unfortunately I didn't close the shutters so I had to go back and seal everything.

## December 28, 2020

The clock is ticking! I have the giraffe and the vacuum cleaner until January 5 so I need to get all the walls and ceilings done. 

Today I started with the third bedroom, our future office. The fixes I did on the ceiling seemed OK. I filled all the screw holes and redid all the plaster at the bottom of walls, where the plinths were. Those plasters parts were among the most broken I've seen in the apartment and it took me around an hours to do everything in the room.

Then I sanded the ceiling in the second bedroom, as well as the walls. Those are the walls Philippe worked on and I was eager to see them sanded as... It makes the walls feel so clean! It's such a joy to witness walls without holes inside them, totally smooth! But still, there were some work left to do. First, some holes escaped our vigilance, so I filled them. I also redid the plaster where the old plinths were, fixed a corner and a small crack at the ceiling. I'll probably do a smoothing plaster on these walls tomorrow as they are almost ready for it.

I finished my day with the first bedroom and was quite relieved. Most of the plaster I added to fix cracks on the ceiling is OK. The only problem is, I did not put enough, which creates some dips. It was to be expected since some parts were almost a centimeter deep. After sanding again, I cleaned with a broom and redid plaster to achieve a flat surface. I'm not 100% sure it will be good enough, maybe I'll have other fixes to do before calling it done.

Overall a productive day, which quite surprisingly I spent without listening to any music or podcast. I also finally _got_ the moves to work with plaster, and understood the importance of mixing it to make it more sticky and easy to work. Oh, talking about plaster, I'm almost at 15 kilograms of hole fixing plaster since I started the project. If I had know I would use so much, I would have bought a big bucket from the start.

## December 29, 2020

I was feeling a bit weak today and decided to move forward some tasks that didn't involved wearing a mask and carrying a gigantic sanding machine. First I tried the smoothing plaster on a wall and... it went OK I guess? This plaster is way more liquid and dries super fast, making it hard to do some corrections. I tried only applying a small coat on the first wall, and a more thick one on the second. We'll see once sanded what is the result.

After this I moved to the living room and started enlarging the ceiling cracks. There were a lot of them but fortunately, there were no big plaster surface detached from the wood blanks that compose the basis of the ceiling. I detected two huge cracks going from one side of the room to the other and enlarged them. I'll plaster them soon.

Finally, I did the same in the kitchen. There was a crack that went from the window to behind the door. It was only fixed on the surface by the previous owner. I digged deeper inside it to be sure we well have enough depth so it won't crack again. The crack also went through the light location and almost all the plaster around it came off.

I cleaned everything while listening to the Haven soundtrack by Danger, it was super cool. I also listened to the Full Stack Radio episode with DHH talking about their new web stack, it was interesting. Tomorrow I'll go buy more filling plaster (a big bucket this time!) and will restart the sanding process.


December 30, 2020

A productive day! 

It all started with a trip to the DIY shop, a trip that led to many interrogations. You see I've been using filling plaster for weeks now, always the same brand and type. Each time I thought _ok this is enough_ and each time I had to go back and buy more. So this time I was determined to buy the _BIG BUCKET_. So I arrived at the stored, rushed straight for it and, took the bigger bucket and... it was _light_. 

Like, incredibly lighter than the previous bucket I bought. I thought what the hell, is this a demo bucket? So I picked another. Light too. Is it a version where you have to put water in? No, it's written on it, paste plaster. I thought I was going nuts, so I weighed another bucket from another brand. This 3 kilograms bucket was heavier than this supposed 5 litters bucket. _WHAT IS GOING ON_. I thought forget about the bigger bucket, take the usual one... But there were none left.

Suddenly someone from the shop comes around and said "I think you have questions about plaster". So I took the bigger bucket, showed it to him and murmured _why is it so light I don't understand_. He laughs and told me it was a lighter version of the plaster. A more modern one, made of micro balls, easier to use. So I took it (it wasn't more expensive) and went to the apartment.

I was so curious I wanted to see what it looked like so I opened the bucket and found something that looked like... _Coconut foam dessert_?! I stared at this thing for almost 10 seconds in disbelief. How was this thing supposed to replace traditional plaster? But well, that's all I had so I grabbed the stepladder and decided to fill the cracked I expended on the living room ceiling. And it was... interesting? It's way easier to apply and it sticks a bit better. You also don't have to mix it as much as traditional plaster. 

I filled all the cracks in the living room, then moved to the kitchen where I did the same. On large cracks, this type of plaster is way easier to use and I was done super fast. I then moved to the bedroom with problematic ceilings, started the sander and sanded again the plaster from my previous attempts at making a flat surface. It was, again, not good on the 1 square meter part and this ceiling is starting to drive me nuts. So again, I had to re-plaster it (this time with the coconut foam type) and I hope that tomorrow, when I sand it, again, it will be the last time I have to do this (I'm angry at a ceiling, yes).

Moved to chamber 2 and started sanding the walls I plastered with smoothing plaster. I had to use a smaller grain with the sander in order to remove the small edges and holes. And it turns out the better strategy was a thin layer of this plaster, not a thick one. The thicker one had too many hollows due to my lack of skill with the spatulas. The good news is: I now have *my first smooth and ready to paint wall*! And it's so smooooooth when you touch it.

Galvanized by this incredible win, I smooth plastered the other walls of the room with a thin layer. It was hard, as the walls were way bigger and the plaster kept drying. I moved fast and was able to finish everything when the night fell.

I think I spent the whole day listening to a {https://haven-game.bandcamp.com/track/08-16-home, "single song"} from the Haven soundtrack. First, it was because I enjoyed it. Then because I was stuck with my gloves, my helmet, glasses and equipment and could not reach my phone in my pocket. But it didn't really bothered me.

Tomorrow: I'll probably prepare more walls for smoothing plaster. As I'm not supposed to do noisy renovation work on January first, I'll prepare as many walls as I can and sand them on saturday.

## December 31, 2020

Today my goal was to prepare as much walls as I could for future coating. But first, I wanted to see the result of the previous walls, so I sanded them and I was quite happy with the result. Even if there's a few scratches left in some places it's such a huge progress compared to the initial state of the walls. The damn square meter ceiling hole is getting _better_ but after sanding it, I could see it wasn't quite there too, so I had to re-plaster it again. I hope this time will be the last. As for the other ceilings, I sanded them all and except for one part where the coconut foam plaster was not dry and came off, the rest is good. I only patched a few scratches that I missed.

After this I kept sanding everything I could find. I sanded the last bedroom walls, the corridor walls, the corridor ceiling as well as the entrance. This way I'll have enough surface to plaster tomorrow. Came home earlier than I expected to celebrate the new year.

## January 1, 2021

Happy new year! It's plaster day! And damn, I had no stamina or energy when I arrived at the apartment. I was thinking of doing at least one room and the corridor, but ended up with only _one wall_. The plaster was drying faster than I could apply it, the wall being clearer than the others, it was hard to see where I already applied plaster. In some cases, I undid what I previously did and it made me angry.

After one hour and one wall I called it a day and came back home. I was tired, hungry and demotivated. I called Marc and he assured me I could probably keep the sander and the vacuum cleaner until Tuesday next week, and also take them again later if needed. I'll try to finish everything and clean by Tuesday. I want the place clean for when the electrician starts his work.

## January 3, 2021

I took a few days to rest and recharge and now... I'm okay I guess.

So today I went back and started a _plastering extravaganza_. My goal was simple: plaster as much walls as I can to be able to sand them the next day and return the vacuum cleaner to Marc on Tuesday evening. First I finished the the last bedroom walls. It took more time than I expected but overall it went well. I'm still finding this smoothing plaster hard to work sometimes. It's not liquid enough to do a small layer without, sometimes, making several layers when I scrape. 

Once I was done with this room I attacked the corridor, doing all the walls, corners, door frames. Some parts needed filling plaster before smoothing but I was so bored I decided to give it a go and see later. It took again more time than I wanted and when I finished the night was coming and I still had the entrance to do. I was starting to run out of plaster again and felt it was maybe better to stop there.

I listened to the last episode of the very good podcast _Les démons du midi_ which is about video game music. It was a very good choice.

## January 4, 2021

Today was a sanding day! The goal? Sand everything that needs it in the bedrooms and corridor and achieve a milestone. So of course I went, of course I put all my equipment, and of course I sanded the last bedroom and the corridor. I don't know if I'm getting used to it and built some muscles but I can sand for a longer period now. It's cool but at the same time it makes more muscles strains than when I was making pauses more often.

I used a small manual sander my father gave me to clean the door frames and corners, as well as some parts where I added too much plaster yesterday. The result is... not as good as the previous rooms I think. I was probably more impatient when I did the last one and the corridor. We'll see how it goes during the painting phase. If there are too much traces, I'll fix them independently instead of plastering all the wall.

I went back to this damn square mater of ceiling and this time, I gently hand sanded it. I feel the plaster if fragile and that I probably didn't employ the best method to fix this. Once I removed most of the holes and bumps, I thought... It was starting to be good. When I entered the room and look at this specific part of the ceiling, it didn't struck me as a big patch of mess like before. Still, it's not perfect yet! So I applied a thin layer of smoothing plaster on it. Maybe it will be the last coat. Crossing fingers!

Finally, I was DONE with the global sanding and plastering for the bedrooms and the corridor. There's still some things to fix there and there but overall, all walls and ceilings are ready for painting. But before that, the whole place needed a good cleaning. There was plaster dust everywhere. So much that I realized the windows where dirty and that I wrote "LOL" in the dust on one of them. 

And all this dust, it gave me a feeling of... underachievement? It didn't felt like I achieved a milestone. So I decided to clean all those rooms. I cleaned all the walls with a broom, then vacuumed all the rooms. When I did the first aspiration of dust, I realized _oh my, it's true that I bought an apartment with a black floor_. I quickly realized that, since I didn't protect the floor, I had splashes of plaster everywhere. It gave me a feeling of _undone_ that bothered my achievement sense!

So _of course_ I took a mop, water and soap, and mopped all the floors, scratching all those plaster stains. It felt like a battle, me versus those little bastards preventing me to achieve my glorious moment of finish! The mop had a too short stick and it broke my back. I think it took me around one hour and three water changes? 

BUT THIS IS IT. I HAVE CLEAN WALLS. CLEAN FLOORS. CLEAN CEILINGS. I AM THE KING OF THE WORLD!

## January 5, 2020

This is Tuesday and I have to give back the vacuum cleaner to Marc tomorrow! I decided to finish it once and for all and sanded the whole living room ceiling. It took quite some time but went way more smoothly than I thought, I was happy! I sanded the entrance ceiling too.

Once I was done I added water to my almost finished plaster bucket to make it more liquid, then plastered the entrance walls to hide the various holes and scratches. 

And now for a perfect finish... I went to the infamous bedroom with it's square meter of plaster. I once again hand sanded it to erase all traces and bumps and I was left with... a finished ceiling. I was so happy and relieved to finally be done with this.

At the end of the day the electrician called me. He will start his work Thursday next week. I can ask for the renovators to come at the end of June to put the plasterboard and finish the walls. Everything seems to be fine!

## January 6, 2020

Last day before I take a break! Sanded the entrance walls and cleaned the whole living room area, the entrance and the kitchen. It took a while, as there were a lot of furniture still hanging there. I started moving them downstairs in order to put them at the recycling center. 

But after 4 back and forth of 4 floors, I was totally beaten. I knew I should not have done that but my knee started to hurt, so I left old furniture in the staircase near my door. I hope won't bother the neighbor as it's not in his way, but I should have clean this anyway.

I'm thinking of asking friend to come and help put everything down and then I'll drive all this once and for all.

But here we are, I'm done with sanding and plaster! At least until I start doing the kitchen and bathroom. It's such a milestone and I'm so happy.

## January 8, 2020

I've been resting a lot for two days. I'm a little sick but today we decided to go back to the kitchen stores to make our final choice. We have to decide where we'll put everything and tell the electrician so he can add the power sockets.

First, we went back to the kitchen I liked. I found nothing new about it but Coralie was... reluctant! She really changed her mind about it. She found it felt cheap. I agree it's not the best kitchen in the world but since we can't spend too much, that's the best we can do.

She wanted to try other handles to see if it was better. It actually worked better for her but not for me. I think we tried or checked almost a dozen handles with different shapes, colors and sizes but something was not working. I can't believe I'm writing this. I feel so OLD with my kitchen handles problem, omagad.

We went out and concluded the best kitchen was probably a fire camp in the middle of the room with a suspended pot and laugh a lot. We didn't know what to do and Coralie needed a frame for a custom print she bought from one of our artist friend, so we went, again, to Ikea.

And that's when the most strange thing of the day happened. We went by the kitchens again, initially to see if we could combine our kitchen choice with Ikea handles. And then, while watching, we stopped by a demo kitchen that was _the total opposite_ of our tastes.

It was a clearer model, with green doors and light wood. There were no handles but knobs, in full wood. We were initially watching the knobs and suddenly we realized... this kitchen was _relaxing_. It felt lighter, gentler. We were going for anthracite doors with metal handles and now we're here with green doors and wooden knobs? What was going ong?!

We sit there in the demo space and started talking. We realized we were in a full _brutalist paradox_. It's an expression I found, mocking the fact that a lot of people like brutalist architecture (me included) but few people would be able to live in them. 

We have a kitchen with a single window on the north wall. It's one of the darkest places of the apartment and yes, adding black and anthracite furniture on two walls might make it oppressive. On the opposite side of the kitchen demo at Ikea, there was another demo place, full black with a lot of angles, straight lines. I already decided I didn't wanted this but Coralie initially liked it.

Now she looked at it and said "If I was in this kitchen during breakfast, I would have the feeling of making breakfast for the ambassador".

So there we are, stuck between what we like with our brains and what we like with our guts. Now we have to decide which side to go. That means... we still don't know which kitchen to take.



## January 9, 2020

We went _kitchen hunting_ today. Thanks to the kitchen gods, it look like all kitchen stores are located in the same area, so we decided to go. What should have been equal time spent in all the store turned into something else. Basically we went to the first one, that is more high end than the others, to get the feeling of what is the top and compare more easily after. But we were met by a seller, a young man that was very polite and natural. A former woodworker that chronic pain in hands forced him to stop, and now he sells kitchen, quite the journey. he asked for a budget. I told him one and he said it was probably not doable for his standards. So we rose the standard a bit just to see what was possible. Oh boy I was not expecting this.

He made us take the grand tour. He described _everything_. From hinges to laser soldered wood to... waterproof plinths? Everything was top quality (the furniture is guaranteed 10 years, the hinges 20 years) and he demonstrated it by literally standing inside a drawer (he was probably around 70 kilograms) and explaining other things like how everything is more sturdy thanks to specific fabrication, how everything is solvent free, and many, many other things. For a seller he was more genuine than I thought he would be.

We sat and discussed plans, electronics and other things. I explained how our main problem was having enough counter space and storage while conserving low profile furniture. I also wanted things like the oven to not be near the ground, as I'm tall and fed up about crouching all the time. He proposed to make us a plan and a 3D visualization for the next Saturday and we accepted.

This non-planned meeting took us over 2 hours! So, when we were finally out, we were exhausted and we were running out of time. The curfew was starting at 6pm, we had less than one hour to visit the other stores. So we rushed all of them, took a bit of time to discuss with people there when we could, and collect catalogs. We discovered that most sellers had the same basic prices but that options could raise the price significantly from one store to the other. 

The most important discovery, I felt, was that most people going to IKEA could actually afford more original and quality products if they just took the time to visit specific stores. It look like either IKEA is more expensive than before, or kitchen makers lowered their prices. 


## January 14, 2020

First day of electricity, I was excited! Excited but tired, as I had to wake up at 7pm to open the door at 8pm. These days I usually wake up at... 11am. 

So the three electricians arrived. We went to each room, placed every electric socket, light switch and Ethernet plugs! And right after, they started removing old sockets, cutting old wires... The metal tubes with the original electrical installation were removed and it was so satisfying. I could see the rooms without those rusted pipes, which made me feel much closer to the end of renovations (it's just a feeling, it's not done lol).

I stayed with them all morning to do more plaster. The entrance ceiling holes were filled, as well as the part of the corridor ceiling that will soon be in one of the chambers. I plan to sand them soon and maybe I'll add smooth plaster. I also fixed little things while answering questions about the apartment. 

## January 15, 2020

Small day today! We went with Coralie, so she could finish peeling the wallpapers inside the toilets. Meanwhile I started sanding the kitchen door frame and plinths to see how they reacted. My initial goal was to try to sand until the wood was visible. No luck, the wood was covered by a resin, and this resin was then painted several times over the years, resulting in a supet thick coat that all plinths and door frames have. It will be a nightmare to sand all these frames, especially because some have sculptural details.

While I was pesting and wasting sanding paper, I asked Coralie to plaster the holes inside the toilets. She was... reluctant. Actually no, she was not enjoying plaster. She accepted and finished, but when we went home I could feel she was still bothered by it. I asked and she told me she _hated_ doing plaster. It was like a gut hate! 


## January 16, 2021

Today was the big meeting to see what the kitchen maker decided. We had a meeting at 2pm and left at 5:30 pm, so it took quite a time! First he presented us with a general look and he made some changes we were surpised about.

The biggest change between my plans and his was the induction cooker and extractor hood. He positioned them on the right side, while I was putting them on the left side to keep more counter space. His idea was that the cooker plate was that it made more sense to be able to prepare your food and just reach out directly to cook them. He also made the counter go upside the drying dryer, which added counter space. The only non-counter space is the fridge in the corner near the window, the place with the least amount of light. Of cours he added several drawers, and also a free space to put the cat litter.

On the other side, there's a cellar type column 160 tall, with internal drawers to put all our food and bottles. Next to it is another column with the microwave and the oven. Both are at the top of the column, which mean I won't have to crouch to use the oven. And of course there's a sink with space on each side (nice) and under it, a closet and the dishwasher. The counter goes to the wall, between the hot water tank and the washing machine.

Once the presentation was done, we travelled through the shop to see each piece individually. I also suggested we changed the wood aspect to something clearer. The wood tone was too noisy to my taste. We also had to choose handles. I've never so _old_ than when it took us 20 minutes to choose handles for kitchen cabinets. We also saw the oven, extractor and other things.

And finally, the price. It was, of course, expensive. Not much more than going to IKEA, probably a quarter more expensive I think. I was prepared for the price and overall the maker respected our budget. But I wasn't sure. It felt like a caprice to spend more money than necessary. It felt unreasonable. We had to take some time with Coralie to talk about this, which the kitchen maker agreed. She told me deciding right now, without going to other shops to ask for more quotes, was probably not the right thing to do. And of course she was right. 

But I liked it. 

It's stupid, we're talking about a kitchen. But I felt this proposal would make this space practical and relaxing. I liked this idea. I've always had this issue that I feel I don't deserve better, just the norm. That I should not even try making it better, and accept that this is how things are. A kitchen is just the place where you cook, why bother making it better? An old habit of my money-less days of thinking about practicality without considering my own well-being, tastes and desires. At this moment, I felt I should not fall into this self-deprecation trap.

Also, the kitchen maker took time and found solutions to most of our problems while respecting the budget I asked. He exceeded my expectations. I felt his professionalism and service deserved payment. Thanks to him, we knew how to fix our problems. Leaving and asking the same thing to someone else for cheaper using his expertise would be extremely unrespectful. As a former seller that had his fair share of bad clients, and as a professional that thinks expertise and service deserves payment, I didn't want to this kind of people I despise.

I know a lot of people don't have this chance, but I can do freelancing, high paying work when I need money. I prefer working a few days more to earn money, instead of losing several hours in different stores, create a contest between them, waste everyone's time, compare quotes, hunt for the lowest price on the internet, and finally announce who is the _winner_. Organizing a competition to save a bit of money is not my thing. 

And finally, I decided upfront when I bought the apartment that this whole project should be done respecting my own standards, way of thinking, physical and mental capabilities. I've spent a lot of time and money already to do things in what I consider is the right way of renovating this place. I did not cover broken walls, I fixed them. I decided to insulte to prevent humidity problems, not hide them with paint. I'm fixing the electricity so it can last and be safe. 

So why was I trying to compromise for the kitchen? 

So yeah, I went back and accepted the quote. The maker will come monday to make measurements. I'll have a green tea, long lasting, eco-friendly, made in France kitchen. I felt it was the right choice.


## January 18, 2021

I went to the apartment this morning to open the door for the kitchen maker so he can take measurements for the furniture. While he was working I started removing plinths from the door frames. Behind them I found the junction between the walls and the wooden door frame. It's most of the time in good shape but the wood clearly moved in some parts, leading to gaps.

I removed the frame inside the kitchen, sanded it and plastered it. I'm not sure how it will look like so I'll let it rest for two days and then go back and sand and see if I enjoy the result. I hope I will, as I don't want to sand all those door frame plinths.

When the kitchen maker was done I left.


## January 26, 2021

I came back from a family reunion (the first since August) with a new tool: a small electric sander! I borrowed it from my mother. It's the type that looks like a small iron. I was skeptical but it was suuuuuuuuuch a good tool!

Today I went to the apartment with the goal of sanding door frames. I finished the kitchen's frame and doors, it went way smoothly than before. I then proceeded to the corridor door and door frame. It takes a lot of time and sandpaper but it's actually not hard on the muscles and it vibrates way less than with the previous sander.

I also removed more plinths around the door frames and added or sanded plaster. Overall it's starting to look great and I think once painted with the same color as walls, everything will look super fresh. Well, I still have 5 doors to do but that's a start!

## January 28, 2021

Today I went while the electricians were present. They are progressing well and doing a very nice job. Almost all trenches are done, a lot of them already have the cables in and all the light holes are done in the ceilings. While they were working I sanded the entrance door, removed cleats from walls in the living room, fixed several cracks I missed there and there and continued sanding more door frames or plastering them.

When we all left (curfew is 6pm due to COVID) I was happy with the progress we all made. It also gives more courage when not working alone. I've felt a bit down these past few weeks, which explains why I did not work as much as I should have in the apartment. But seing the electricity getting done is really boosting me.

But the other trouble is actually having the artisans come back for the walls, the door frame, the tiling and other things. Without their work done, I can't start painting and I want to get it done by mid-February and focus on the bathroom before March comes. It's going to be tight.

## February 4, 2021

So, where to begin...

I finally managed to get the artisans on the phone on Monday 1st. Turns out they were ready and were going to come on Thursday! I told the electricians that everyone would be here on the same day and would finally be able to discuss how to finish the walls!

Comes Thursday and I'm there around 8am. One of the electricians has come to take some tools and needs to leave for another house (they are so busy it's frightening). The plasterer, his apprentice and the project manager were also there, so I opened the doors and they started bringing their tools and huge swats of plaster. We made another tour to check everything. 

We were supposed to remove tiles from a wall in the kitchen. The project manager did not know it was plaster behind and told me it was going to destroy the wall to remove them. He proposed we glue new plaster on top of the existing tiles. I said no, what the hell, no, I don't want to hide mess, I want it fixed. Then he concluded, removing the plaster and adding a new one is the only option. He agrees to put new plaster for the same initial price of removing the tiles, but I have to remove the existing wall and the tiles by myself. I agree and around 9:30am I leave, go home and ate breakfast.

My mission of the day was to find doors for a closet we are building in the entrance. I wanted folding doors and had a hard time finding affordable ones as it sometimes went up to 400 euros for two doors! So I went to two furniture stores and found literally nothing. IKEA was near, I drove there and discovered the entire store was closed because of COVID restrictions (the store is 23k square meters, 3k meters too much).

Disappointed, I went back to my car, grabbed my phone, texted my partner that _doors are a pain_ and then visited IKEA's website. I found was I was looking for, went back to the store and it turns out even the drive had to close and only deliveries were possible. Even more disappointed, I went back to the apartment to see how things were going and warn them we might not have a door quickly.

There were so many people! Three artisans and two electricians were working at the same time, gluing plaster walls, filling trenches... It was crazy! And quite cool, it motivated me! After explaining my door problems to the plasterer, he suggested I went back to the furniture shops to see if they had normal 63 centimeters doors (it's a standard) with framing. We could use this instead of creating the whole thing ourselves.

I went home to eat lunch, I also checked a bit more the IKEA store but could not find the right size. So, again, back to the furniture store. Went directly to the carpentry part and discovered there were... no more doors to sell. _WHY ARE DOORS SO HARD TO BUY???_. I went to another store, no doors left too. Finally, I went to a third store and no more luck. 

While doing this, I was also trying to find clipsable laminated floor tiles to fill holes in the floor and it turns out my color does not exist, that there is no standard for the clipsable part and that, if you are not lucky, they won't have the same width.

Anyway, I went back to the apartment to see the progress to fix my mood. They were going so fast! Half of the rooms were done. Suddenly I realized that tomorrow morning, the plastered had to _add a freaking door in my corridor and there was no door in sight_. I asked if he wanted me to bring a door with a frame, he said well yeah, why not, a door with a frame is easier.

I drove home and booted my computer, thinking that if there was no doors in my city, there might be some doors in the nearest one. At this point my brain had stopped functioning properly, I was exhausted and _I NEEDED DOORS_. Well guess what? I found them! Turns out there was some stock of other models in two different stores, a bit more expensive than the ones I wanted, but not by much.

Feeling lucky, I clicked to order, choose the drive pickup for the next morning. One door at 10am, the other at 10:30am. Relieved, I went to shower and told my partner _I found doors_. Then she reminded me I had to drive her somewhere at 11am. And that I can't store two doors in the car with her sitting on the passenger seat. So, I'll have to deliver my doors _before_ driving her.

_BUT WAIT THERE'S MORE_.

I have a broken built-in oven in the back of the car already. I can't store an oven, two doors and a girlfriend in my car, it's not going to fit. So first thing in the morning, I have to drive to the recycling center to drop this oven, drive to the first shop to pick a door, to the second shop to pick a second door, drop the doors at the apartment and _then_ I'll drive my partner. All this in less then two hours.

And what does my non-functioning, door-obsessed brain concludes from thi situation? _This is fine_.

I go to bed exhausted.

## February 5, 2021

I wake up at 1am. I think about my doors. 

I have a sudden realization: I picked the wrong door for the closet. I picked a left opening door but the door is turned 180 degrees in the closet, so I needed a right opening door. I have to change my order quickly. I boot my phone. An updated was installed. I have to enter my pin code. I mess up my pin code 3 times, now my sim card is blocked. I go on wifi.

Turns out I can't cancel my order. I have to make a phone call for this. The shop opens at 9am. But I won't be able to make a phone call, I blocked my phone sim card. So I have to login to my phone's carrier website to find the recovery phone. While trying to access the section of the website, a popup asks me to change my password. I don't want to change my password, but there's nothing to close the popup. I try several times but I can't close it. I changed my password. I access my PUK code. I enter the PUK code. My sim card is unlocked. I'll be able to phone the store tomorrow. I change the alarm hour to 9am to sleep a bit more.

I wake up at 8:30am. I think about my doors.

I call the shop and cancels the door order. The lady is super nice, it's done in five minutes. I'm ready to order a door that opens to the right. But wait. Is this kind of door _really_ what I want. I'll have visible hinges. I don't want visible hinges. Hinges are ugly. I should not order a new door. I should go back to my initial IKEA plan. Yes, that's it, I'm doing this. I'll order a door without frame on IKEA's website and have it delivered.

While I'm trying to make coffee, I start to realize this whole plan of oven dropping, door picking, door dropping, girlfriend picking, girlfriend dropping might be a little too complicated to do in two hours (and that's with one door removed from the equation). So I cancel my drive picking for the second door, thinking I'll phone them to change the hour. While bread is toasting, I try to call the shop, but nobody answers. I decide I'll go ask them directly.

Coralie wakes up while I'm trying to order a door on IKEA's website for the closet. When I'm ready to checkout, the delivery date indicates February 17. 17 like in two weeks. BUT I NEED A DOOR _NOW_. The website indicates me the nearest opened IKEA. It's a two and half hour drive. Still not fully woken, I conclude that, _this is fine_. When I explain this to my partner, she looks at me without understanding everything except I'm planning to drive 5 hours to pick _a door_. So she asks, _why don't you just buy a wood plank?_ 

I look at her in disbelief for a moment then realize: she is a _GENIUS_. I can sand and paint this wood plank. This is it! Now all I have to do is just drive her to her appointment, drop the oven, drive her back, pick and deliver my door and my wood plank. Bingo! What an organized person I am! I drive her and go to the recycling center. I drop the oven (actually there was _two_ ovens but that's a long story, don't ask please) and drive to the apartment. I want to ask the plasterer if a wooden plank is OK for him. I park, walk through the stairs and open the door...

I walk in at 11:30. I find a door lying on the ground of my apartment.

At this very moment, my mind froze. There's a door. The exact same one I have to pick. It's already there. Why is it there? I walk to the plasterer and asks him why there's a door. He says the project manager dropped it in the morning. Didn't I received a text with a picture of the door? No I did not. I explain to him I already bought a door. He says this is unfortunate. Oh and by the way, the plaster in my bathroom was rotten so he had to remove it and re-plaster. Since it's out of the contract and took too much time, he asks me to move down the rubble for him so he can finish what was planned today. I accept.

I drive to the store. I'm still in shock. I go to the reception and explains to them I have too many doors. They are not sure what I'm talking about. I say I need to cancel my door order. They accept and say there's no problem. The lady is funny, she walks to the storage to cancel my order. When she gets back, she says it took 45 minutes to find this door in the storage. I tell her that contrary to me, at least they found the right door and now they know where it is. She laughs.

I go back inside the shop to buy my floor tiles. I pick the closest color. The demo tile says it's 19 centimeters wide. I have to bother someone to get a packet of them. I buy it. When I go back to the car, I think to myself that _those tiles actually don't look super wide_. I measure them. They are 16 centimeters wide. I picked the wrong size. I resist the urge to kick my car.

It's too late to change the tiles, I go pick Coralie. While driving I explain something about doors and tiles. She's not sure she understands what's going on. I drop her home and go eat with friends. We pick burgers. I'm with my dirty, working clothes. I look tired. They ask me how renovations are going.

I tell them I ordered two doors, ended up with three doors but that I actually needed one door. 

They look at me and laugh. We go eat on a public place with stairs. We talk about work and stuff. It's cool to eat outside and feeling the sun on my skin. I relax a little bit. They have to go back to work. I'm a bit sad, it was too short. I drive home and pick my 100 liters trash can. Coralie comes with me to the apartment. She wants to see the progress, and will then be on her way to buy some stuff.

Once the visit is done and she's gone, I start picking the rubble and dropping it my trash can. Turns out plaster and tiling is _heavy_. I think I did 5 or 6 trips from the fourth floor to bring everything down. I did not have anything else than paper grocery store bags, so I put the rubble there. Around 4:30pm I'm done and prepare myself to go to the recycling center. 

We talk about the closet and, knowing I will use a wood plank for the door, the project manager asks me to buy cleats to reinforce the rails that will support the door. It's not like I have any choice, so I agree, of course. I go to the recycling center and drops everything into the right containers. 

It's almost curfew time. I use the last remaining minutes to go to the store and buy a big hammer and check for the wood planks. There are no wood planks left. I can't make my closet door. I have no energy left to change my floor tiles, that will wait. I go out with my hammer, drive to the apartment. I'm tired and frustrated. I pick the hammer and punches a few holes in the kitchen wall. 

I drive home. Coralie is there. She bought beer and snacks so we could relax together in the sofa. I shower and we drink together. She says she doesn't understand anything about my current door situation. _It's okay_ I say. _I'll find a wood plank tomorrow_.

I have no door and I must scream.

## February 06, 2021

After a small breakfast I talk about the wood plank problem with Coralie. We think about a way of doing a lighter door and decide we could probably use slim MDF to sandwich a polystyrene plank, and reinforce all this with a wood frame. I like this idea and around 1pm I go to the furniture store and buy everything I need.

Once I'm in the apartment I prepare everything. I lay down the MDF plank, cut wood lintels the right size, add glue and put everything together. I lay a plaster board plank on it and go searching for anything heavy. Plaster bags, trash bags, a vacuum cleaner, a cupboard. I lay everything on it and turn my attention to the kitchen.

I start hammering the wall and it goes down fairly well. The parts with tiles are more solid but overall, everything goes according to plan. What takes more time is filling the trash can with rubble and walking it down, then transfering it into bags and into the car. I think I did 500 liters of rubble with this wall, so five up and downs. 

Around 4:30pm I prepared the polystyrene and added it to the door, using a special glue. Then of course, more wood glue on the frame, the next MDF plank, and more weight on top of everything. I'm a little worried the weight might not be enough but we'll see.

Around 5:15pm all the ruble was in my car, I left for the recycling center. On the road my phone played _Don't stop believing_ by Journey and I started singing like a maniac. On the way back I felt I needed something to give me energy until I crossed the finish line. 

So I blasted Nickelback.

## February 8, 2021

Woke up early as plasterers were supposed to come today. They did not show up except for gathering equipment and go to another construction site, which made me quite mad. 

But well, I had my fair share of work. When I arrived my main problem was to get rid of the wood beams fixed to walls. I tried unscrewing them with no luck, everything was too tight. I tried cutting them with my saw, they were too hard. So I did what every person in this kind of situation do: I phoned my dad.

Next thing I know, I was in my car for one hour and a half, playing Rage Against The Machine, en route to my dad's place to gather some tools. I arrived right for lunch. We ate all together and right after I took some of his tools. We discussed the possibility to do the plumbing together and he agreed to help on Wednesday. I went back home and started cutting everything with the angle grinder. Most of the beams came off pretty easily! Turns out having good equipment helps when doing renovation!

While cutting the beams I also gained access to the old gaz conducts. I thought about cutting them but was unsure. What if by _any chance_ there was some gaz left? I could blow up the apartment! And die! I was already tired and my anxiety started to peek.

I went to see my neighbor to ask him about the gaz. Turns out it's illegal to have electric heating in this building because the wiring is not strong enough to support all the apartments using electric heating. I didn't know that, and can now add it to my list of illegal things the previous owner did.

But well, actually there was no gaz going to my apartment anymore of course. The main pipe in the staircase was not connected to a gas meter. There was a giant *CONDEMNED DEVICE* on the pipe. And the other pipe that was supposed to be connected to a gas meter and go to my apartment was also closed. There was also a number, 54, to indicate the number of the apartment. 54 is mine.

So I went on, took the angle grinder and cut the pipe that was coming in my corridor. It was actually the only visible pipe left visible so I was glade to remove it. My anxiety started to play with me while I was cutting. Cutting copper produces a smell, and my brain kept confusing it with a gaz smell. So right after cutting, I was half-panicking, thinking _gaz is leaking I'm gonna die and kill everyone in the building_. 

Of course there was no gaz. But I was so panicked I used some hardened plaster and filled the gaz pipes, _just in case_. When I was done I went home and during the evening I kept wondering _if I come back tomorrow and the building exploded it's gonna be my fault_.

## February 9, 2021

Super tired. Nothing fancy today. It was super cold so I just went to the apartment to take detailed pictures of the pipes for my dad. I also cleaned a little bit and fixed holes between cinder blocks to avoid air flows.

## February 10, 2021

My dad arrived around 9am. He had all the equipment needed including a soldering station. If you don't know, a soldering station is composed of a bottle of acetylene, a bottle of oxygen, pipes and a torch (there's actually more things than that). Most plumber have portable kits. My father use his soldering station in his own workshop with a chariot. So his bottles are around 1,2 meter tall. And they weight a ton. And my apartment is on the fourth floor. And there's no elevator. 

Surely you know what that means right? Yup, moving two steel bottles in a row. It was _hard_. Worse of all, if I can endure some physical pain because I'm young despite being as muscular as a shrimp, my dad is 64 years old, worked manually for 50 years, and now has half of his body broken. The reason we decided to do this so suddenly is because of a chirurgical intervention he'll endure the next week, which will force rest on him for two months.

So we had to take care of each other and we had to finish today. First we made a plan about the setup I wanted. Basically I want every water supply pipe under the sink, so you don't have to move home appliances to access them. That means grouping everything inside a 60 centimeters place. I also wanted two new supply pipes in the bathroom.

Once the plans were set, we went to the furniture shop and picked everything we needed. Most of it was copper joints and pipes, as well as wall fixations. I was initially planning to do all this by myself and I realize now how foolish I was to just think about this. You need experience to avoid basic mistakes. There are several type of connectors, in different sizes. Some require soldering, others don't.

We went back home and started cutting and soldering. My dad did most of the soldering while I was keeping pipes straight for him. It went pretty well, we only missed a few pieces to close old supply pipes. The furniture store didn't have them, so we had to go to another one, wasting a bit of time. On the way back we bought some sandwiches. Overall we were having a good time, things were moving as we expected.

But after eating, everything changed. We had ONE pipe to solder left. And that's when the oxygen bottle was empty. The flame became pure acetylene, burning the pipe. We tried to finish, but it didn't worked out. We were supposed to finish at 4pm so my dad could go home before curfew. It was 2:30pm and we didn't have anything to solder. So where do you find oxygen bottles here?!

I searched and found a supplier. As with traditional gaz bottles, we had to move the empty bottle down. Then we went to the supplier location but they were not selling directly. They gave us the a store address, on the other side of the city. We went there, bought the new bottle and went back home. Of course we had, AGAIN, to move the bottle in the stairs up to the fourth floor. For ONE weld.

Once everything was connected, we cleaned the pipes and welded the last pipe. We put water back in the system. The weld was leaking. My dad was super mad! He was already feeling exhausted and his body hurt. While he was finishing the bathroom he made a mistake a cut the wrong pipe, which gave him extra work.

I left him there and rushed to the furniture store again. I bought an extension pipe called a police hat. We cut and put it in position. Everything seemed ok. Except it was now past curfew time. My dad could not go home and we had two more welds to do. 

We were tired so I told him to just come and sleep at home. He agreed, we went home, had a nice dinner. He talked about how it was going to be super hard to move in by the end of march, considering the plasterers were late on schedule, that the bathroom was not done and the kitchen not finished. I agreed, called my current landlord to ask him if we could stay one more month. He said no problem. 

So here we go, we now have one more month to finish this. I'm both relieved and annoyed.

## February 11, 2021

We woke up early, ate breakfast and went to the apartment. There we met with the electricians. They were removing the excess electric pipes and doing plaster in the trenches. I asked them to put a mask on while my dad was here, as he cannot have the operation if he has COVID. They all agreed, and we all went back to work.

Soldering went... super great actually. In 20 minutes everything was done. We put the water in the pipes and no leaks! It's done! I was so happy! 

Just when we were celebrating our victory, we looked outside and discovered... snow. It was snowing. HARD. Like **VERY HARD**. Sticking to the road snowing. We grabbed all my father tools (including those two damn bottles!), charged his truck and on the road he went! I asked him to be careful and thanked him.

I went up, we discussed renovations with the electrician. I thanked them about not making a fuss for the masks. I was tired by feeling quite fresh for some reason. I cleaned my tools and went home. It was Thursday and I had a technical test to deliver on Friday. I was working on it in the evenings during the week and decided I should give it more thought while I had time.

## February 12, 2021

Today I went back to the apartment in the middle of the afternoon, after sending my technical assignement, to work on the exhaust pipes. I took some time to make plans and went to the furniture store, again. I bought all I needed and went back home directly.

## February 13, 2021

I went to another furniture store to buy fixation clips for my exhaustion pipes. I accidentally met with a good friend and we discussed renovations and took news from each other. It was good to see a familiar face, I miss friends so much. I took my clips and went home.

The first thing I did was fixing the supply pipes on the walls. Everything was wobbling and that's not something you want as it produces loud sounds when pouring water. It took me around one hour to secure all the pipes. Then I started working on this thing and... well I won't make a very good plumber because my original plans did not take the supply pipes into account.

Overall I managed to do two thirds of an initial installation. I had a hard time finding space to make everything fit in those 60 centimeters. It was also complicated to have a steep enough main exhaust pipe. The previous owner made a mess with a pipe laying on the ground and water had to go up to reach the building exhaust pipe. 

I think I'm good but I was starting to feel tired and cold, and had a hard time visualizing how everything was going to fit together with the new plaster wall that will eventually cover all this. If the pipes bump out too much I could lose a lot of space. I'll finish tomorrow or the day after tomorrow.

====

NAME: The apartment
HOST: Knowledge
BREF: A listing of things related to my apartment
PRIV: true
BODY:

# Appartement

L'immeuble a été construit en 1957 pour un ensemble de lots ayant été construits de 1949 à 1960. L'immeuble est composé de béton pour sa structure et de brique rouge pour la division des pièces. Les plafonds sont du lattis. Les finitions sont essentiellement du plâtre couvert d'un enduit de lissage.

## État de l'appartement lors de l'acquisition en 2020

Voici le détail de l'état de l'appartement, pièce par pièce.

### Entrée

? Plafond : Plaques de polystyrène collées avec de l'enduit.
? Murs : Papier peint collé sur le plâtre et l'enduit.
? Sol : Parquet flottant posé sur le parquet d'origine.
? Plinthes : Collées au mur, de couleur noire, en carton compressé.
? Cadres de porte : Bois peint en blanc .
? Portes : Celle de la cuisine est à droite et pleine. Double porte vitrée donnant sur le salon sur la gauche. Porte pleine vers le couloir en face.
? Électricité : Un interrupteur sur la gauche en entrant active la lumière.
? Autres : Interphone vidéo récent, sonnette d'origine.

Observations : aucune.

### Couloir

? Plafond : Plaques de polystyrène collées avec de l'enduit.
? Murs : Papier peint collé sur le plâtre et l'enduit.
? Sol : Parquet flottant posé sur le parquet d'origine.
? Plinthes : Collées au mur, de couleur noire, en carton compressé.
? Cadres de porte : Bois peint en blanc.
? Portes : Trois portes à droites, toutes pleines, donnent respectivement sur les toilettes, la salle de bain et la première chambre. Deux à gauche donnent sur deux chambres. Au fond, une porte donne sur un placard.
? Électricité : Un interrupteur sur la gauche en entrant active la lumière du couloir.
? Autres : Une goulotte électrique descend depuis l'angle gauche en entrant. Elle contient un fil qui traverse le mur pour aller dans le salon alimenter un radiateur.

Observations : aucune.

### Salon

? Plafond : Plâtré et peint, de nombreuses craquelures visibles allant des baies vitrées jusqu'au couloir. Plafond repeint par endroits, notamment là où se trouvent les radiateurs.
? Murs : Enduit avec une matière donnant un aspect rustique. Couleur beige. Un des murs a été recouvert de fausses pierres. Un des murs présente des craquelures dans cet enduit. Présence de renfoncements servant d'étagères. Luminaires directement sur le mur.
? Sol : Parquet flottant posé sur le parquet d'origine.
? Plinthes : Collées au mur, de couleur noire, en carton compressé.
? Cadres de porte : Bois peint en blanc .
? Porte : peintes en blanc, tachées.
? Électricité : Plusieurs prises à gauche lors qu'on entre, le long du renfoncement ainsi que dans le mur de fausses pierres. Prise avec radiateur branché dessus à gauche de la première baie vitrée. Prise entre les deux baies vitrées. Prises condamnées dans le renfoncement à droite de la baie vitrée. A gauche de la porte présence d'un radiateur branché sur une prise de courant. Interrupteur à gauche en entrant pour les appliques. Encore plus à gauche, second interrupteur pour le plafonnier.
? Autres : Deux volets roulants. Le premier présente des traces de rouille et de rafistolage. Le second est en meilleur état.

Observations : les prises côté baie vitrées utilisent du fil souple et n'ont pas la terre, ce qui n'est pas aux normes. Les autres prises ont du fil aux normes et la terre.

### Cuisine 

? Plafond : Toile de verre collée et peinte. Vieille peinture écaillée. Par endroits la toile de verre se décolle. Présence d'une bouche d'aération VMC au plafond. Traces de moisissures dans les angles donnant sur l'extérieur.
? Murs : Papier peint collé sur du placo spécial cuisine (bleu). Toile de verre au dessus de carrelage là où se trouvait le plan de travail. Traces d'humidités avec papier peint qui se décolle sur le mur nord. Derrière les meubles se trouvent du placo et des planches de bois cachant l'accès à un renfoncement où se trouve l'électricité pour le matériel de cuisine.
? Sol : Carrelage blanc gris, état correct.
? Plinthes : En faience, collées au mur.
? Cadres de porte : Bois peint en blanc .
? Porte : peinte en blanc, tachée à l'intérieur.
? Électricité : Tableau électrique avec de nombreuses gaines partant dans le plafond. Une goulotte longe le plafond et le mur sur pour alimenter la partie ouest de la cuisine et notamment le chauffe eau. Présence de nombreuses prises dans le mur Est et le mur Ouest, radiateur sous la fenêtre.
? Autres : Chauffe eau, four et plaque à induction encastrées, évier, plan de travail à gauche. Placards et plan de travail à droite.

Observations : aucune.

### Placard

? Plafond : plâtré et peint, pas craquelures visible, présence d'un conduit de VMC.
? Murs : Papiers peints, traces d'humiditiés sur le mur ouest.
? Sol : Parquet flottant posé sur le parquet d'origine.
? Plinthes : Collées au mur, de couleur noire, en carton compressé.
? Cadres de porte : Bois peint en blanc.
? Porte : peintes en blanc, tachées.
? Électricité : Interrupteur à gauche alimenté par du fil venant du plafond par une goulotte. Prise électrique et boîtier électrique sur le mur ouest.
? Autres : rien.

Observations : aucune.

### Chambre 1 (première à gauche)

? Plafond : Probablement plâtré, a été recouvert d'un papier à peindre puis peint en blanc. Fissuré par endroit. Présence de moisissures dans les angles donnant sur l'extérieur.
? Murs : Papiers peints repeints, traces d'humiditiés sur le mur sur.
? Sol : Parquet flottant posé sur le parquet d'origine.
? Plinthes : Collées au mur, de couleur noire, en carton compressé.
? Cadres de porte : Bois peint en blanc.
? Porte : peinte en blanc.
? Électricité : Interrupteur à gauche. Dans l'angle nord-est, une goulotte descend du plafond jusqu'au sol, puis fait le tour de la pièce. De nombreuses prises y sont raccordées, dont une qui alimente un radiateur sur le mur Est. Présence d'un conduit de cheminée désaffecté et bouché. Présence d'une gaine électrique et d'un cable électrique souple descendant du plafond pour aller se ficher dans le boîtier électrique.
? Autres : Rien.

Observations : aucune.

### Chambre 2 (seconde à gauche)

? Plafond : plâtré et peint, une seule craquelure proche du mur sud.
? Murs : Papiers peints sur les murs Est et Nord, lambris sur les murs Ouest et Sud.
? Sol : Parquet flottant posé sur le parquet d'origine.
? Plinthes : Collées au mur, de couleur noire, en carton compressé. Uniquement sur les murs Nord et Est.
? Cadres de porte : Bois peint en blanc.
? Porte : peinte en blanc.
? Électricité : Interrupteur à droite en entrant. Prise de courant sur le mur Est. Nombreuses prises le long du mur Ouest et Sud, dans le lambris. Présence d'un radiateur sur le mur Ouest.
? Autres : Présence du cable de fibre optique descendant depuis le plafond à l'angle Ouest/Nord.

Observations : aucune.

### Chambre 3 (à droite)

? Plafond : plâtré et peint, nombreuses craquelures un peu partout, traces d'humidité dans l'angle Nord Est. Présence d'un conduit de VMC près de la fenêtre.
? Murs : Murs peints en gris. État mitigé, présence de nombreux creux et trous que la peinture semble vouloir cacher.
? Sol : Parquet flottant posé sur le parquet d'origine.
? Plinthes : Collées au mur, de couleur noire, en carton compressé. Uniquement sur les murs Nord et Est.
? Cadres de porte : Bois peint en blanc.
? Porte : peinte en blanc.
? Électricité : Interrupteur à gauche en entrant. Cable dans goulotte descendant le long de l'angle Sud Ouest. Ce cable fait le tour de la pièce (sauf sur le mur Est) afin d'ajouter des prises. L'une d'entre-elles alimente un radiateur positionné sous la fenêtre.
? Autres : Rien.

Observations : aucune.

### Salle de bain

? Plafond : plâtré et peint, présence de moisissures nettoyées à la va vite à l'éponge. Conduit de VMC au-dessus de la baignoire. Craquelures.
? Murs : Faience collée, lamelles plastiques collées, le tout sur placo.
? Sol : Carrelage.
? Plinthes : Faience.
? Cadres de porte : Bois peint en blanc.
? Porte : peinte en blanc.
? Électricité : Interrupteur à droite en entrant. Prise de courant sur le mur Sud. Radiateur sèche serviette sur le mur Ouest, branché à une prise de courant.
? Autres : Baignoire le long du mur Nord, meuble de salle de bain sur le mur Est.

Observations : Grosses traces de moisissures un peu partout, pièce très peu entretenue globalement.

### Toilettes

? Plafond : plâtré et peint, conduit de VMC.
? Murs : Papiers peints sur tous les murs. Grille de ventilation naturelle obstruée.
? Sol : Carrelage.
? Plinthes : Faience.
? Cadres de porte : Bois peint en blanc.
? Porte : peinte en blanc.
? Électricité : Interrupteur à gauche en entrant.
? Autres : Toilettes et chasse d'eau fonctionnelles, arrivée d'eau de l'immeuble avec le compteur.

Observations : aucune.


## Constatations après mise à nu de l'appartement.

Les travaux suivants on été effectués pour mettre à nu l'appartement :

- retrait des papiers peint, toiles de verre et plaques de polystyrène
- nettoyage et ponçage des plafonds et murs
- suppression du mur reliant le couloir et le salon
- suppression du placard afin d'agrandir la chambre 2
- retrait des meubles de cuisine, de salle de bain ainsi que de la baignoire

### Électricité

L'appartement compte deux systèmes électriques. Le premier date de la construction et certaines parties ont été mise à nu par la destruction de murs. Les gaines sont en métal, passent par les combles et sous le parquet d'origine. Ce réseau électrique ne comprend pas la terre sauf dans les salles d'eau.

Le second réseau électrique a été ajouté par dessus le premier afin d'ajouter la terre dans toutes les pièces. C'est la raison de la présence de nombreuses goulottes électriques descendant du plafond dans presque toutes les pièces. Ce système passe par les combles et revient au tableau électrique.

Le tableau électrique est dangereux. Il comporte des disjoncteurs divisionnaires de 25 ampères pour des circuits tels que les prises électriques (16 ampères en temps normal). C'est beaucoup trop élevé : une charge trop importante ne déclencherait pas le disjoncteur mais ferait fondre les cables électriques. Comme les radiateurs sont branchés sur les prises, le risque est d'autant plus important que les fils prennent trop de charge.

Or comme ce second réseau électrique passe par les combles, combles qui sont recouvertes de laine soufflée, même avec une gaine, le risque d'incendie est élevé. Notons aussi que tout ce qui est matériel électrique de cuisine n'a pas l'ampérage correct non plus. Aussi bien le four que la plaque à induction présentent le même risque.

Il est impossible de garder cette seconde installation, et impossible d'utiliser l'ancienne. Il faut donc tout refaire.

### Ventilation

Le système de VMC passe par les combles. Il comporte 5 conduits (placard, chambre 3, cuisine, salle de bain, toilettes) tous reliés à un moteur d'aspiration. Le souci de cette installation c'est qu'elle se déverse directement dans les combles au lieu d'être évacuée par une cheminée, ce qui est totalement illégal. Les moteurs de VMC sont aussi la principale cause d'incendies, et dans les parties communes remplies de laine, ce n'est pas raisonnable. Il va donc falloir tout changer.

A noter que le syndic de copropriété n'était pas au courant de la présence de la VMC dans les combles, ni de la présence du second réseau électrique.

### Humidité

L'appartement présente beaucoup de traces d'humidité. Si cela se comprend dans la salle de bain, la présence de la VMC dans une des chambres et dans le placard sous-entend un problème plus important. Il faudra donc songer à améliorer l'isolation de ces pièces. Pour la salle de bain, prévoir des enduits et peintures spéciales contre l'humidité.

Dans la chambre 2, le plâtre derrière le lambris est dans un piètre état notamment à cause de l'humidité. Des pans entiers se décollent, les traces d'humidité sont légion. Globalement les murs des chambres donnant sur l'extérieur sont froids au toucher et à l'exception de la chambre 3 qui a été repeinte, le plâtre est probablement celui d'origine.

Il faut donc envisager des solutions pour isoler ces pièces afin de réduire l'humidité et le froid, au lieu d'utiliser une VMC.

### Murs 

La plupart des murs sont dans un état moyen. Sous le papier peint on découvre énormément de trous, creux, chevilles. Les traces de colle sont également légion et tenaces. Il va falloir tout poncer et ré-enduire. 

A noter que dans la salle de bain, les murs sont doublés en placo mais irrécupérables. La colle utilisée pour les dalles plastiques est impossible à retirer, tandis que la faience a été collée directement sur le placo. Toute la pièce devra donc être refaite au placo à nouveau, probablement collé directement sur le placo existant. Cela pourrait améliorer l'isolation mais augmentera aussi l'épaisseur des murs.


## Travaux effectués

### Entrée

### Couloir

### Salon

### Cuisine

### Salle de bain

### Toilettes

### Placard

### Chambre 1

### Chambre 2

### Chambre 3

====

NAME: Whiteboard
HOST: Knowledge
BREF: Where I put temporary informations
PRIV: false
BODY:

# Whiteboard

This page references temporary things I need to store somewhere. Consider it like my post-it wall.

Things I need to study or try:

- {https://tailwindcss.com/, "Tailwind"}
- {https://www.youtube.com/watch?v=LnapsmokM_4, "Simulating color vision deficiencies in the Blink Renderer (BlinkOn 13)"}
- {https://wordpress.tv/2020/10/29/chris-ferdinandi-the-lean-web/, "The Lean Web"}
- {https://css-tricks.com/a-complete-guide-to-css-gradients/, "A complete guide to CSS Gradients"}
- {https://www.smashingmagazine.com/2020/11/best-practices-ecommerce-ui-design/, "Best Practices For E-Commerce UI Design"}
- {https://sheribyrnehaber.com/your-first-attempt-at-making-anything-accessible-will-be-awful/, "Your first attempt at making anything accessible will be awful"}
- {https://github.com/robinloeffel/cosha, "Cosha"}
- {https://www.brailleinstitute.org/freefont, "Atkinson Hyperlegible Font"}
- {https://www.hsablonniere.com/prevent-layout-shifts-with-css-grid-stacks--qcj5jo/, "Prevent layout shifts with CSS grid stacks"}
- {https://csswizardry.com/2020/11/site-speed-topography/, "Harry Roberts: Site Speed Topography"}
- {https://andydavies.me/blog/2020/11/16/the-case-against-anti-flicker-snippets/, "The case against anti flicker snippets"}
- {https://web.dev/min-max-clamp/, "min(), max(), and clamp(): three logical CSS functions to use today"}
- {https://github.com/joedrago/colorist, "Colorist image converter"}
- {https://austingil.com/how-to-build-html-forms-right-semantics/, "How to build html forms right"}
- {https://addyosmani.com/blog/infinite-scroll-without-layout-shifts/, "Infinite Scroll without Layout Shifts"}
- {https://nicj.net/cumulative-layout-shift-in-practice/, "Cumulative Layout Shift in Practice"}
- {https://lea.verou.me/2020/10/the-var-space-hack-to-toggle-multiple-values-with-one-custom-property/, "The -​-var: ; hack to toggle multiple values with one custom property"}
- {https://matthiasott.com/notes/focus-visible-is-here, ":focus-visible Is Here"}
- {https://levelup.gitconnected.com/enhancing-html-5-lazy-loading-with-css-and-minimal-javascript-afe274088f0b, "Enhancing HTML 5 Lazy Loading With CSS and Minimal JavaScript"}
- {https://www.joshwcomeau.com/css/full-bleed/, "Full-Bleed Layout Using CSS Grid"}
- {https://adamsilver.io/articles/bidirectional-scrolling-whats-not-to-like/, "Bidirectional scrolling: what’s not to like?"}
- {https://polypane.app/css-3d-transform-examples/, "Beautiful CSS 3D Transform Examples"}
- {https://www.lambdatest.com/blog/css-font-size-adjust/, "How To Auto Adjust Your Font Size With CSS font-size-adjust?"}
- {https://www.magicpattern.design/tools/css-backgrounds, "CSS Background Patterns"}

====

NAME: Links
HOST: Home
BREF: Links I gather
PRIV: true
BODY:

# Links


====

NAME: Moyo
HOST: Tools
BREF: Moyō 模様 (pattern) is a collection of patterns in CSS I use for my websites.
PRIV: false
BODY:

# Moyō 模様

Moyō 模様 (pattern) is a collection of patterns in CSS I use for my websites. Most of them were gathered on the web as the months passed and I tweaked them for my {time.html, "time tracker"} tool.

## About the `currentColor` keyword

You will often see the `currentColor` value used in the patterns. `currentColor` is a not very known keyword that acts as a variable. It takes the `color` value of the current element and if it doesn't exist, the parent element.

It's important if you use themes for your website. For example on this website, I use two variables for the light and dark themes and the `prefers-color-scheme` mediaquery to activate the theme based on the user operating system preference. 

By default text is black and background is white:

```
:root {
    &nbsp;--text: black;
    &nbsp;--background: white;
}
``` 

And the opposite for dark theme:

```
@media (prefers-color-scheme: dark) {
:root {
        &nbsp;--text: white;
        &nbsp;--background: black;
    }
}
```

So in the first case, `currentColor` will be `white` and in the second case it will be `black`. 

Using `currentColor` instead of directly reusing the `var(--myValue)` syntax allows the patterns to be portable and agnostic. It's the same for the `transparent` keyword, as it allows a part of the pattern to use the color used in the background.

## Patterns

### Checks

<div class="pattern-demo pattern-checks" aria-label="This is a pattern demo"></div>

```
.pattern-checks {
  background-image: linear-gradient(45deg, white 25%, transparent 25%), linear-gradient(-45deg, white 25%, transparent 25%), linear-gradient(45deg, transparent 75%, white 75%), linear-gradient(-45deg, black 75%, white 75%);
  background-size: 10px 10px;
  background-position: 0 0, 0 5px, 5px -5px, -5px 0px;
}
```


### Checks diagonal

<div class="pattern-demo pattern-checks-diagonal" aria-label="This is a pattern demo"></div>

```
.pattern-checks-diagonal {
  background-color: transparent;
  background-image: linear-gradient(45deg, currentcolor 25%, transparent 25%, transparent 75%, currentcolor 75%, currentcolor), linear-gradient(-45deg, currentcolor 25%, transparent 25%, transparent 75%, currentcolor 75%, currentcolor);
  background-size:11px 11px;
}
```

### Grid

<div class="pattern-demo pattern-grid" aria-label="This is a pattern demo"></div>

```
.pattern-grid {
  background-image: linear-gradient(currentColor 1px, transparent 1px), linear-gradient(to right, currentColor 1px, transparent 1px);
  background-size: 4px 4px;
}
```


### Grid Medium

<div class="pattern-demo pattern-grid--medium" aria-label="This is a pattern demo"></div>

```
.pattern-grid--medium {
  background-image: linear-gradient(currentColor 1px, transparent 1px), linear-gradient(to right, currentColor 1px, transparent 1px);
  background-size: 4px 4px;
}
```


### Cross Dots

<div class="pattern-demo pattern-cross-dots" aria-label="This is a pattern demo"></div>

```
.pattern-dots {
  background-image: radial-gradient(currentColor 1px, transparent 1px), radial-gradient(currentColor 1px, transparent 1px);
  background-size: calc(4 * 1px) calc(4 * 1px);
  background-position: 0 0, calc(2 * 1px) calc(2 * 1px)
}
```

### Vertical lines

<div class="pattern-demo pattern-vertical-lines" aria-label="This is a pattern demo"></div>

```
.pattern-vertical-lines {
  background-image: repeating-linear-gradient(to right, currentColor, currentColor 1px, transparent 1px, transparent);
  background-size: 4px 4px
}
```

### Horizontal lines

<div class="pattern-demo pattern-horizontal-lines" aria-label="This is a pattern demo"></div>

```
.pattern-horizontal-lines {
  background-image: repeating-linear-gradient(0deg, currentColor, currentColor 1px, transparent 1px, transparent);
  background-size: 4px 4px
}
```


### Diagonal lines left

<div class="pattern-demo pattern-diagonal-lines--left" aria-label="This is a pattern demo"></div>

```
.pattern-diagonal-lines--left {
  background-image: repeating-linear-gradient(45deg, currentColor 0, currentColor 1px, transparent 0, transparent 50%);
  background-size: 6px 6px
}
```

### Diagonal lines right

<div class="pattern-demo pattern-diagonal-lines--right" aria-label="This is a pattern demo"></div>

```
.pattern-diagonal-lines--right {
  background-image: repeating-linear-gradient(-45deg, currentColor 0, currentColor 1px, transparent 0, transparent 50%);
  background-size: 6px 6px
}
```

### Vertical stripes

<div class="pattern-demo pattern-vertical-stripes" aria-label="This is a pattern demo"></div>

```
.pattern-vertical-stripes {
  background-image: linear-gradient(90deg, transparent 50%, currentColor 50%);
  background-size: 6px 6px;
}
```

### Horizontal stripes

<div class="pattern-demo pattern-horizontal-stripes" aria-label="This is a pattern demo"></div>

```
.pattern-horizontal-stripes {
  background-image: linear-gradient(0deg, transparent 50%, currentColor 50%);
  background-size: 6px 6px
}
```

### Diagonal stripes left

<div class="pattern-demo pattern-diagonal-stripes--left" aria-label="This is a pattern demo"></div>

```
.pattern-diagonal-stripes--left {
  background: repeating-linear-gradient(45deg, transparent, transparent 4px, currentColor 4px, currentColor calc(2 * 4px))
}
```

### Diagonal stripes right

<div class="pattern-demo pattern-diagonal-stripes--right" aria-label="This is a pattern demo"></div>

```
.pattern-diagonal-stripes--right {
  background: repeating-linear-gradient(-45deg, transparent, transparent 4px, currentColor 4px, currentColor calc(2 * 4px))
}
```


### Double diagonal stripes

<div class="pattern-demo pattern-double-diagonal-stripes" aria-label="This is a pattern demo"></div>

```
.pattern-double-diagonal-stripes {
  background-image: repeating-linear-gradient(-45deg, transparent, transparent 5px, white 5px, white 50%), repeating-linear-gradient(45deg, black, black 5px, gray 5px, gray 50%);
  background-size: 13px 13px;
}
```

### Zigzag

<div class="pattern-demo pattern-zigzag" aria-label="This is a pattern demo"></div>

```
.pattern-zigzag {
  background: linear-gradient(135deg, currentColor 25%, transparent 25%) -5px 0, linear-gradient(225deg, currentColor 25%, transparent 25%) -5px 0, linear-gradient(315deg, currentColor 25%, transparent 25%), linear-gradient(45deg, currentColor 25%, transparent 25%);
  background-size: calc(2 * 5px) calc(2 * 5px)
}
```


### Zigzag 3D

<div class="pattern-demo pattern-zigzag--3d" aria-label="This is a pattern demo"></div>

```
.pattern-zigzag--3d {
  background-color: white;
  opacity: 1;
  background: linear-gradient(135deg, black55 25%, transparent 25%) -8px 0/ 16px 16px, linear-gradient(225deg, black 25%, transparent 25%) -8px 0/ 16px 16px, linear-gradient(315deg, black55 25%, transparent 25%) 0px 0/ 16px 16px, linear-gradient(45deg, black 25%, white 25%) 0px 0/ 16px 16px;
}
```

### Triangles

<div class="pattern-demo pattern-triangles" aria-label="This is a pattern demo"></div>

```
.pattern-triangles {
  background-image: linear-gradient(45deg, currentColor 50%, transparent 50%);
  background-size: 8px 8px;
}
```


### Quarter circles

<div class="pattern-demo pattern-quarter-circles" aria-label="This is a pattern demo"></div>

```
.pattern-quarter-circles {
  background-image: radial-gradient(ellipse farthest-corner at 11px 11px, currentColor, currentColor 50%, transparent 50%);
  background-size: 12px 12px;
}
```

### Seigaiha

<div class="pattern-demo pattern-seigaiha" aria-label="This is a pattern demo"></div>

```
.pattern-seigaiha {
  background-color: black;
  background-image: radial-gradient(circle at 100% 150%, black 25%, white 25%, white 29%, black 29%, black 36%, white 36%, white 40%, transparent 40%, transparent), radial-gradient(circle at 0 150%, black 25%, white 25%, white 29%, black 29%, black 36%, white 36%, white 40%, transparent 40%, transparent), radial-gradient(circle at 50% 100%, white 10%, black 10%, black 23%, white 23%, white 30%, black 30%, black 43%, white 43%, white 50%, black 50%, black 63%, white 63%, white 70%, transparent 70%, transparent), radial-gradient(circle at 100% 50%, white 5%, black 5%, black 15%, white 15%, white 20%, black 20%, black 30%, white 30%, white 35%, black 35%, black 45%, white 45%, white 50%, transparent 50%, transparent), radial-gradient(circle at 0 50%, white 5%, black 5%, black 15%, white 15%, white 20%, black 20%, black 30%, white 30%, white 35%, black 35%, black 45%, white 45%, white 50%, transparent 50%, transparent);
  background-size: 30px 15px;
}
```

### Grey lines

<div class="pattern-demo pattern-grey-lines" aria-label="This is a pattern demo"></div>

```
.pattern-grey-lines {
  background-color: white;
  background-image: linear-gradient(90deg, rgba(0, 0, 0, .5) 50%, transparent 50%),
    linear-gradient(rgba(0, 0, 0, .5) 50%, transparent 50%);
  background-size: 8px 8px;
}
```

### Wave

<div class="pattern-demo pattern-wave" aria-label="This is a pattern demo"></div>

```
.pattern-wave {
  background-image: radial-gradient(circle at center top, transparent, transparent 4px, currentcolor 4px, currentcolor 5px, transparent 5px, transparent), radial-gradient(circle at right bottom, transparent, transparent 4px, currentcolor 4px, currentcolor 5px, transparent 5px, transparent), radial-gradient(circle at left bottom, transparent, transparent 4px, currentcolor 4px, currentcolor 5px, transparent 5px, transparent);
  background-size: 20px 10px;
}
```


### Yin and Yang

_Broken on chrome_

<div class="pattern-demo pattern-yin-yang" aria-label="This is a pattern demo"></div>

```
.pattern-yin-yang {
  background:
    radial-gradient(circle at 50% 59%, white 3%, black 4%, black 11%, rgba(54, 78, 39, 0) 12%, rgba(54, 78, 39, 0)) 50px 0,
    radial-gradient(circle at 50% 41%, black 3%, currentcolor 4%, currentcolor 11%, rgba(210, 202, 171, 0) 12%, rgba(210, 202, 171, 0)) 50px 0,
    radial-gradient(circle at 50% 59%, currentcolor 3%, black 4%, black 11%, rgba(54, 78, 39, 0) 12%, rgba(54, 78, 39, 0)) 0 50px,
    radial-gradient(circle at 50% 41%, black 3%, currentcolor 4%, currentcolor 11%, rgba(210, 202, 171, 0) 12%, rgba(210, 202, 171, 0)) 0 50px,
    radial-gradient(circle at 100% 50%, currentcolor 16%, rgba(210, 202, 171, 0) 17%),
    radial-gradient(circle at 0% 50%, black 16%, rgba(54, 78, 39, 0) 17%),
    radial-gradient(circle at 100% 50%, currentcolor 16%, rgba(210, 202, 171, 0) 17%) 50px 50px,
    radial-gradient(circle at 0% 50%, black 16%, rgba(54, 78, 39, 0) 17%) 50px 50px;
  background-color: grey;
  background-size: 20px 21px;
}
```


### Circles

<div class="pattern-demo pattern-circles" aria-label="This is a pattern demo"></div>

```
.pattern-circles {
  opacity: 1;
  background-image: radial-gradient(circle at center center, transparent, currentColor), repeating-radial-gradient(circle at center center, black, black, 4px, transparent 8px, transparent 4px);
  background-blend-mode: hue;
}
```


### Isometric cubes

<div class="pattern-demo pattern-isometric-cubes" aria-label="This is a pattern demo"></div>

```
.pattern-isometric-cubes {
  background-color: #ffffff;
  opacity: 1;
  background-image: linear-gradient(30deg, black 12%, transparent 12.5%, transparent 87%, black 87.5%, black), linear-gradient(150deg, black 12%, transparent 12.5%, transparent 87%, black 87.5%, black), linear-gradient(30deg, black 12%, transparent 12.5%, transparent 87%, black 87.5%, black), linear-gradient(150deg, black 12%, transparent 12.5%, transparent 87%, black 87.5%, black), linear-gradient(60deg, grey 25%, transparent 25.5%, transparent 75%, grey 75%, grey), linear-gradient(60deg, grey 25%, transparent 25.5%, transparent 75%, grey 75%, grey);
  background-size: 14px 24px;
  background-position: 0 0, 0 0, 7px 12px, 7px 12px, 0 0, 7px 12px;
}
```


### Crosses

<div class="pattern-demo pattern-crosses" aria-label="This is a pattern demo"></div>

```
.pattern-crosses {
  background-color: white;
  opacity: 1;
  background: radial-gradient(circle, transparent 20%, currentColor 20%, currentColor 80%, transparent 80%, transparent), radial-gradient(circle, transparent 20%, currentColor 20%, currentColor 80%, transparent 80%, transparent) 15px 15px, linear-gradient(black 1.2px, transparent 1.2px) 0 -0.6px, linear-gradient(90deg, black 1.2px, currentColor 1.2px) -0.6px 0;
  background-size: 30px 30px, 30px 30px, 15px 15px, 15px 15px;
}
```


### Paper

<div class="pattern-demo pattern-paper" aria-label="This is a pattern demo"></div>

```
.pattern-paper {
  background-color: white;
  opacity: 1;
  background-image: linear-gradient(black 1.6px, transparent 1.6px), linear-gradient(90deg, black 1.6px, transparent 1.6px), linear-gradient(black 0.8px, transparent 0.8px), linear-gradient(90deg, black 0.8px, white 0.8px);
  background-size: 20px 20px, 20px 20px, 4px 4px, 4px 4px;
  background-position: -1.6px -1.6px, -1.6px -1.6px, -0.8px -0.8px, -0.8px -0.8px;
}
```
## Credits

Most patterns were created by other people, then tweaked for my needs. 

Non-exhaustive list:

- {https://bansal.io/pattern-css, "Pattern.css"}
- {http://projects.verou.me/css3patterns/, "CSS3 Patterns by Lea Verou"}
- {https://www.magicpattern.design/tools/css-backgrounds, "Magicpattern"}


====

NAME: 2020
HOST: Home
BREF: 2020 Year review
PRIV: false
BODY:

# 2020 Year review

2020 was one of the best years I experienced in recent memory. 

Considering everything that happened, it might sound rude or tactless. But in the middle of the mess, I evolved as a person like I never did before. I faced and solved problems I was burying inside of me for years. I reconnected with my partner. I coded personal projects that helped me question my field. I shared my knowledge with others. I bought an apartment and am still renovating it.

When 2020 started my goals were:

- Stop helping others with their websites
- Discover leaner stacks for web development
- Redo my website as a personal journal or wiki
- Write articles, guides, fictions
- Draw

But my ultimate goal was to get out of a _productivity mindset_ and switch to a _self-discovery mindset_: 

> "I hope next year instead of a display of *work*, I'll be able to do a display of *creations*.", Me, Last Year, https://twitter.com/Thomasorus/status/1212451154422116352

I wanted to question the value, benefits and enjoyment of _everything_ I did, used or saw.

## Time tracking as self-discovery

Considering I have bad memory and do way too much stuff, my first move of 2020 was to start tracking the time spent on personal projects. I was inspired to do it by several people I met in the {https://merveilles.town, "Merveilles community"} who use such tools as a way to reflect on themselves. But I didn't want to use an app or someone else system. So I just... wrote down my time in a text file following this format:

```
//year week activity project hours
2020 1 Development Website 1
```

I didn't have any idea how I would exploit this data. Actually, I only finished the visualization in July 2020. But having it readable allowed me to self-reflect and understand why I was feeling tired or restless. In early 2020 we worked with my friends Sword and Pr0sk on the translation and publication of a {https://basgrospoing.fr/fr/articles/le-netcode-des-jeux-de-combat, "massive article about netcodes"} in fighting games. At the same time I was upgrading our CMS to the latest version. All this took me around 40 hours in the first two months of the year. At the same time I was still recording podcasts, developing stuff for me and of course, going to work.

So on week 9 of 2020, I was exhausted and at the same time I was feeling guilty of not working. Looking at my time tracker, I realized how stupid I was. I decided I had _earned_ to do nothing. And so I did. It was the first of several similar cycles. Work on something, then rest.

And of course right after this, lock-down started in France.

## Lock-down rhymes with breakdown

Lock-down ~was~ is still a _mess_ in France. And it was even worse with my client. We were supposed to work from home and told it could happen anytime. For the first two weeks of lock-down, I was up every morning to check my emails in the wait of my access. I was extremely stressed. Finally we had found a way of working with difficult people. Projects were moving forward under my guidance. But the access to work from home? They never came.

So, my partner was working, and I was not. To keep me occupied I broke my first engagement and started doing a website for someone else. I redid the whole {https://art-eater.com/, "Art Eater"} website. Saying I did it for others is a bit lying. I wanted this website online for myself, because I loved it and it went offline years ago, leaving a big hole on the internet.

But when the second month of lock-down started I collapsed. As the days went by, each day seemed more and more like the day that preceded. Anxiety spikes, characterized by tetany crisis, became common. I gradually had more difficulties getting out of bed. Depression symptoms appeared.

So I did something I never dared to do. I asked my partner for help. I asked her to read my journal, as I was unable to speak. She said nothing, didn't judge, and helped me get back on my feet. We made a program to keep me occupied. Sport, reading, studying, coding. Little by little I was able to get my head out of the water, but remained fragile.

But there was a benefit from this. I finally stopped lying to myself. I am depressive and anxious and I have been escaping this state with work and social gatherings. Lock-down removed my escape roads and I had to learn to live with myself. This realization profoundly changed me. When not in shape, just go to bed, cry, and wait for it to pass. When you feel like doing nothing, just sleep. The goal now isn't to suppress feelings, but to let them flow in me.

As I explained to my partner, I am sometimes feeling terrible. But I am now in a better place, because I _feel_ things. I am now way more honest with myself. 

## The birth of my tools

This change in mindset actually helped with my personal projects. I was already working on my static site generator for a while, exploring different roads. But when lock-down ended and I went back to work, I was hitting a dead-end. I had too much text files, I had redone this thing 3 times (even one time in Python). My problem? I was still following other people rules and way of thinking.

So I re-started from the beginning. What is a website? An accumulation of text. What am I using to write text? A text editor and the Markdown language. Do I like using them? Actually, no! I hate writing in Markdown! So why do I use it? Because there's nothing else available! If it doesn't exists, why not create it?

And it clicked. I was terrified and felt I was not capable of doing it, but went for it anyway.

I explored different syntaxes for a new and personal markup language. I called it {kaku.html, "Kaku"} and I wrote a parser in JavaScript to convert its text to HTML. It took a lot of time, as I rewrote it 3 or 4 times, each time exploring a new approach and making it more robust. I now write everything in Kaku and *I love it*.

My static site generator {ronbun.html, "Ronbun"} also found it's final form during this period (it's now using a single text file for all pages and has no external dependencies), as well as my {time.html, "time tracker"} tool. In the span of a few months I created my own ecosystem of tools that fit my needs. Using them feels _natural_. Of course there were bugs and limitations I didn't saw coming. But that's the beauty of it: the projects evolved at the same time as my needs and tastes.

## All I want is dark nails

During this exploratory period right after lock-down, my partner was exhausted. Working and taking care of me was asking a lot. One evening we ended up talking for hours. We confessed we were exhausted by years of efforts to grow into _adults_ as society expects us, and that it made us miserable. She has no desire to be a _woman_ and bear the responsibilities it implies in our society. I have no desire to be a _man_ and apply the behaviors expected of them, like control an strength. I realized that *all I want is dark clothes, dark nails, a sensible life made of creative doubts and enraging blockades*. So I did. I painted my nails. I bought women clothes because I liked them. I now dress entirely in black. I'll have new piercings soon. I have never felt as whole as today.

When I went back to work from May to June, it was also the moment we bought an apartment. We were searching for a long time and finally found something we loved. I decided I would do this whole operation _my way_. Which meant a low stress, un-destructive way. I hired a broker as I was not feeling capable of meetings half a dozen bankers (not did I want to _prove_ I was capable of doing it). He made the deal for me. My notary was recommended by a friend. Same for the artisans and the electrician. I made a deal with my banker to not have repayment during the renovations, and took several months for them so I would not feel pressured. I didn't want to turn this into a demonstration of control and strength. Until now, it has been working great.

It wasn't without challenges though. As I tried to take more responsibilities at home I felt it was not going to work. I was not able to manage unexpected problems, even the smallest ones. I had trouble focusing. Muscular pain. And worst of all, the unstoppable feeling that something terrible was going to happen. I needed help and counseling was not enough. As my mission was over and I was not working, I decided it was a good opportunity to get medication. My doctor was super helpful and found the right treatment right away. I have been feeling great for months now.

In September we took a few weeks of vacations and explored the nearest region. It felt good. I was happy like I haven't be for a long time.  

## All they want is JavaScript

From July to December I was not working due to the pandemic. I took the time to explore a lot of things related to my field, frontend web development. First, I wrote an {html-tips.html, "extensive guide"} on HTML. I wanted to share knowledge with the Merveilles community, but also felt it was time to use my personal wiki for, well, wiki things! 

I also continued studying JavaScript using the very good {https://beginnerjavascript.com/, "Wes Bos course"}. I like this language, all my tools are built with it. But I really dislike the way we are doing web development using JavaScript frameworks like React, Angular or Vue. A monoculture emerged around them, pushed by companies using {the-soft-power-of-javascript.html, "soft power tactics"} to make them unquestionable in web development. So I compiled {list-of-javascript-frameworks.html, "a list of alternatives"} to study them a little bit. The act of creating my own tools with little time and without external ressources reinforced my feeling that the field is moving towards too much complexity. I feel we are bending the projects needs to the framework or libraries needs and that instead of solving problems related to the project, we assemble kits and solve problems related to them.

Which leads me to my current problem: work. My employer can't find a job that suits me. When I tried finding one myself, I only got negative answers. I don't _fit_ in the definition of frontend developer, which now seems to mean _backend developer in the browser for over-complex technical stacks in JavaScript_. I'm a frontend developer specialized in design systems, UX and accessibility. In half of the job interviews I did I could see why they should hire me. But they did not. I know too well why: people only hire my profile when everything is a mess and needs to be rebooted, which leads to incredible pourparlers between dozens of people questioning your expertise, making the project near to impossible to finish.

So what should I do? I really don't know! Either I become the frontend developer everyone wants me to be, or I continue to wipe everybody's mess when it's already too late. What I would actually love to do is develop art directed pages for magazines. Replicate bold or original print layouts. I love writing, I love design, I love frontend technology. But making a living from this is probably impossible. What a headache!

## 2021 Goals

This post has been far too long already so let's wrap this up with 2021 projects and goals. Here's the list:

? Work on art directed articles : I love this, so why not try making more? It would step up my knowledge in an area of frontend that I actually care about!
? A new portfolio : During my job interviews I had to explain what my specialty was. I'm bored repeating it, so I'll make a portfolio website and join it in my job applications so people understand more easily what I do.
? Write CSS guidelines : I really enjoyed writing my HTML tips and tricks pages. I'll do something for CSS, probably related to the different methodologies. I love this stuff. I love CSS.
? Code less : Yeah that doesn't sound logical but I actually want to code less. I won't change my tools in 2021 or only make small evolutions. I wanted to redo them in C, but it will have to wait because I have to...
? MAKE ART : That's the thing I could not do in 2020. I want to do it. I know I will suck for a long time, but I want to untie this knot that has been bothering me for years. I have ideas to do some with friends. Why not do a comics of a dozen pages?
? WRITE FICTION : The second thing I want to tackle this year. I'm only able to draw things I wrote before, so I'll have to finally put on paper this lores that I have in my head.
? Be responsible : Being responsible at home and in life frees my partner and helps her moving forward. I want to help her.
? Relax : Yeah, I love relaxing. I've already started. Never spent that much time in my sofa.

And that's all!

What a strange year. A global tragedy was the trigger of a massive personal renewal that left me feeling better, more sensible and authentic. Of course the state of the world outside my window worries me and I will not isolate myself from it. I will participate as much as I can, as long as I can. 

See you next year!


====

NAME: Writing tips
HOST: Knowledge
BREF: Writing tips from a self-taught writer
PRIV: false
BODY:

# Writing tips

These writing tips are based on personal experience and might not work for you, so be careful when trying to use them. 

Please note that *I'm talking about writing for others*. As a professional writer I need the reader to keep reading. In the case of a long article, keeping the reader focused is often complicated, and that's the reason why I use these tips an tricks. A lot of them were taught to me by Thomas Cusseau, the former chief editor of {https://gamekult.com, "Gamekult"} and by my old friend {https://foxmonsieur.com/, "Franck Extanasié"}.

Also don't forget that as with everything, the more you write, the better you write.

## Is the subject worth it?

First of all, anyone can write about any subject and potentially, any subject can be interesting.

But that doesn't mean _every_ subject is interesting. Some of them don't deserve your time and. If they are still written they can be informative, but are they really interesting to read? Was that time well spent? 

The quality of the subject (and thus the pleasure you as a reader will get from reading it) is determined by the _context_ surrounding it. The subject is just the trigger, the context is the story and that's the main thing we want to retrieve as a writer.

Here's the most easy way I determine if a subject is interesting: if, after getting a hint about a it, I find myself asking questions about it and I need more context to get answers, then it might be worth writing about it. 

This very page follows the same process. I was hinted that my process of writing and its result are interesting to others. So I ask myself _questions_ about my own practices, I stepped back to get _context_ and tried to find _answers_.

All this combined helps me build what Thomas Cusseau called _the angle_ of the article. 

## The angle

Just like in the cinematographic sense with camera angles, the way you _position_ yourself as the writer to emphasize the context around the subject will change the perception and feelings of the reader. It will also tell him a story, even if there's no dialog. It means that even if the subject, context and answers are interesting, you now have to determine how to write about them to create feelings. Joy, excitement, curiosity.

Now this is where my methods can differ from other's. Each cinematographer as its own ways of filming and that's the same for writers. Of course the subject and the target audience will influence how the writing will be done. If I'm writing a fiction centered around a single character and it's emotions, I might go with a first person point of view and not care about being totally understandable. If I'm writing a more informative article for a larger audience, I will probably try to make it as accessible as possible ; disappear and let the context that I organize in a logical way do all the work. It's all about the writer and the desired outcome.

With experience, writing habits tend to emerge and will make the process of assembling the angle (subject, context, answers, form) more easy. Still, it's often good to re-evaluate our habits to avoid being to complacent.

## My process

My most used process, that I apply mostly in non-fiction writings, work as follow.

+ I openly ask a question about the subject.
+ I invite the reader to look at the subject from a new perspective that I provide.
+ I raise the reader's understanding of the subject by delivering context in a logical chain of ideas.
+ I deliver a conclusion that answers the question.

### The question

The question is not actually a question! 

It's more of a problematic that you want to answer and openly share with your reader. It has to strike a nice balance to make the reader curious without being overly dramatic or click-bait. It has to be super short (around 150 characters), be the first text after the title, directed at the target audience, provide the initial context we are in and why we are questioning this context. 

The hint for my {2020.html, "2020 review"} was:

> "2020 was one of the best years I experienced in recent memory."

Let's analyze this for a bit:

- _2020_ is the main context. Everyone knows 2020 was as bad year. You might think _Ugh, here we go with 2020 again, so depressing_.
- _Best years in recent memory_ when combined with _2020_ creates the problematic. I want to create a _Whaaaaaaaaaat_ moment!
- _I experienced_ is a hint that I am the perspective. This page is a personal journal that will guide you through my journey.

This phrase will be my main guideline while I am writing the rest of the text. You can think of the question as a pitch. Or as the phrase you wrote at the beginning of your philosophy dissertation in high school! The click-bait titles you see everywhere on the internet are just this, but with rock-bottom effort in subtlety, because of a lack of time and context.

But *please respect yourself*. Never use a question mark inside a title or your problematic. They are obnoxious, too easy and often drives the reader away.

### The perspective

Right after the question, I try to give hints about _why_ I wrote it. This is often the introduction part of the article, where I state facts that help the reader understand why this text was written in the first place.

The goal is to embark him into my own journey, making him revive my cycle of _question, context, answer_ by shifting his perspective with mine. The only difference between us are:

- I already know the _answer_, he does not. 
- I have the full _context_, he does not. 

So my goal now is to deliver him the full context so he can understand my conclusion.

### The context delivery

From this moment I am in the core of the article. This is often the most difficult part to write.

My goal is to split the context that makes the subject interesting into smaller parts, in order to deliver them in a logical way. You can think about it as a bullet list where each element leads to the next. Each one needs to have its own inner-subject, context explanation, logical conclusion, and transition to the next part.

This is especially hard to write while making it interesting and not being excessively verbose. Summarizing things is hard. Going to the core of an information is harder. It's where there is a good chance that the article goes into a tangent. Since I am giving context and that one things calls for the another, it's super easy to derivate into _the context of the context_, thus leading to something that is _related but not related_ to the subject of the article.

Using metaphors when dealing with technical aspects can be useful but if they are not quick, clear and obvious, they can lose the reader. Images and quotes are useful to create breaks. It allows you to make a logical connection from one context to the other in the same part. It also allows the reader to breathe.

Even more difficult are the transitions. Each parts needs to end with a hint about what the next one will be about. 

#### Plan or go with the flow?

There are two schools about writing this context delivery part. One advises to plan everything before writing the different parts. This way you know where to start and where to end each one. The other method is to simply go with the flow and detect when to stop and transition to another part.

Of course both methods have positives and negatives. 

Planning everything is good but sometimes, one part can be too long and needs to be cut in smaller ones, breaking the plan. Sometimes when writing, the realization that the plan is not good happens. Or the question changes or get refined, thus breaking the plan. But plans are useful when dealing with very intricate articles. I personally use them more for technical writings. When I am not 100% sure about my understanding of the context, having a plan is also a good way to stay focused.

Going with the flow obviously makes it easy to change the question and flow of the article, at the risk of going into tangents and irregular sized parts. Going with the flow often leads to more deletes of entire paragraphs. I even had cases where I deleted everything and started fresh, as the existing text was not good and trying to format it to another plan was a nightmare.

My advice would be: the more you know your subject, the more you can go with the flow. The less certain you are, the more you should plan. To create a plan more easily, write all you context elements on small pieces of paper and regroup them by inner-subject.

### The conclusion

The conclusion is also part of the context delivery phase, but it doesn't conclude it's own part, it concludes the whole article. If I wrote well enough, the reader has all the contextual keys to understand why I brought the subject in the first place. 

If the article is long, it might be a good idea to rewrite the question. With the context the reader gathered, he should be able to get to the conclusion by itself at this moment. Still, write the answer to the question or the problematic. More often than not, it's good to finish with a catchphrase that either closes the topic once and for all, or opens it so the reader can continue to think about it.

It always feel good to have a _AH, I GET IT_ moment, and that's what I aim for my conclusions.

## Various tips and tricks

- The main rule all writers know is that after finishing an article, you remove 50% of it. Because you wrote too much. You went into tangents. You overdid it. Don't hesitate. Delete. Rephrase.
- After long periods of writing, everything seems to be blurry and hard to read. That because you almost memorized your text and you aren't actually reading it anymore, you are thinking about the purpose of each phrase. That's how you miss typos, long phrases that could be shortened, etc...
- When it's too hard, let it rest for a few days before continuing. The blur will disappear and you'll be fresh.
- When it's done, let it rest for a few days before publishing. The blur will disappear and you'll be able to see the monstrosities you wrote.
- When doing interviews, the most interesting things are often the tangents. They provide off-script context that would normally not be part of the subject. Write hints or subjects mentioned and go back to them later. When doing interviews with people in a marketing campaign, always ask a generic question first so they can do their own job and spit their marketing bullshit, then do your thing.


====

NAME: CSS methodologies
HOST: Knowledge
BREF: CSS methodologies
PRIV: true
BODY:

# A short history of CSS methodologies

What's interesting about CSS is how much people tend to love it or despise it. 

Most often than not, it has to do with the cascade and the way to either use it or not use it. As a CSS file is read from top to bottom, the actual placement of the code inside the file is important. But the most terrible thing for _classic_ developers is that CSS is global and declarations are not variables and won't trigger an error if you reuse them.

This simple thing has been the source of discussion about how to better write CSS. In this article, we'll see how various people took different approaches to organize their code bases.

But first, let's explain quickly what is the cascade.

## The cascade

> "The cascade is an algorithm that defines how to combine property values originating from different sources.", MDN Docs

What happens if we declare the same thing two times, but with different properties?

Here's a button:

```
.button {
&nbsp;border:1px solid red;
}

/.../

.button {
&nbsp;border:1px solid blue;
}
```

In this example, the border's button will be blue, as the latest declaration overwrites the previous one. But it's not the name of the declaration that's getting overwritten, it's the properties located inside. 

Or, more precisely, if the cascade finds declarations with the same name, it will regroup its the properties together. And if two properties are the same, then the last one wins.

```
.button {
&nbsp;width: 30px;
&nbsp;border:1px solid red;
}

/.../

.button {
&nbsp;border:1px solid blue;
&nbsp;color:red;
}
```

In this case, the `border`, `width` and `color` properties will be grouped together in a single `.button` class. It will have a blue border. 


## Separation of concerns and semantics

Of course CSS is nothing without HTML. 

For years the rule about organizing them was to respect the _separation of concern_. HTML is for structure and CSS is for styles. 

For example using an `<h3>` tag instead of an `<h1>` just because the `<h3>` is smaller is bad practice. Using CSS to style the `<h1>` to the size needed is good practice. This way, even if the `<h3>` is replaced with a proper `<h1>`, the style won't change. 

If an existing website needs a redesign without touching the HTML, it's also possible. That's what the famous {https://www.csszengarden.com/, "CSS Zen Garden"} website, which has several designs with the same HTML, popularized in 2003.

It makes sense, but how do you _name_ these styles? 

That's where the _semantic_ part comes in. Classes should name based on their purpose and not on their properties. In the previous example, naming the title `.main-title` could work, but naming it `.title1` or `.size-30` won't. The first one implies that this title is the first one in the page. The second one does not tell us where this class is supposed to be used.

Today the separation of concern and the semantic naming are often challenged. Some projects moved to JavaScript components where each one contains both its scoped HTML and CSS in the same file. The cascade is not a problem anymore and the global styles either. But this component approach is still less used than classic templates, and has its own issues that we will discuss later.

## Semantic and structure

Now let's say you start a menu and name it `.menu`. It has no indication of style or structure, it just says what it is: a menu. It can be used at the top, the bottom, on the side... It's reusable! Or is it? 

Actually, it depends.

Let's say our menu contains a sub menu with a button inside. Our CSS might look like that:

```
.menu {
&nbsp;color: black;
}

.menu .submenu {
&nbsp;border:1px solid blue;
}

.menu .submenu button {
&nbsp;color:red;
}
```

This code has two major problems.

First, even with a semantic name on the parent component, the inner elements are not semantic. Worse, they are _nested_. Which means that if we move the `button` outside of the `.submenu`, the `button` will lose its red color. *If the HTML moves, the CSS breaks*.

The other problem is related to the first one. If you need a `button` with the same style outside of this context, you are out of luck and need to create another context. And if you don't have another context, then you need to create an entirely new button. 

Suddenly it's a mess, and that's just for a button.


### Object Oriented CSS

So of course, nature found a way. Well, Nicole Sullivan found a way. In 2009 she presented the {https://web.archive.org/web/20090729112249/https://oocss.org/, "Object Oriented CSS"} methodology.

Object Oriented CSS or _OOCSS_ ditches the contextual approach of doing CSS (as showed in the previous example) by considering that the way HTML is structured will change and should not have any influence on the style. 

To keep our menu example:

```
.menu {
&nbsp;color: black;
}

.submenu {
&nbsp;border:1px solid blue;
}

.red-button {
&nbsp;color:red;
}
```

Each HTML element that needs style should have its own class. This way, no matter the context, they will always have the same style. 

But there's still a problem: all this code lacks organization. If you happen to work on an aging website, it could happen that the CSS file grow a lot and that everything new is written at the end of it.

## SMACSS

So in 2011 Jonathan Snook released the book {https://web.archive.org/web/20201031072427/https://smacss.com/, "Scalable and Modular Architecture for CSS"}. It works by organizing the different CSS declarations by logical use in 5 categories, thus fixing the problem with the OOCSS approach.

The categories are:

? Base : The rules that sets the default CSS properties of HTML elements like `a` or `button`.
? Layout : The classes that define the layouts of pages. The containers, the grids, all those things that organize others elements. Prefixed with `l-` or `layout-`.
? Modules : The reusable objects of OOCSS.
? State : Utility classes dedicated to Modules, used to modify the design of an object if its state changes.
? Themes : Utility classes that change the design of Layout and Modules based on the choice of the user or the context, for example dark mode.

SMACSS does not seem to be used that much today, but its influence is still there. It was a precursor that paved the way to other methodologies that improved its initial proposal.

But from there another problem emerged. 

## Naming conventions

SMACSS gave guidelines from a _macro_ level perspective, but kept using HTML selectors inside it's modules. Which means that if something was moved or changed inside of them, the HTML kept breaking the CSS. 

The solution? More classes for the children of modules of course. But how to name them? Naming in programming is always a problem as it's too often very opinionated.

So naming conventions were created to ease the readability and discovery of code. There were various naming conventions coming out around 2013. Among them {https://suitcss.github.io/, "SUITCSS"} was one of the most popular. 

But the one that really saw mass adoption was {https://getbem.com/, "BEM"}. It was created around 2015 by Vsevolod Strukchinsky and Vladimir Starkov. In it's basic form it works this way:

? *B*locks : the base of the _object_ we are working on. More often than not, the _context provider_.
? *E*lements : the elements _inside_ the block. They are designated using the double underscore `__`. 
? *M*odifiers : the modified versions of an existing _object_. They are designated using the double dash `--`.

```
.menu {
&nbsp;color:black;
}
.menu__item {
&nbsp;height:10px;
}
.menu--open {
&nbsp;color:blue;
}
```

From a naming perspective the benefits are obvious. You can name several inner elements the same, they will still be understood as different and won't bother each other, for example `.menu__item` and `.footer__item`. 

Even if the HTML is moved around the class will still work. The cascade and the context are almost irrelevant here. A developer joining a project can also quickly understand the codebase and add its own modifications without touching the existing rules.

By the way, BEM detractors often use the example of too much nesting to say BEM does not work. For example, if we had something like this:

```
<div class="container">
&nbsp;<span class="container__subtext">
&nbsp;&nbsp;<button class="container__subtext__button container__subtext__button--blue">Nested button</button>
&nbsp;</span>
</div>
```

When something like this happens, it means the whole object is too big and should be restructured. Instead of multiplying the _elements_, multiply the _blocks_ by dividing them. *You should never have more than one `__` or `--` inside your class names.*

So it looks like everything is good! The macro level is handled by methodologies like SMACSS and the micro level by naming methodologies like BEM. There shouldn't be any more problems right? _Right?_

## ITCSS and the specificity war

Well yes, there were more problems, mostly performance problems. The beginning of the 2010 saw the arrival of responsive design, HTML5 and CSS3! And most often than not, the directives were to add the new responsive CSS at the end of existing files instead of redoing everything from scratch. So more code bloat! Bigger files! And also tons of ugly repaints of the dom as soon as the browser parsed the CSS!

To deal with this, Harry Roberts came up with {https://www.youtube.com/watch?v=1OKZOV-iLj4, "ITCSS"} around 2014. It means _Inverted Triangle CSS_. It is, as SMACSS, a methodology based on organizing code in different categories. But where SMACSS does it purely from a logical point of view, ITCSS is focusing on reducing {css-good-practices.html, "specificity", Read about specificity in CSS} in order to limit repaints and ease the rendering. 

The three elementary rules are :

+ Go from global to localized (`*` should be before `.button`)
+ Go from general use the explicit use (style resets should be before classes)
+ Go from less specific to more specific (lighter specific selectors like `h1` before heavy selectors like `!important`)

Which means the placement of CSS inside the file matters! Here's ITCSS code organization, from top to bottom of the file:

? Settings : Should contain all the variables and global configurations of the project as it will affect everything.
? Tools : Mixins, helpers and functions go there and can use the settings.
? Generic : Low level style rules like resets or box-sizing should go there as they are the primer coat of CSS.
? Base : Styles without classes for HTML elements like `h1`, `a`. The default style.
? Objects : Structural non-themed elements that wrap components. Things like grids, containers, list positions.
? Components : Your classic classes like `.button-red`. It's of course possible to use BEM to organize their inner code.
? Trumps : Helpers as utility classes for surcharges and exceptions.

Most of the time these categories are in their own files that are then imported in this specific order using SASS. This way when the browser reads the compiled file, he treats the rules from the less specific to the more specific. 

ITCSS had a huge influence on CSS makers as it's easy to adapt to each project's needs, it works for projects of all sizes and scales particularly well. The drawback is probably the requirements to understand how everything is organized and why.

So are we finally good? Is it finally over and CSS is ok? You bet it's not.

## The rise of CSS in JavaScript

Around 2010 Google released {https://angularjs.org/, "AngularJS"}, opening the door to the rise of JavaScript components frameworks. It was followed by Angular2, React, Vue and many others.

Many JavaScript developers who probably never understood stylesheets saw this as the opportunity to _fix it_ by adding scoped HTML and CSS inside their components, thus disabling the cascade, the need for semantic naming and the global nature of CSS. Suddenly the separation of concerns was no more. The semantics were gone. You would not ship any CSS files. 

This evolution was sudden and _brutal_. The benefits were real, but it's important to note that some ideas about how to write CSS inside JavaScript were absolutely _bollocks_. For example React inline styles still use a JavaScript object that does not accept `-`, forcing developers to write CSS in Camel Case (_what the hell?!_) and declare values as strings.

```
var divStyle = {
&nbsp;color: 'white',
&nbsp;backgroundImage: 'url(' + imgUrl + ')',
&nbsp;WebkitTransition: 'all',
&nbsp;msTransition: 'all'
};
```

Fortunately, the field evolved very fast, allowing to import CSS files, write normal CSS inside components, choose if the style is scoped or not, and many little things that made it quite useful. But one problem started to appear. 

Those Javascript frameworks are used in the browser and render in real time what is needed. By adding the style inside the components, the browser is forced, using JavaScript, to re-render the same things a lot of time, resulting in longer loading times.

It's not a problem when used in a true application. Something used in an office with good computers and unlimited battery for example. But when the JavaScript takes too much time to render its components, public websites see their SEO deteriorate. Also, how do you treat global styles?

So the idea of compiling the CSS in its own file came back again. It allows the browser to cache it provides better performance. But how do you keep the non-semantic, cascade free, scoped aspect of CSS in JavaScript if you write CSS into another file?

## Utility First CSS

You might see the OOCSS methodology and the CSS in JavaScript component approach and ask yourself this question: why not create classes who's only purpose is to set as single property? For example the color of the button? Or the color of the border ? 

```
.red {
    color:red;
}
.border-blue {
    border-color:blue;
}
```

The first problem of a full utility class approach is the bloat in the html. If you need 6 properties to achieve your design, you need 6 classes inside your HTML:

```
<button class="red border-blue another-class another-one another-one-again omg-its-not-ending">A lot of classes</button>
```

The second problem is the incredible number of classes that would be needed to make it work in a truly agnostic way!

It's one class per property multiplied by the number of design tokens (colors, sizes, etc). It simply can't be done by hand. This is why utility classes are often used for recurring and simple manipulations to avoid using an element in BEM. 

That's the reason why utility first approaches can't be done with just a CSS file and need JavaScript in order to create classes programmatically. Knowing this, it's not surprising that most utility first CSS frameworks gained popularity when compiling tools like Grunt, Gulp, Webpack or Parcel got more popular. 

But even if you can programmatically create your classes, the problem persists: how do you deal with the bloat?

## Tailwind CSS

The {tailwindcss.com/, "Tailwind CSS"} framework was created around 2017 by Adam Wathan. He decided to pursuit a utility first journey after realizing that he was using more and more utility classes instead of declaring inner elements using the BEM methodology. 

He also felt that the semantic part was giving developers too much freedom and took too much time to refactor. He famously said that _“Best practices” don’t actually work_. 

Tailwind's solution is to flip the BEM + Utility First formula. Write using utility classes first, then use a semantic approach when needed. It's only if the utility first declarations tend to be repeated to often, or if the HTML is bloated with classes, that an abstraction should be created. 

Wathan gives the example of a navigation bar, an element that is only used once, rarely modified, that might not deserve its own semantic class. On the opposite side, a button often comes in several sizes and styles and would work well with a `.button` class with a neutral design and a few utility first calsses to add theming.

Since utility first classes are pre-generated and immutable by nature, a developer without access to the CSS file can still produce styled pages or components. but can't add CSS bloat to the project. 

Classes are determined programmatically inside a JavaScript config file and created when compiled. Templates and components are scanned and unused classes are removed from the final CSS file, therefor shipping a smaller file.

This approach can actually work with both traditional template files or component based projects, which explains why Tailwind has been getting more popular this past years. 

And _of course_ it's a controversial approach. Not everyone that already knows CSS is ready to learn a CSS API to get a design done. Doing Tailwind when design tokens like colors, fonts or sizes are well defined is easy, but going with the flow means either using the default config file (nice for prototyping) or going back and forth between the HTML and the config file to add design tokens. As Tailwind uses NPM and several other tools such as PostCSS and PurgeCSS, it also means more configuration, more maintenance and a brittle configuration. 

In order to _fix_ the naming, cascade and global _problems_ of CSS, Tailwind choose to displace the organizational complexity of CSS inside configuration files and APIs. It's a way of thinking that is very different from traditionnal CSS development.

But what if trying to _fix_ the cascade with more classes, more utilities was actually a dead end?

## Cube CSS

The _Composition, Utility, Block, Exception_ or {https://cube.fyi/, "CUBE CSS"} methodology was created in 2019 by Andy Bell. It's a different approach than the previous methodologies as it's trying to see CSS more on a macro level than a micro level. 

Most importantly, it tries to reunite with the cascade instead of trying to make it disappear. Overall the goal is to write CSS that makes the right choices by itself instead of micro-coding every aspect of it. This is called {https://www.zeldman.com/2018/05/02/transcript-intrinsic-web-design-with-jen-simmons-the-big-web-show/, "intrisic webdesign"}, a term invented by Jen Simmons in 2018.

If you remember correctly at the start of the article we talked about how OOCSS tried to part ways with the parent class and its HTML child elements, as moving them could break CSS. More classes were added in a top to bottom approach to organize the code and make CSS detached from HTML. But an approach like BEM makes you think about objects in _isolation_.

The multiplication of viewports and contexts in which CSS has to work leave developers with two choices: either going more deep inside the objects to micro-manage things like responsive design, or take a step back to try to establish a set of rules and trust the browser into making the right choice. The latest actually already exist: with things like `flexbox`, the developer establishes a set of behaviors and let the browser decide.

CUBE CSS tries to take this approach to a new level by making traditionnal OOCSS or BEM the last step in the development of an interface. 

Here are the steps and details about them:

? Composition : Composition classes are used to create layouts, flow and consistent rhythm to any parent of elements. They set behavior rules only and are design agnostic. 
? Utility : A set of utility classes that do a single thing well. They are used to apply single or near single properties. They are also used to declare design tokens like colors or sizes. Their goal is the same as the utility classes used with BEM to avoid creating elements, but they come first.
? Blocks : The classic block approach inherited from OOCSS and BEM. Those classes should only add the missing CSS rules that Composition and Utility classes did not applied. It can be done with BEM, with single classes or even using HTML selectors.
? Exception : A modification of existing classes to change the rules set inside Blocks. CUBE CSS uses data attributes for its exceptions. Since exceptions are events often triggered by JavaScript, it's simplier to change the data-attribute and having the CSS react immediately than inserting a class. Also it avoids creating a specific class for the exception.

Let's look at an example of a composition class:

```
.flow > * + * {
&nbsp;margin-top: 10px;
}
```

This `.flow` class has a single purpose. It detects _any_ child element right under the parent and add a top margin of 10px only between two elements.

A more traditionnal OOCSS with BEM approach would be:

```
.flow {
&nbsp;\...\
}

.flow__item {
&nbsp;margin-top:10px;
}

.flow__item:first-child() {
&nbsp;margin-top:0;
}
``` 

But those two approaches are not exclusive, *because of the cascade*. It's perfectly possible to manage the flow outside of the blocks or components while adding customization to them, thus the _Block_ of CUBE CSS.

As to how organize the code, Andy Bell suggest this order:

+ Config files
+ Design tokens classes
+ Resets
+ Global styles for HTML elements
+ Utility classes for Composition and Utility
+ Block classes

This organization is also good for specificity. The more specific and nested code is located inside the Block classes, that are served at the end of the file. It will avoid creating repaints.

Andy Bell also suggests {https://cube.fyi/grouping/, "regrouping classes in HTML"} using separators that the browser ignores like `[` or `|`.

```
// Using [ ]
<div 
&nbsp;class="[ card ] [ section box ] [ bg-base color-primary ]" 
&nbsp;data-state="reversed">
</div>

// Using | 
<div 
&nbsp;class="card | section box | bg-base color-primary" 
&nbsp;data-state="reversed">
</div>
```

The order he designed follows this pattern:

+ The elements’s primary block class (here it's `card`)
+ Any subsequent block classes (`section` and `box`)
+ Standard utility classes (`bg-base`)
+ Design token utility classes (`color-primary`)

This way it's easier to know how the code is organized.

## Conclusion

That's all! 

This short history wasn't short in the end. I hope you found it useful. Feel free to contact me if you find any error or mistake or simply want to discuss this topic.

====

NAME: Lost in the dev world
HOST: Home
BREF: Wondering where to go from now
PRIV: false
BODY:

# Lost in the dev world

I worked for money only 4 months in 2020. 

First because of lockdown, then because my mission ended and my employer could not find a new one (well they found some, but the client cancelled at the last moment).

I've been waiting since July and as I explained in my {2020.html, "2020 restrospective"}, this free time allowed me to move forward on the personal side, as well as building my own {tools.html, "tools"}, {knowledge.html, "writing a lot"} and {renovation-journal.html, "renovating my apartment"}.

But on the profesionnal side, I'm in a dead end.

> "I don't _fit_ in the definition of frontend developer, which now seems to mean _backend developer in the browser for over-complex technical stacks in JavaScript_.", Me, Earlier this year

Then I discovered {https://www.sarasoueidan.com/hire/, "Sara Soueidan great 'hire me' page"}. I was relieved to see that the role I try to explain to others is called _Design Engineer_. People like me _do exist_ after all! 

## But wait, are design engineers _that_ needed?

But I quickly realized that my employer's clients (and probably the vast majority of companies that are not startups) have no idea that people like us exist. Those companies started hiring UX designers 3 years ago. They just discovered design systems. And when they agree to make one, it's always to make the current designs fit inside it instead of starting over and ask the good questions. 

Yes, they sometimes care about accessibility, but not that much. That's a public posture, how can you be against accessibility? When they have a designer, he might see a design system as a constraint and blocks its adoption (been there, saw that).

You may think _"What's the problem, can't you just change jobs?!"_ and you are right! I tried and did around ten jobs interviews mostly with modern startups or companies. But for two teams in need of someone like me there was eight {https://twitter.com/heydonworks/status/1349077285232648193/, "graphql perverts"} trying to corner me into a role I didn't want to play. 

As for the remaining teams, they considered they could need me, but not now. They see design engineering as a cost, not as a benefit. I suppose they will only consider it when everything is a mess and they want to start over.

To escape this situation, I thought about freelancing. Maybe design engineering is better suited for freelancers as you start projects or fix them, then leave it to in-house developers?

I've considered it seriously, looked into it, and decided it wasn't for me (yet). You see, France's digital world (even the infamous _FrenchTech_) is not only late in technologies and development practices, *it's also super late at paying bills* (and very, _very_ insistant at lowering rates). 

I've heard horror stories about 12 to 24 months late payments. So most freelancers I know try to avoid working with French companies now, and focus on US clients. 

I think I don't have the mental fortitude to deal with this or build a new US based network.

## It's not the code, it's the environment

So salaried employment is my only solution!

I've had a proprosition to become a teacher for a bootcamp. Considering I wrote a {html-tips.html, "massive HTML guide"}, {css-good-practices.html, "CSS good practices"} and {css-methodologies.html, "methodologies"} as well as {the-soft-power-of-javascript.html, "an analysis about the JavaScript ecosystem"} and keeps a page about {list-of-javascript-frameworks.html, "alternative frameworks"}, I might be a good fit. 

I should probably apply. But I enjoy coding HTML, CSS and JavaScript sooooo much. 

I just don't enjoy _the environment_ in which I do it anymore. Rich but cheap companies, change aware managers, agile methodologies as a justification for bad project management, massive technical debt piloting the roadmap. I'm fed up. All of this makes me want to give back my keyboard and call it a day.

What blocks from doing it (and accepting this teaching job) is an absurd feeling that it would mean _giving up_ and I'm not desperate enough to give up yet. 

So if you are *not* a cheap, organisational change aware, _yolo_ agile, _Javascript evangelical tech bro spirit_ company and need a design engineer, feel free to contact me using the links below. 

I'd love to hear that you exist.